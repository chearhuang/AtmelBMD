
AtmelBMD101.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029dc  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  000029dc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000017c  20000068  00002a44  00010068  2**2
                  ALLOC
  3 .stack        00002004  200001e4  00002bc0  00010068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001d638  00000000  00000000  000100eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f10  00000000  00000000  0002d723  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000042e4  00000000  00000000  00030633  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000538  00000000  00000000  00034917  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000518  00000000  00000000  00034e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00007858  00000000  00000000  00035367  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ce4f  00000000  00000000  0003cbbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009e7fa  00000000  00000000  00049a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001304  00000000  00000000  000e8208  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200021e8 	.word	0x200021e8
       4:	00001289 	.word	0x00001289
       8:	00001285 	.word	0x00001285
       c:	00001285 	.word	0x00001285
	...
      2c:	00001285 	.word	0x00001285
	...
      38:	00001285 	.word	0x00001285
      3c:	00001285 	.word	0x00001285
      40:	00001285 	.word	0x00001285
      44:	00001285 	.word	0x00001285
      48:	00001285 	.word	0x00001285
      4c:	000001b1 	.word	0x000001b1
      50:	00001285 	.word	0x00001285
      54:	00001285 	.word	0x00001285
      58:	00001285 	.word	0x00001285
      5c:	00001285 	.word	0x00001285
      60:	00001285 	.word	0x00001285
      64:	00000751 	.word	0x00000751
      68:	00000761 	.word	0x00000761
      6c:	00000771 	.word	0x00000771
      70:	00000781 	.word	0x00000781
      74:	00000791 	.word	0x00000791
      78:	000007a1 	.word	0x000007a1
      7c:	00001285 	.word	0x00001285
      80:	00001245 	.word	0x00001245
      84:	00001255 	.word	0x00001255
      88:	00001265 	.word	0x00001265
      8c:	00001275 	.word	0x00001275
      90:	00001285 	.word	0x00001285
      94:	00001285 	.word	0x00001285
      98:	00001285 	.word	0x00001285
      9c:	00001285 	.word	0x00001285
      a0:	00001285 	.word	0x00001285
      a4:	00001285 	.word	0x00001285

000000a8 <__do_global_dtors_aux>:
      a8:	b510      	push	{r4, lr}
      aa:	4c06      	ldr	r4, [pc, #24]	; (c4 <__do_global_dtors_aux+0x1c>)
      ac:	7823      	ldrb	r3, [r4, #0]
      ae:	2b00      	cmp	r3, #0
      b0:	d107      	bne.n	c2 <__do_global_dtors_aux+0x1a>
      b2:	4b05      	ldr	r3, [pc, #20]	; (c8 <__do_global_dtors_aux+0x20>)
      b4:	2b00      	cmp	r3, #0
      b6:	d002      	beq.n	be <__do_global_dtors_aux+0x16>
      b8:	4804      	ldr	r0, [pc, #16]	; (cc <__do_global_dtors_aux+0x24>)
      ba:	e000      	b.n	be <__do_global_dtors_aux+0x16>
      bc:	bf00      	nop
      be:	2301      	movs	r3, #1
      c0:	7023      	strb	r3, [r4, #0]
      c2:	bd10      	pop	{r4, pc}
      c4:	20000068 	.word	0x20000068
      c8:	00000000 	.word	0x00000000
      cc:	000029dc 	.word	0x000029dc

000000d0 <frame_dummy>:
      d0:	b508      	push	{r3, lr}
      d2:	4b08      	ldr	r3, [pc, #32]	; (f4 <frame_dummy+0x24>)
      d4:	2b00      	cmp	r3, #0
      d6:	d003      	beq.n	e0 <frame_dummy+0x10>
      d8:	4807      	ldr	r0, [pc, #28]	; (f8 <frame_dummy+0x28>)
      da:	4908      	ldr	r1, [pc, #32]	; (fc <frame_dummy+0x2c>)
      dc:	e000      	b.n	e0 <frame_dummy+0x10>
      de:	bf00      	nop
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x30>)
      e2:	6803      	ldr	r3, [r0, #0]
      e4:	2b00      	cmp	r3, #0
      e6:	d100      	bne.n	ea <frame_dummy+0x1a>
      e8:	bd08      	pop	{r3, pc}
      ea:	4b06      	ldr	r3, [pc, #24]	; (104 <frame_dummy+0x34>)
      ec:	2b00      	cmp	r3, #0
      ee:	d0fb      	beq.n	e8 <frame_dummy+0x18>
      f0:	4798      	blx	r3
      f2:	e7f9      	b.n	e8 <frame_dummy+0x18>
      f4:	00000000 	.word	0x00000000
      f8:	000029dc 	.word	0x000029dc
      fc:	2000006c 	.word	0x2000006c
     100:	000029dc 	.word	0x000029dc
     104:	00000000 	.word	0x00000000

00000108 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     108:	4b0c      	ldr	r3, [pc, #48]	; (13c <cpu_irq_enter_critical+0x34>)
     10a:	681b      	ldr	r3, [r3, #0]
     10c:	2b00      	cmp	r3, #0
     10e:	d110      	bne.n	132 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     110:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     114:	2b00      	cmp	r3, #0
     116:	d109      	bne.n	12c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     118:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     11a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     11e:	2200      	movs	r2, #0
     120:	4b07      	ldr	r3, [pc, #28]	; (140 <cpu_irq_enter_critical+0x38>)
     122:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     124:	3201      	adds	r2, #1
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <cpu_irq_enter_critical+0x3c>)
     128:	701a      	strb	r2, [r3, #0]
     12a:	e002      	b.n	132 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     12c:	2200      	movs	r2, #0
     12e:	4b05      	ldr	r3, [pc, #20]	; (144 <cpu_irq_enter_critical+0x3c>)
     130:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     132:	4a02      	ldr	r2, [pc, #8]	; (13c <cpu_irq_enter_critical+0x34>)
     134:	6813      	ldr	r3, [r2, #0]
     136:	3301      	adds	r3, #1
     138:	6013      	str	r3, [r2, #0]
}
     13a:	4770      	bx	lr
     13c:	20000084 	.word	0x20000084
     140:	20000000 	.word	0x20000000
     144:	20000088 	.word	0x20000088

00000148 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     148:	4b08      	ldr	r3, [pc, #32]	; (16c <cpu_irq_leave_critical+0x24>)
     14a:	681a      	ldr	r2, [r3, #0]
     14c:	3a01      	subs	r2, #1
     14e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     150:	681b      	ldr	r3, [r3, #0]
     152:	2b00      	cmp	r3, #0
     154:	d109      	bne.n	16a <cpu_irq_leave_critical+0x22>
     156:	4b06      	ldr	r3, [pc, #24]	; (170 <cpu_irq_leave_critical+0x28>)
     158:	781b      	ldrb	r3, [r3, #0]
     15a:	2b00      	cmp	r3, #0
     15c:	d005      	beq.n	16a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     15e:	2201      	movs	r2, #1
     160:	4b04      	ldr	r3, [pc, #16]	; (174 <cpu_irq_leave_critical+0x2c>)
     162:	701a      	strb	r2, [r3, #0]
     164:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     168:	b662      	cpsie	i
	}
}
     16a:	4770      	bx	lr
     16c:	20000084 	.word	0x20000084
     170:	20000088 	.word	0x20000088
     174:	20000000 	.word	0x20000000

00000178 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     178:	b5f0      	push	{r4, r5, r6, r7, lr}
     17a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     17c:	ac01      	add	r4, sp, #4
     17e:	2501      	movs	r5, #1
     180:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     182:	2700      	movs	r7, #0
     184:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     186:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     188:	205b      	movs	r0, #91	; 0x5b
     18a:	1c21      	adds	r1, r4, #0
     18c:	4e06      	ldr	r6, [pc, #24]	; (1a8 <system_board_init+0x30>)
     18e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     190:	2280      	movs	r2, #128	; 0x80
     192:	0512      	lsls	r2, r2, #20
     194:	4b05      	ldr	r3, [pc, #20]	; (1ac <system_board_init+0x34>)
     196:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     198:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     19a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     19c:	2041      	movs	r0, #65	; 0x41
     19e:	1c21      	adds	r1, r4, #0
     1a0:	47b0      	blx	r6
}
     1a2:	b003      	add	sp, #12
     1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	000002bd 	.word	0x000002bd
     1ac:	41006100 	.word	0x41006100

000001b0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     1b0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     1b2:	2200      	movs	r2, #0
     1b4:	4b15      	ldr	r3, [pc, #84]	; (20c <EIC_Handler+0x5c>)
     1b6:	701a      	strb	r2, [r3, #0]
     1b8:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     1ba:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     1bc:	4e14      	ldr	r6, [pc, #80]	; (210 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     1be:	4c13      	ldr	r4, [pc, #76]	; (20c <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     1c0:	2b1f      	cmp	r3, #31
     1c2:	d919      	bls.n	1f8 <EIC_Handler+0x48>
     1c4:	e00f      	b.n	1e6 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     1c6:	2100      	movs	r1, #0
     1c8:	e000      	b.n	1cc <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     1ca:	4912      	ldr	r1, [pc, #72]	; (214 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     1cc:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     1ce:	009b      	lsls	r3, r3, #2
     1d0:	599b      	ldr	r3, [r3, r6]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d000      	beq.n	1d8 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     1d6:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     1d8:	7823      	ldrb	r3, [r4, #0]
     1da:	3301      	adds	r3, #1
     1dc:	b2db      	uxtb	r3, r3
     1de:	7023      	strb	r3, [r4, #0]
     1e0:	2b0f      	cmp	r3, #15
     1e2:	d9ed      	bls.n	1c0 <EIC_Handler+0x10>
     1e4:	e011      	b.n	20a <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     1e6:	1c29      	adds	r1, r5, #0
     1e8:	4019      	ands	r1, r3
     1ea:	2201      	movs	r2, #1
     1ec:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     1ee:	2100      	movs	r1, #0
     1f0:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     1f2:	4211      	tst	r1, r2
     1f4:	d1e7      	bne.n	1c6 <EIC_Handler+0x16>
     1f6:	e7ef      	b.n	1d8 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     1f8:	1c29      	adds	r1, r5, #0
     1fa:	4019      	ands	r1, r3
     1fc:	2201      	movs	r2, #1
     1fe:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     200:	4904      	ldr	r1, [pc, #16]	; (214 <EIC_Handler+0x64>)
     202:	6949      	ldr	r1, [r1, #20]
     204:	4211      	tst	r1, r2
     206:	d1e0      	bne.n	1ca <EIC_Handler+0x1a>
     208:	e7e6      	b.n	1d8 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     20a:	bd70      	pop	{r4, r5, r6, pc}
     20c:	200000d0 	.word	0x200000d0
     210:	200000d4 	.word	0x200000d4
     214:	40002800 	.word	0x40002800

00000218 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     218:	4a06      	ldr	r2, [pc, #24]	; (234 <_extint_enable+0x1c>)
     21a:	7811      	ldrb	r1, [r2, #0]
     21c:	2302      	movs	r3, #2
     21e:	430b      	orrs	r3, r1
     220:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     222:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     224:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     226:	6853      	ldr	r3, [r2, #4]
     228:	4219      	tst	r1, r3
     22a:	d1fc      	bne.n	226 <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     22c:	6853      	ldr	r3, [r2, #4]
     22e:	4218      	tst	r0, r3
     230:	d1f9      	bne.n	226 <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     232:	4770      	bx	lr
     234:	40002800 	.word	0x40002800

00000238 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     238:	b500      	push	{lr}
     23a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     23c:	4a18      	ldr	r2, [pc, #96]	; (2a0 <_system_extint_init+0x68>)
     23e:	6953      	ldr	r3, [r2, #20]
     240:	2180      	movs	r1, #128	; 0x80
     242:	00c9      	lsls	r1, r1, #3
     244:	430b      	orrs	r3, r1
     246:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     248:	a901      	add	r1, sp, #4
     24a:	2300      	movs	r3, #0
     24c:	700b      	strb	r3, [r1, #0]
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     24e:	2003      	movs	r0, #3
     250:	4b14      	ldr	r3, [pc, #80]	; (2a4 <_system_extint_init+0x6c>)
     252:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     254:	2003      	movs	r0, #3
     256:	4b14      	ldr	r3, [pc, #80]	; (2a8 <_system_extint_init+0x70>)
     258:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     25a:	4a14      	ldr	r2, [pc, #80]	; (2ac <_system_extint_init+0x74>)
     25c:	7811      	ldrb	r1, [r2, #0]
     25e:	2301      	movs	r3, #1
     260:	430b      	orrs	r3, r1
     262:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     264:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     266:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     268:	6853      	ldr	r3, [r2, #4]
     26a:	4219      	tst	r1, r3
     26c:	d1fc      	bne.n	268 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     26e:	6853      	ldr	r3, [r2, #4]
     270:	4218      	tst	r0, r3
     272:	d009      	beq.n	288 <_system_extint_init+0x50>
     274:	e7f8      	b.n	268 <_system_extint_init+0x30>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     276:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     278:	428b      	cmp	r3, r1
     27a:	d1fc      	bne.n	276 <_system_extint_init+0x3e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     27c:	2208      	movs	r2, #8
     27e:	4b0c      	ldr	r3, [pc, #48]	; (2b0 <_system_extint_init+0x78>)
     280:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     282:	4b0c      	ldr	r3, [pc, #48]	; (2b4 <_system_extint_init+0x7c>)
     284:	4798      	blx	r3
     286:	e009      	b.n	29c <_system_extint_init+0x64>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     288:	4a08      	ldr	r2, [pc, #32]	; (2ac <_system_extint_init+0x74>)
     28a:	7813      	ldrb	r3, [r2, #0]
     28c:	2110      	movs	r1, #16
     28e:	438b      	bics	r3, r1
     290:	7013      	strb	r3, [r2, #0]
     292:	4b09      	ldr	r3, [pc, #36]	; (2b8 <_system_extint_init+0x80>)
     294:	1c19      	adds	r1, r3, #0
     296:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     298:	2200      	movs	r2, #0
     29a:	e7ec      	b.n	276 <_system_extint_init+0x3e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
     29c:	b003      	add	sp, #12
     29e:	bd00      	pop	{pc}
     2a0:	40000800 	.word	0x40000800
     2a4:	0000108d 	.word	0x0000108d
     2a8:	00001025 	.word	0x00001025
     2ac:	40002800 	.word	0x40002800
     2b0:	e000e100 	.word	0xe000e100
     2b4:	00000219 	.word	0x00000219
     2b8:	200000d4 	.word	0x200000d4

000002bc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     2bc:	b500      	push	{lr}
     2be:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     2c0:	ab01      	add	r3, sp, #4
     2c2:	2280      	movs	r2, #128	; 0x80
     2c4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     2c6:	780a      	ldrb	r2, [r1, #0]
     2c8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     2ca:	784a      	ldrb	r2, [r1, #1]
     2cc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     2ce:	788a      	ldrb	r2, [r1, #2]
     2d0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     2d2:	1c19      	adds	r1, r3, #0
     2d4:	4b01      	ldr	r3, [pc, #4]	; (2dc <port_pin_set_config+0x20>)
     2d6:	4798      	blx	r3
}
     2d8:	b003      	add	sp, #12
     2da:	bd00      	pop	{pc}
     2dc:	00001189 	.word	0x00001189

000002e0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     2e0:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     2e2:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2e4:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     2e6:	4281      	cmp	r1, r0
     2e8:	d30c      	bcc.n	304 <_sercom_get_sync_baud_val+0x24>
     2ea:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     2ec:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     2ee:	3301      	adds	r3, #1
     2f0:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     2f2:	4288      	cmp	r0, r1
     2f4:	d9fa      	bls.n	2ec <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     2f6:	3b01      	subs	r3, #1
     2f8:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2fa:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     2fc:	2bff      	cmp	r3, #255	; 0xff
     2fe:	d801      	bhi.n	304 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     300:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     302:	2400      	movs	r4, #0
	}
}
     304:	1c20      	adds	r0, r4, #0
     306:	bd10      	pop	{r4, pc}

00000308 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     308:	b5f0      	push	{r4, r5, r6, r7, lr}
     30a:	465f      	mov	r7, fp
     30c:	4656      	mov	r6, sl
     30e:	464d      	mov	r5, r9
     310:	4644      	mov	r4, r8
     312:	b4f0      	push	{r4, r5, r6, r7}
     314:	b089      	sub	sp, #36	; 0x24
     316:	1c1c      	adds	r4, r3, #0
     318:	ab12      	add	r3, sp, #72	; 0x48
     31a:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     31c:	1c06      	adds	r6, r0, #0
     31e:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     320:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     322:	428e      	cmp	r6, r1
     324:	d900      	bls.n	328 <_sercom_get_async_baud_val+0x20>
     326:	e0c7      	b.n	4b8 <_sercom_get_async_baud_val+0x1b0>
     328:	1c25      	adds	r5, r4, #0
     32a:	9207      	str	r2, [sp, #28]
     32c:	1c0c      	adds	r4, r1, #0
     32e:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     330:	2d00      	cmp	r5, #0
     332:	d151      	bne.n	3d8 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     334:	1c18      	adds	r0, r3, #0
     336:	2100      	movs	r1, #0
     338:	2300      	movs	r3, #0
     33a:	4d63      	ldr	r5, [pc, #396]	; (4c8 <_sercom_get_async_baud_val+0x1c0>)
     33c:	47a8      	blx	r5
     33e:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     340:	1c26      	adds	r6, r4, #0
     342:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     344:	2300      	movs	r3, #0
     346:	2400      	movs	r4, #0
     348:	9302      	str	r3, [sp, #8]
     34a:	9403      	str	r4, [sp, #12]
     34c:	2200      	movs	r2, #0
     34e:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     350:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     352:	2120      	movs	r1, #32
     354:	468c      	mov	ip, r1
     356:	391f      	subs	r1, #31
     358:	9600      	str	r6, [sp, #0]
     35a:	9701      	str	r7, [sp, #4]
     35c:	2420      	movs	r4, #32
     35e:	4264      	negs	r4, r4
     360:	1904      	adds	r4, r0, r4
     362:	d403      	bmi.n	36c <_sercom_get_async_baud_val+0x64>
     364:	1c0d      	adds	r5, r1, #0
     366:	40a5      	lsls	r5, r4
     368:	46a8      	mov	r8, r5
     36a:	e004      	b.n	376 <_sercom_get_async_baud_val+0x6e>
     36c:	4664      	mov	r4, ip
     36e:	1a24      	subs	r4, r4, r0
     370:	1c0d      	adds	r5, r1, #0
     372:	40e5      	lsrs	r5, r4
     374:	46a8      	mov	r8, r5
     376:	1c0c      	adds	r4, r1, #0
     378:	4084      	lsls	r4, r0
     37a:	46a1      	mov	r9, r4

		r = r << 1;
     37c:	1c14      	adds	r4, r2, #0
     37e:	1c1d      	adds	r5, r3, #0
     380:	18a4      	adds	r4, r4, r2
     382:	415d      	adcs	r5, r3
     384:	1c22      	adds	r2, r4, #0
     386:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
     388:	465e      	mov	r6, fp
     38a:	4647      	mov	r7, r8
     38c:	423e      	tst	r6, r7
     38e:	d003      	beq.n	398 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
     390:	1c0e      	adds	r6, r1, #0
     392:	4326      	orrs	r6, r4
     394:	1c32      	adds	r2, r6, #0
     396:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
     398:	9c01      	ldr	r4, [sp, #4]
     39a:	429c      	cmp	r4, r3
     39c:	d810      	bhi.n	3c0 <_sercom_get_async_baud_val+0xb8>
     39e:	d102      	bne.n	3a6 <_sercom_get_async_baud_val+0x9e>
     3a0:	9c00      	ldr	r4, [sp, #0]
     3a2:	4294      	cmp	r4, r2
     3a4:	d80c      	bhi.n	3c0 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
     3a6:	9c00      	ldr	r4, [sp, #0]
     3a8:	9d01      	ldr	r5, [sp, #4]
     3aa:	1b12      	subs	r2, r2, r4
     3ac:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     3ae:	464d      	mov	r5, r9
     3b0:	9e02      	ldr	r6, [sp, #8]
     3b2:	9f03      	ldr	r7, [sp, #12]
     3b4:	4335      	orrs	r5, r6
     3b6:	1c3c      	adds	r4, r7, #0
     3b8:	4646      	mov	r6, r8
     3ba:	4334      	orrs	r4, r6
     3bc:	9502      	str	r5, [sp, #8]
     3be:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     3c0:	3801      	subs	r0, #1
     3c2:	d2cb      	bcs.n	35c <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     3c4:	2200      	movs	r2, #0
     3c6:	2301      	movs	r3, #1
     3c8:	9802      	ldr	r0, [sp, #8]
     3ca:	9903      	ldr	r1, [sp, #12]
     3cc:	1a12      	subs	r2, r2, r0
     3ce:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     3d0:	0c11      	lsrs	r1, r2, #16
     3d2:	041b      	lsls	r3, r3, #16
     3d4:	4319      	orrs	r1, r3
     3d6:	e06c      	b.n	4b2 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     3d8:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     3da:	2d01      	cmp	r5, #1
     3dc:	d169      	bne.n	4b2 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     3de:	0f61      	lsrs	r1, r4, #29
     3e0:	1c0f      	adds	r7, r1, #0
     3e2:	00e1      	lsls	r1, r4, #3
     3e4:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
     3e6:	1c18      	adds	r0, r3, #0
     3e8:	2100      	movs	r1, #0
     3ea:	2300      	movs	r3, #0
     3ec:	4c36      	ldr	r4, [pc, #216]	; (4c8 <_sercom_get_async_baud_val+0x1c0>)
     3ee:	47a0      	blx	r4
     3f0:	1c04      	adds	r4, r0, #0
     3f2:	1c0d      	adds	r5, r1, #0
     3f4:	2300      	movs	r3, #0
     3f6:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     3f8:	3320      	adds	r3, #32
     3fa:	469b      	mov	fp, r3
     3fc:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     3fe:	4663      	mov	r3, ip
     400:	9305      	str	r3, [sp, #20]
     402:	46b9      	mov	r9, r7
     404:	466b      	mov	r3, sp
     406:	7d1b      	ldrb	r3, [r3, #20]
     408:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     40a:	2300      	movs	r3, #0
     40c:	469c      	mov	ip, r3
     40e:	2000      	movs	r0, #0
     410:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
     412:	223f      	movs	r2, #63	; 0x3f
     414:	9400      	str	r4, [sp, #0]
     416:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
     418:	2320      	movs	r3, #32
     41a:	425b      	negs	r3, r3
     41c:	18d3      	adds	r3, r2, r3
     41e:	d403      	bmi.n	428 <_sercom_get_async_baud_val+0x120>
     420:	1c34      	adds	r4, r6, #0
     422:	409c      	lsls	r4, r3
     424:	1c23      	adds	r3, r4, #0
     426:	e004      	b.n	432 <_sercom_get_async_baud_val+0x12a>
     428:	465b      	mov	r3, fp
     42a:	1a9b      	subs	r3, r3, r2
     42c:	1c34      	adds	r4, r6, #0
     42e:	40dc      	lsrs	r4, r3
     430:	1c23      	adds	r3, r4, #0
     432:	1c37      	adds	r7, r6, #0
     434:	4097      	lsls	r7, r2

		r = r << 1;
     436:	1c04      	adds	r4, r0, #0
     438:	1c0d      	adds	r5, r1, #0
     43a:	1824      	adds	r4, r4, r0
     43c:	414d      	adcs	r5, r1
     43e:	1c20      	adds	r0, r4, #0
     440:	1c29      	adds	r1, r5, #0
     442:	9002      	str	r0, [sp, #8]
     444:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
     446:	4644      	mov	r4, r8
     448:	403c      	ands	r4, r7
     44a:	46a2      	mov	sl, r4
     44c:	464c      	mov	r4, r9
     44e:	4023      	ands	r3, r4
     450:	4654      	mov	r4, sl
     452:	4323      	orrs	r3, r4
     454:	d005      	beq.n	462 <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
     456:	9b02      	ldr	r3, [sp, #8]
     458:	9c03      	ldr	r4, [sp, #12]
     45a:	1c1d      	adds	r5, r3, #0
     45c:	4335      	orrs	r5, r6
     45e:	1c28      	adds	r0, r5, #0
     460:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
     462:	9b01      	ldr	r3, [sp, #4]
     464:	428b      	cmp	r3, r1
     466:	d80a      	bhi.n	47e <_sercom_get_async_baud_val+0x176>
     468:	d102      	bne.n	470 <_sercom_get_async_baud_val+0x168>
     46a:	9b00      	ldr	r3, [sp, #0]
     46c:	4283      	cmp	r3, r0
     46e:	d806      	bhi.n	47e <_sercom_get_async_baud_val+0x176>
			r = r - d;
     470:	9b00      	ldr	r3, [sp, #0]
     472:	9c01      	ldr	r4, [sp, #4]
     474:	1ac0      	subs	r0, r0, r3
     476:	41a1      	sbcs	r1, r4
			q |= bit_shift;
     478:	4663      	mov	r3, ip
     47a:	433b      	orrs	r3, r7
     47c:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     47e:	3a01      	subs	r2, #1
     480:	d2ca      	bcs.n	418 <_sercom_get_async_baud_val+0x110>
     482:	9c00      	ldr	r4, [sp, #0]
     484:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     486:	4662      	mov	r2, ip
     488:	9905      	ldr	r1, [sp, #20]
     48a:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
     48c:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     48e:	4a0f      	ldr	r2, [pc, #60]	; (4cc <_sercom_get_async_baud_val+0x1c4>)
     490:	4293      	cmp	r3, r2
     492:	d908      	bls.n	4a6 <_sercom_get_async_baud_val+0x19e>
     494:	9a06      	ldr	r2, [sp, #24]
     496:	3201      	adds	r2, #1
     498:	b2d2      	uxtb	r2, r2
     49a:	9206      	str	r2, [sp, #24]
     49c:	1c0a      	adds	r2, r1, #0
     49e:	3201      	adds	r2, #1
     4a0:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     4a2:	2a08      	cmp	r2, #8
     4a4:	d1ae      	bne.n	404 <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4a6:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     4a8:	9a06      	ldr	r2, [sp, #24]
     4aa:	2a08      	cmp	r2, #8
     4ac:	d004      	beq.n	4b8 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     4ae:	0351      	lsls	r1, r2, #13
     4b0:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     4b2:	9b07      	ldr	r3, [sp, #28]
     4b4:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
     4b6:	2500      	movs	r5, #0
}
     4b8:	1c28      	adds	r0, r5, #0
     4ba:	b009      	add	sp, #36	; 0x24
     4bc:	bc3c      	pop	{r2, r3, r4, r5}
     4be:	4690      	mov	r8, r2
     4c0:	4699      	mov	r9, r3
     4c2:	46a2      	mov	sl, r4
     4c4:	46ab      	mov	fp, r5
     4c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4c8:	000018d5 	.word	0x000018d5
     4cc:	00001fff 	.word	0x00001fff

000004d0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     4d0:	b510      	push	{r4, lr}
     4d2:	b082      	sub	sp, #8
     4d4:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     4d6:	4b0e      	ldr	r3, [pc, #56]	; (510 <sercom_set_gclk_generator+0x40>)
     4d8:	781b      	ldrb	r3, [r3, #0]
     4da:	2b00      	cmp	r3, #0
     4dc:	d001      	beq.n	4e2 <sercom_set_gclk_generator+0x12>
     4de:	2900      	cmp	r1, #0
     4e0:	d00d      	beq.n	4fe <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     4e2:	a901      	add	r1, sp, #4
     4e4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     4e6:	200f      	movs	r0, #15
     4e8:	4b0a      	ldr	r3, [pc, #40]	; (514 <sercom_set_gclk_generator+0x44>)
     4ea:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     4ec:	200f      	movs	r0, #15
     4ee:	4b0a      	ldr	r3, [pc, #40]	; (518 <sercom_set_gclk_generator+0x48>)
     4f0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     4f2:	4b07      	ldr	r3, [pc, #28]	; (510 <sercom_set_gclk_generator+0x40>)
     4f4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     4f6:	2201      	movs	r2, #1
     4f8:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     4fa:	2000      	movs	r0, #0
     4fc:	e006      	b.n	50c <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     4fe:	4b04      	ldr	r3, [pc, #16]	; (510 <sercom_set_gclk_generator+0x40>)
     500:	785b      	ldrb	r3, [r3, #1]
     502:	4283      	cmp	r3, r0
     504:	d001      	beq.n	50a <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     506:	201d      	movs	r0, #29
     508:	e000      	b.n	50c <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     50a:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     50c:	b002      	add	sp, #8
     50e:	bd10      	pop	{r4, pc}
     510:	2000008c 	.word	0x2000008c
     514:	0000108d 	.word	0x0000108d
     518:	00001025 	.word	0x00001025

0000051c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     51c:	4b44      	ldr	r3, [pc, #272]	; (630 <_sercom_get_default_pad+0x114>)
     51e:	4298      	cmp	r0, r3
     520:	d033      	beq.n	58a <_sercom_get_default_pad+0x6e>
     522:	d806      	bhi.n	532 <_sercom_get_default_pad+0x16>
     524:	4b43      	ldr	r3, [pc, #268]	; (634 <_sercom_get_default_pad+0x118>)
     526:	4298      	cmp	r0, r3
     528:	d00d      	beq.n	546 <_sercom_get_default_pad+0x2a>
     52a:	4b43      	ldr	r3, [pc, #268]	; (638 <_sercom_get_default_pad+0x11c>)
     52c:	4298      	cmp	r0, r3
     52e:	d01b      	beq.n	568 <_sercom_get_default_pad+0x4c>
     530:	e06f      	b.n	612 <_sercom_get_default_pad+0xf6>
     532:	4b42      	ldr	r3, [pc, #264]	; (63c <_sercom_get_default_pad+0x120>)
     534:	4298      	cmp	r0, r3
     536:	d04a      	beq.n	5ce <_sercom_get_default_pad+0xb2>
     538:	4b41      	ldr	r3, [pc, #260]	; (640 <_sercom_get_default_pad+0x124>)
     53a:	4298      	cmp	r0, r3
     53c:	d058      	beq.n	5f0 <_sercom_get_default_pad+0xd4>
     53e:	4b41      	ldr	r3, [pc, #260]	; (644 <_sercom_get_default_pad+0x128>)
     540:	4298      	cmp	r0, r3
     542:	d166      	bne.n	612 <_sercom_get_default_pad+0xf6>
     544:	e032      	b.n	5ac <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     546:	2901      	cmp	r1, #1
     548:	d006      	beq.n	558 <_sercom_get_default_pad+0x3c>
     54a:	2900      	cmp	r1, #0
     54c:	d063      	beq.n	616 <_sercom_get_default_pad+0xfa>
     54e:	2902      	cmp	r1, #2
     550:	d006      	beq.n	560 <_sercom_get_default_pad+0x44>
     552:	2903      	cmp	r1, #3
     554:	d006      	beq.n	564 <_sercom_get_default_pad+0x48>
     556:	e001      	b.n	55c <_sercom_get_default_pad+0x40>
     558:	483b      	ldr	r0, [pc, #236]	; (648 <_sercom_get_default_pad+0x12c>)
     55a:	e067      	b.n	62c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     55c:	2000      	movs	r0, #0
     55e:	e065      	b.n	62c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     560:	483a      	ldr	r0, [pc, #232]	; (64c <_sercom_get_default_pad+0x130>)
     562:	e063      	b.n	62c <_sercom_get_default_pad+0x110>
     564:	483a      	ldr	r0, [pc, #232]	; (650 <_sercom_get_default_pad+0x134>)
     566:	e061      	b.n	62c <_sercom_get_default_pad+0x110>
     568:	2901      	cmp	r1, #1
     56a:	d006      	beq.n	57a <_sercom_get_default_pad+0x5e>
     56c:	2900      	cmp	r1, #0
     56e:	d054      	beq.n	61a <_sercom_get_default_pad+0xfe>
     570:	2902      	cmp	r1, #2
     572:	d006      	beq.n	582 <_sercom_get_default_pad+0x66>
     574:	2903      	cmp	r1, #3
     576:	d006      	beq.n	586 <_sercom_get_default_pad+0x6a>
     578:	e001      	b.n	57e <_sercom_get_default_pad+0x62>
     57a:	4836      	ldr	r0, [pc, #216]	; (654 <_sercom_get_default_pad+0x138>)
     57c:	e056      	b.n	62c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     57e:	2000      	movs	r0, #0
     580:	e054      	b.n	62c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     582:	4835      	ldr	r0, [pc, #212]	; (658 <_sercom_get_default_pad+0x13c>)
     584:	e052      	b.n	62c <_sercom_get_default_pad+0x110>
     586:	4835      	ldr	r0, [pc, #212]	; (65c <_sercom_get_default_pad+0x140>)
     588:	e050      	b.n	62c <_sercom_get_default_pad+0x110>
     58a:	2901      	cmp	r1, #1
     58c:	d006      	beq.n	59c <_sercom_get_default_pad+0x80>
     58e:	2900      	cmp	r1, #0
     590:	d045      	beq.n	61e <_sercom_get_default_pad+0x102>
     592:	2902      	cmp	r1, #2
     594:	d006      	beq.n	5a4 <_sercom_get_default_pad+0x88>
     596:	2903      	cmp	r1, #3
     598:	d006      	beq.n	5a8 <_sercom_get_default_pad+0x8c>
     59a:	e001      	b.n	5a0 <_sercom_get_default_pad+0x84>
     59c:	4830      	ldr	r0, [pc, #192]	; (660 <_sercom_get_default_pad+0x144>)
     59e:	e045      	b.n	62c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     5a0:	2000      	movs	r0, #0
     5a2:	e043      	b.n	62c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5a4:	482f      	ldr	r0, [pc, #188]	; (664 <_sercom_get_default_pad+0x148>)
     5a6:	e041      	b.n	62c <_sercom_get_default_pad+0x110>
     5a8:	482f      	ldr	r0, [pc, #188]	; (668 <_sercom_get_default_pad+0x14c>)
     5aa:	e03f      	b.n	62c <_sercom_get_default_pad+0x110>
     5ac:	2901      	cmp	r1, #1
     5ae:	d006      	beq.n	5be <_sercom_get_default_pad+0xa2>
     5b0:	2900      	cmp	r1, #0
     5b2:	d036      	beq.n	622 <_sercom_get_default_pad+0x106>
     5b4:	2902      	cmp	r1, #2
     5b6:	d006      	beq.n	5c6 <_sercom_get_default_pad+0xaa>
     5b8:	2903      	cmp	r1, #3
     5ba:	d006      	beq.n	5ca <_sercom_get_default_pad+0xae>
     5bc:	e001      	b.n	5c2 <_sercom_get_default_pad+0xa6>
     5be:	482b      	ldr	r0, [pc, #172]	; (66c <_sercom_get_default_pad+0x150>)
     5c0:	e034      	b.n	62c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     5c2:	2000      	movs	r0, #0
     5c4:	e032      	b.n	62c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5c6:	482a      	ldr	r0, [pc, #168]	; (670 <_sercom_get_default_pad+0x154>)
     5c8:	e030      	b.n	62c <_sercom_get_default_pad+0x110>
     5ca:	482a      	ldr	r0, [pc, #168]	; (674 <_sercom_get_default_pad+0x158>)
     5cc:	e02e      	b.n	62c <_sercom_get_default_pad+0x110>
     5ce:	2901      	cmp	r1, #1
     5d0:	d006      	beq.n	5e0 <_sercom_get_default_pad+0xc4>
     5d2:	2900      	cmp	r1, #0
     5d4:	d027      	beq.n	626 <_sercom_get_default_pad+0x10a>
     5d6:	2902      	cmp	r1, #2
     5d8:	d006      	beq.n	5e8 <_sercom_get_default_pad+0xcc>
     5da:	2903      	cmp	r1, #3
     5dc:	d006      	beq.n	5ec <_sercom_get_default_pad+0xd0>
     5de:	e001      	b.n	5e4 <_sercom_get_default_pad+0xc8>
     5e0:	4825      	ldr	r0, [pc, #148]	; (678 <_sercom_get_default_pad+0x15c>)
     5e2:	e023      	b.n	62c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     5e4:	2000      	movs	r0, #0
     5e6:	e021      	b.n	62c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5e8:	4824      	ldr	r0, [pc, #144]	; (67c <_sercom_get_default_pad+0x160>)
     5ea:	e01f      	b.n	62c <_sercom_get_default_pad+0x110>
     5ec:	4824      	ldr	r0, [pc, #144]	; (680 <_sercom_get_default_pad+0x164>)
     5ee:	e01d      	b.n	62c <_sercom_get_default_pad+0x110>
     5f0:	2901      	cmp	r1, #1
     5f2:	d006      	beq.n	602 <_sercom_get_default_pad+0xe6>
     5f4:	2900      	cmp	r1, #0
     5f6:	d018      	beq.n	62a <_sercom_get_default_pad+0x10e>
     5f8:	2902      	cmp	r1, #2
     5fa:	d006      	beq.n	60a <_sercom_get_default_pad+0xee>
     5fc:	2903      	cmp	r1, #3
     5fe:	d006      	beq.n	60e <_sercom_get_default_pad+0xf2>
     600:	e001      	b.n	606 <_sercom_get_default_pad+0xea>
     602:	4820      	ldr	r0, [pc, #128]	; (684 <_sercom_get_default_pad+0x168>)
     604:	e012      	b.n	62c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     606:	2000      	movs	r0, #0
     608:	e010      	b.n	62c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     60a:	481f      	ldr	r0, [pc, #124]	; (688 <_sercom_get_default_pad+0x16c>)
     60c:	e00e      	b.n	62c <_sercom_get_default_pad+0x110>
     60e:	481f      	ldr	r0, [pc, #124]	; (68c <_sercom_get_default_pad+0x170>)
     610:	e00c      	b.n	62c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     612:	2000      	movs	r0, #0
     614:	e00a      	b.n	62c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     616:	481e      	ldr	r0, [pc, #120]	; (690 <_sercom_get_default_pad+0x174>)
     618:	e008      	b.n	62c <_sercom_get_default_pad+0x110>
     61a:	481e      	ldr	r0, [pc, #120]	; (694 <_sercom_get_default_pad+0x178>)
     61c:	e006      	b.n	62c <_sercom_get_default_pad+0x110>
     61e:	481e      	ldr	r0, [pc, #120]	; (698 <_sercom_get_default_pad+0x17c>)
     620:	e004      	b.n	62c <_sercom_get_default_pad+0x110>
     622:	481e      	ldr	r0, [pc, #120]	; (69c <_sercom_get_default_pad+0x180>)
     624:	e002      	b.n	62c <_sercom_get_default_pad+0x110>
     626:	481e      	ldr	r0, [pc, #120]	; (6a0 <_sercom_get_default_pad+0x184>)
     628:	e000      	b.n	62c <_sercom_get_default_pad+0x110>
     62a:	481e      	ldr	r0, [pc, #120]	; (6a4 <_sercom_get_default_pad+0x188>)
	}

	Assert(false);
	return 0;
}
     62c:	4770      	bx	lr
     62e:	46c0      	nop			; (mov r8, r8)
     630:	42000c00 	.word	0x42000c00
     634:	42000400 	.word	0x42000400
     638:	42000800 	.word	0x42000800
     63c:	42001400 	.word	0x42001400
     640:	42001800 	.word	0x42001800
     644:	42001000 	.word	0x42001000
     648:	00090002 	.word	0x00090002
     64c:	000a0002 	.word	0x000a0002
     650:	000b0002 	.word	0x000b0002
     654:	00110002 	.word	0x00110002
     658:	00120002 	.word	0x00120002
     65c:	00130002 	.word	0x00130002
     660:	00170003 	.word	0x00170003
     664:	00140003 	.word	0x00140003
     668:	00150003 	.word	0x00150003
     66c:	00350002 	.word	0x00350002
     670:	00200002 	.word	0x00200002
     674:	00210002 	.word	0x00210002
     678:	000d0002 	.word	0x000d0002
     67c:	000e0002 	.word	0x000e0002
     680:	000f0002 	.word	0x000f0002
     684:	003f0003 	.word	0x003f0003
     688:	00360003 	.word	0x00360003
     68c:	00370003 	.word	0x00370003
     690:	00080002 	.word	0x00080002
     694:	00100002 	.word	0x00100002
     698:	00160003 	.word	0x00160003
     69c:	00220002 	.word	0x00220002
     6a0:	000c0002 	.word	0x000c0002
     6a4:	003e0003 	.word	0x003e0003

000006a8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     6a8:	b530      	push	{r4, r5, lr}
     6aa:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     6ac:	4b0c      	ldr	r3, [pc, #48]	; (6e0 <_sercom_get_sercom_inst_index+0x38>)
     6ae:	466a      	mov	r2, sp
     6b0:	cb32      	ldmia	r3!, {r1, r4, r5}
     6b2:	c232      	stmia	r2!, {r1, r4, r5}
     6b4:	cb32      	ldmia	r3!, {r1, r4, r5}
     6b6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6b8:	9b00      	ldr	r3, [sp, #0]
     6ba:	4283      	cmp	r3, r0
     6bc:	d006      	beq.n	6cc <_sercom_get_sercom_inst_index+0x24>
     6be:	2301      	movs	r3, #1
     6c0:	009a      	lsls	r2, r3, #2
     6c2:	4669      	mov	r1, sp
     6c4:	5852      	ldr	r2, [r2, r1]
     6c6:	4282      	cmp	r2, r0
     6c8:	d103      	bne.n	6d2 <_sercom_get_sercom_inst_index+0x2a>
     6ca:	e000      	b.n	6ce <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6cc:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     6ce:	b2d8      	uxtb	r0, r3
     6d0:	e003      	b.n	6da <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6d2:	3301      	adds	r3, #1
     6d4:	2b06      	cmp	r3, #6
     6d6:	d1f3      	bne.n	6c0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     6d8:	2000      	movs	r0, #0
}
     6da:	b007      	add	sp, #28
     6dc:	bd30      	pop	{r4, r5, pc}
     6de:	46c0      	nop			; (mov r8, r8)
     6e0:	000028cc 	.word	0x000028cc

000006e4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     6e4:	4770      	bx	lr
     6e6:	46c0      	nop			; (mov r8, r8)

000006e8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     6ea:	4b0a      	ldr	r3, [pc, #40]	; (714 <_sercom_set_handler+0x2c>)
     6ec:	781b      	ldrb	r3, [r3, #0]
     6ee:	2b00      	cmp	r3, #0
     6f0:	d10c      	bne.n	70c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     6f2:	4f09      	ldr	r7, [pc, #36]	; (718 <_sercom_set_handler+0x30>)
     6f4:	4e09      	ldr	r6, [pc, #36]	; (71c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     6f6:	4d0a      	ldr	r5, [pc, #40]	; (720 <_sercom_set_handler+0x38>)
     6f8:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     6fa:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     6fc:	195a      	adds	r2, r3, r5
     6fe:	6014      	str	r4, [r2, #0]
     700:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     702:	2b18      	cmp	r3, #24
     704:	d1f9      	bne.n	6fa <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     706:	2201      	movs	r2, #1
     708:	4b02      	ldr	r3, [pc, #8]	; (714 <_sercom_set_handler+0x2c>)
     70a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     70c:	0080      	lsls	r0, r0, #2
     70e:	4b02      	ldr	r3, [pc, #8]	; (718 <_sercom_set_handler+0x30>)
     710:	50c1      	str	r1, [r0, r3]
}
     712:	bdf0      	pop	{r4, r5, r6, r7, pc}
     714:	2000008e 	.word	0x2000008e
     718:	20000090 	.word	0x20000090
     71c:	000006e5 	.word	0x000006e5
     720:	20000114 	.word	0x20000114

00000724 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     724:	b510      	push	{r4, lr}
     726:	b082      	sub	sp, #8
     728:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     72a:	4668      	mov	r0, sp
     72c:	4905      	ldr	r1, [pc, #20]	; (744 <_sercom_get_interrupt_vector+0x20>)
     72e:	2206      	movs	r2, #6
     730:	4b05      	ldr	r3, [pc, #20]	; (748 <_sercom_get_interrupt_vector+0x24>)
     732:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     734:	1c20      	adds	r0, r4, #0
     736:	4b05      	ldr	r3, [pc, #20]	; (74c <_sercom_get_interrupt_vector+0x28>)
     738:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     73a:	466b      	mov	r3, sp
     73c:	5618      	ldrsb	r0, [r3, r0]
}
     73e:	b002      	add	sp, #8
     740:	bd10      	pop	{r4, pc}
     742:	46c0      	nop			; (mov r8, r8)
     744:	000028e4 	.word	0x000028e4
     748:	00001975 	.word	0x00001975
     74c:	000006a9 	.word	0x000006a9

00000750 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     750:	b508      	push	{r3, lr}
     752:	4b02      	ldr	r3, [pc, #8]	; (75c <SERCOM0_Handler+0xc>)
     754:	681b      	ldr	r3, [r3, #0]
     756:	2000      	movs	r0, #0
     758:	4798      	blx	r3
     75a:	bd08      	pop	{r3, pc}
     75c:	20000090 	.word	0x20000090

00000760 <SERCOM1_Handler>:
     760:	b508      	push	{r3, lr}
     762:	4b02      	ldr	r3, [pc, #8]	; (76c <SERCOM1_Handler+0xc>)
     764:	685b      	ldr	r3, [r3, #4]
     766:	2001      	movs	r0, #1
     768:	4798      	blx	r3
     76a:	bd08      	pop	{r3, pc}
     76c:	20000090 	.word	0x20000090

00000770 <SERCOM2_Handler>:
     770:	b508      	push	{r3, lr}
     772:	4b02      	ldr	r3, [pc, #8]	; (77c <SERCOM2_Handler+0xc>)
     774:	689b      	ldr	r3, [r3, #8]
     776:	2002      	movs	r0, #2
     778:	4798      	blx	r3
     77a:	bd08      	pop	{r3, pc}
     77c:	20000090 	.word	0x20000090

00000780 <SERCOM3_Handler>:
     780:	b508      	push	{r3, lr}
     782:	4b02      	ldr	r3, [pc, #8]	; (78c <SERCOM3_Handler+0xc>)
     784:	68db      	ldr	r3, [r3, #12]
     786:	2003      	movs	r0, #3
     788:	4798      	blx	r3
     78a:	bd08      	pop	{r3, pc}
     78c:	20000090 	.word	0x20000090

00000790 <SERCOM4_Handler>:
     790:	b508      	push	{r3, lr}
     792:	4b02      	ldr	r3, [pc, #8]	; (79c <SERCOM4_Handler+0xc>)
     794:	691b      	ldr	r3, [r3, #16]
     796:	2004      	movs	r0, #4
     798:	4798      	blx	r3
     79a:	bd08      	pop	{r3, pc}
     79c:	20000090 	.word	0x20000090

000007a0 <SERCOM5_Handler>:
     7a0:	b508      	push	{r3, lr}
     7a2:	4b02      	ldr	r3, [pc, #8]	; (7ac <SERCOM5_Handler+0xc>)
     7a4:	695b      	ldr	r3, [r3, #20]
     7a6:	2005      	movs	r0, #5
     7a8:	4798      	blx	r3
     7aa:	bd08      	pop	{r3, pc}
     7ac:	20000090 	.word	0x20000090

000007b0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7b2:	465f      	mov	r7, fp
     7b4:	4656      	mov	r6, sl
     7b6:	464d      	mov	r5, r9
     7b8:	4644      	mov	r4, r8
     7ba:	b4f0      	push	{r4, r5, r6, r7}
     7bc:	b08d      	sub	sp, #52	; 0x34
     7be:	1c05      	adds	r5, r0, #0
     7c0:	1c0c      	adds	r4, r1, #0
     7c2:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     7c4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7c6:	1c08      	adds	r0, r1, #0
     7c8:	4bcd      	ldr	r3, [pc, #820]	; (b00 <usart_init+0x350>)
     7ca:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     7cc:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     7ce:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     7d0:	07d2      	lsls	r2, r2, #31
     7d2:	d500      	bpl.n	7d6 <usart_init+0x26>
     7d4:	e1c4      	b.n	b60 <usart_init+0x3b0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     7d6:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     7d8:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     7da:	0792      	lsls	r2, r2, #30
     7dc:	d500      	bpl.n	7e0 <usart_init+0x30>
     7de:	e1bf      	b.n	b60 <usart_init+0x3b0>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     7e0:	49c8      	ldr	r1, [pc, #800]	; (b04 <usart_init+0x354>)
     7e2:	69ca      	ldr	r2, [r1, #28]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     7e4:	1c47      	adds	r7, r0, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     7e6:	3b1b      	subs	r3, #27
     7e8:	40bb      	lsls	r3, r7
     7ea:	4313      	orrs	r3, r2
     7ec:	61cb      	str	r3, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     7ee:	a90b      	add	r1, sp, #44	; 0x2c
     7f0:	2749      	movs	r7, #73	; 0x49
     7f2:	5df3      	ldrb	r3, [r6, r7]
     7f4:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     7f6:	3010      	adds	r0, #16

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     7f8:	b2c3      	uxtb	r3, r0
     7fa:	9303      	str	r3, [sp, #12]
     7fc:	1c18      	adds	r0, r3, #0
     7fe:	4bc2      	ldr	r3, [pc, #776]	; (b08 <usart_init+0x358>)
     800:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     802:	9803      	ldr	r0, [sp, #12]
     804:	4bc1      	ldr	r3, [pc, #772]	; (b0c <usart_init+0x35c>)
     806:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     808:	5df0      	ldrb	r0, [r6, r7]
     80a:	2100      	movs	r1, #0
     80c:	4bc0      	ldr	r3, [pc, #768]	; (b10 <usart_init+0x360>)
     80e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     810:	7af3      	ldrb	r3, [r6, #11]
     812:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     814:	2340      	movs	r3, #64	; 0x40
     816:	5cf3      	ldrb	r3, [r6, r3]
     818:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     81a:	2341      	movs	r3, #65	; 0x41
     81c:	5cf3      	ldrb	r3, [r6, r3]
     81e:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     820:	7ef3      	ldrb	r3, [r6, #27]
     822:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     824:	7f33      	ldrb	r3, [r6, #28]
     826:	726b      	strb	r3, [r5, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
     828:	2320      	movs	r3, #32
     82a:	5cf3      	ldrb	r3, [r6, r3]
     82c:	72ab      	strb	r3, [r5, #10]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     82e:	682b      	ldr	r3, [r5, #0]
     830:	4698      	mov	r8, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     832:	1c18      	adds	r0, r3, #0
     834:	4bb2      	ldr	r3, [pc, #712]	; (b00 <usart_init+0x350>)
     836:	4798      	blx	r3
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     838:	2200      	movs	r2, #0
     83a:	230e      	movs	r3, #14
     83c:	a902      	add	r1, sp, #8
     83e:	468c      	mov	ip, r1
     840:	4463      	add	r3, ip
     842:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     844:	8a33      	ldrh	r3, [r6, #16]
     846:	2280      	movs	r2, #128	; 0x80
     848:	01d2      	lsls	r2, r2, #7
     84a:	4293      	cmp	r3, r2
     84c:	d00e      	beq.n	86c <usart_init+0xbc>
     84e:	d804      	bhi.n	85a <usart_init+0xaa>
     850:	2280      	movs	r2, #128	; 0x80
     852:	0192      	lsls	r2, r2, #6
     854:	4293      	cmp	r3, r2
     856:	d013      	beq.n	880 <usart_init+0xd0>
     858:	e01c      	b.n	894 <usart_init+0xe4>
     85a:	22c0      	movs	r2, #192	; 0xc0
     85c:	01d2      	lsls	r2, r2, #7
     85e:	4293      	cmp	r3, r2
     860:	d013      	beq.n	88a <usart_init+0xda>
     862:	2280      	movs	r2, #128	; 0x80
     864:	0212      	lsls	r2, r2, #8
     866:	4293      	cmp	r3, r2
     868:	d005      	beq.n	876 <usart_init+0xc6>
     86a:	e013      	b.n	894 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     86c:	2208      	movs	r2, #8
     86e:	4693      	mov	fp, r2
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     870:	2200      	movs	r2, #0
     872:	4692      	mov	sl, r2
     874:	e012      	b.n	89c <usart_init+0xec>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     876:	2203      	movs	r2, #3
     878:	4693      	mov	fp, r2
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     87a:	2200      	movs	r2, #0
     87c:	4692      	mov	sl, r2
     87e:	e00d      	b.n	89c <usart_init+0xec>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     880:	2210      	movs	r2, #16
     882:	4693      	mov	fp, r2
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     884:	3a0f      	subs	r2, #15
     886:	4692      	mov	sl, r2
     888:	e008      	b.n	89c <usart_init+0xec>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     88a:	2208      	movs	r2, #8
     88c:	4693      	mov	fp, r2
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     88e:	3a07      	subs	r2, #7
     890:	4692      	mov	sl, r2
     892:	e003      	b.n	89c <usart_init+0xec>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     894:	2210      	movs	r2, #16
     896:	4693      	mov	fp, r2
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     898:	2200      	movs	r2, #0
     89a:	4692      	mov	sl, r2
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     89c:	68f7      	ldr	r7, [r6, #12]
     89e:	6832      	ldr	r2, [r6, #0]
     8a0:	4317      	orrs	r7, r2
		(uint32_t)config->mux_setting |
     8a2:	6972      	ldr	r2, [r6, #20]
     8a4:	4317      	orrs	r7, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     8a6:	433b      	orrs	r3, r7
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     8a8:	7e37      	ldrb	r7, [r6, #24]
     8aa:	023f      	lsls	r7, r7, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
     8ac:	433b      	orrs	r3, r7
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8ae:	2242      	movs	r2, #66	; 0x42
     8b0:	5cb7      	ldrb	r7, [r6, r2]
     8b2:	077f      	lsls	r7, r7, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     8b4:	431f      	orrs	r7, r3
     8b6:	9703      	str	r7, [sp, #12]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     8b8:	6873      	ldr	r3, [r6, #4]
     8ba:	4699      	mov	r9, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
     8bc:	2320      	movs	r3, #32
     8be:	5cf3      	ldrb	r3, [r6, r3]
     8c0:	2b00      	cmp	r3, #0
     8c2:	d100      	bne.n	8c6 <usart_init+0x116>
     8c4:	e111      	b.n	aea <usart_init+0x33a>
		transfer_mode = config->iso7816_config.protocol_t;
     8c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
     8c8:	4699      	mov	r9, r3
	}
#endif
	/* Get baud value from mode and clock */
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
     8ca:	230e      	movs	r3, #14
     8cc:	aa02      	add	r2, sp, #8
     8ce:	4694      	mov	ip, r2
     8d0:	4463      	add	r3, ip
     8d2:	8fb2      	ldrh	r2, [r6, #60]	; 0x3c
     8d4:	801a      	strh	r2, [r3, #0]
     8d6:	e036      	b.n	946 <usart_init+0x196>
	} else {
#endif
	switch (transfer_mode)
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     8d8:	2343      	movs	r3, #67	; 0x43
     8da:	5cf3      	ldrb	r3, [r6, r3]
     8dc:	2b00      	cmp	r3, #0
     8de:	d132      	bne.n	946 <usart_init+0x196>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     8e0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     8e2:	469a      	mov	sl, r3
     8e4:	b2c0      	uxtb	r0, r0
     8e6:	4b8b      	ldr	r3, [pc, #556]	; (b14 <usart_init+0x364>)
     8e8:	4798      	blx	r3
     8ea:	1c01      	adds	r1, r0, #0
     8ec:	4650      	mov	r0, sl
     8ee:	220e      	movs	r2, #14
     8f0:	ab02      	add	r3, sp, #8
     8f2:	469c      	mov	ip, r3
     8f4:	4462      	add	r2, ip
     8f6:	4b88      	ldr	r3, [pc, #544]	; (b18 <usart_init+0x368>)
     8f8:	4798      	blx	r3
     8fa:	e021      	b.n	940 <usart_init+0x190>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     8fc:	2343      	movs	r3, #67	; 0x43
     8fe:	5cf3      	ldrb	r3, [r6, r3]
     900:	2b00      	cmp	r3, #0
     902:	d00b      	beq.n	91c <usart_init+0x16c>
				status_code =
     904:	465b      	mov	r3, fp
     906:	9300      	str	r3, [sp, #0]
     908:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
     90a:	6c71      	ldr	r1, [r6, #68]	; 0x44
     90c:	220e      	movs	r2, #14
     90e:	ab02      	add	r3, sp, #8
     910:	469c      	mov	ip, r3
     912:	4462      	add	r2, ip
     914:	4653      	mov	r3, sl
     916:	4f81      	ldr	r7, [pc, #516]	; (b1c <usart_init+0x36c>)
     918:	47b8      	blx	r7
     91a:	e011      	b.n	940 <usart_init+0x190>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     91c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     91e:	1c1f      	adds	r7, r3, #0
     920:	b2c0      	uxtb	r0, r0
     922:	4b7c      	ldr	r3, [pc, #496]	; (b14 <usart_init+0x364>)
     924:	4798      	blx	r3
     926:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     928:	465b      	mov	r3, fp
     92a:	9300      	str	r3, [sp, #0]
     92c:	1c38      	adds	r0, r7, #0
     92e:	220e      	movs	r2, #14
     930:	ab02      	add	r3, sp, #8
     932:	469c      	mov	ip, r3
     934:	4462      	add	r2, ip
     936:	4653      	mov	r3, sl
     938:	4f78      	ldr	r7, [pc, #480]	; (b1c <usart_init+0x36c>)
     93a:	47b8      	blx	r7
     93c:	e000      	b.n	940 <usart_init+0x190>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     93e:	2000      	movs	r0, #0
     940:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     942:	d000      	beq.n	946 <usart_init+0x196>
     944:	e10c      	b.n	b60 <usart_init+0x3b0>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     946:	7e73      	ldrb	r3, [r6, #25]
     948:	2b00      	cmp	r3, #0
     94a:	d002      	beq.n	952 <usart_init+0x1a2>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     94c:	7eb3      	ldrb	r3, [r6, #26]
     94e:	4642      	mov	r2, r8
     950:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     952:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     954:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     956:	2b00      	cmp	r3, #0
     958:	d1fc      	bne.n	954 <usart_init+0x1a4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     95a:	330e      	adds	r3, #14
     95c:	aa02      	add	r2, sp, #8
     95e:	4694      	mov	ip, r2
     960:	4463      	add	r3, ip
     962:	881b      	ldrh	r3, [r3, #0]
     964:	4642      	mov	r2, r8
     966:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     968:	464b      	mov	r3, r9
     96a:	9f03      	ldr	r7, [sp, #12]
     96c:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     96e:	2343      	movs	r3, #67	; 0x43
     970:	5cf3      	ldrb	r3, [r6, r3]
     972:	2b00      	cmp	r3, #0
     974:	d101      	bne.n	97a <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     976:	3304      	adds	r3, #4
     978:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     97a:	7f31      	ldrb	r1, [r6, #28]
     97c:	0249      	lsls	r1, r1, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     97e:	7e73      	ldrb	r3, [r6, #25]
     980:	029b      	lsls	r3, r3, #10
     982:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     984:	2339      	movs	r3, #57	; 0x39
     986:	5cf2      	ldrb	r2, [r6, r3]
     988:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     98a:	4311      	orrs	r1, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     98c:	3307      	adds	r3, #7
     98e:	5cf2      	ldrb	r2, [r6, r3]
     990:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     992:	1c0b      	adds	r3, r1, #0
     994:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     996:	2241      	movs	r2, #65	; 0x41
     998:	5cb1      	ldrb	r1, [r6, r2]
     99a:	0409      	lsls	r1, r1, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     99c:	4319      	orrs	r1, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
     99e:	2320      	movs	r3, #32
     9a0:	5cf3      	ldrb	r3, [r6, r3]
     9a2:	2b00      	cmp	r3, #0
     9a4:	d020      	beq.n	9e8 <usart_init+0x238>
		ctrla |= SERCOM_USART_CTRLA_FORM(0x07);
		if (config->iso7816_config.enable_inverse) {
     9a6:	2328      	movs	r3, #40	; 0x28
     9a8:	5cf3      	ldrb	r3, [r6, r3]
     9aa:	2b00      	cmp	r3, #0
     9ac:	d103      	bne.n	9b6 <usart_init+0x206>
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		ctrla |= SERCOM_USART_CTRLA_FORM(0x07);
     9ae:	23e0      	movs	r3, #224	; 0xe0
     9b0:	04db      	lsls	r3, r3, #19
     9b2:	431f      	orrs	r7, r3
     9b4:	e001      	b.n	9ba <usart_init+0x20a>
		if (config->iso7816_config.enable_inverse) {
			ctrla |= SERCOM_USART_CTRLA_TXINV | SERCOM_USART_CTRLA_RXINV;
     9b6:	4b5a      	ldr	r3, [pc, #360]	; (b20 <usart_init+0x370>)
     9b8:	431f      	orrs	r7, r3
		}
		ctrlb |=  USART_CHARACTER_SIZE_8BIT;
		
		switch(config->iso7816_config.protocol_t) {
     9ba:	2380      	movs	r3, #128	; 0x80
     9bc:	055b      	lsls	r3, r3, #21
     9be:	6a72      	ldr	r2, [r6, #36]	; 0x24

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
     9c0:	2000      	movs	r0, #0
		if (config->iso7816_config.enable_inverse) {
			ctrla |= SERCOM_USART_CTRLA_TXINV | SERCOM_USART_CTRLA_RXINV;
		}
		ctrlb |=  USART_CHARACTER_SIZE_8BIT;
		
		switch(config->iso7816_config.protocol_t) {
     9c2:	429a      	cmp	r2, r3
     9c4:	d123      	bne.n	a0e <usart_init+0x25e>
			case ISO7816_PROTOCOL_T_0:
				ctrlb |= (uint32_t)config->stopbits;	
     9c6:	7ab3      	ldrb	r3, [r6, #10]
     9c8:	4319      	orrs	r1, r3
     9ca:	6b30      	ldr	r0, [r6, #48]	; 0x30
     9cc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     9ce:	4318      	orrs	r0, r3
				ctrlc |= SERCOM_USART_CTRLC_GTIME(config->iso7816_config.guard_time) | \
     9d0:	2329      	movs	r3, #41	; 0x29
     9d2:	5cf2      	ldrb	r2, [r6, r3]
     9d4:	3b22      	subs	r3, #34	; 0x22
     9d6:	4013      	ands	r3, r2
						(config->iso7816_config.inhibit_nack) | \
     9d8:	4303      	orrs	r3, r0
						(config->iso7816_config.successive_recv_nack) | \
						SERCOM_USART_CTRLC_MAXITER(config->iso7816_config.max_iterations);
     9da:	6b72      	ldr	r2, [r6, #52]	; 0x34
     9dc:	0510      	lsls	r0, r2, #20
     9de:	22e0      	movs	r2, #224	; 0xe0
     9e0:	03d2      	lsls	r2, r2, #15
     9e2:	4010      	ands	r0, r2
		switch(config->iso7816_config.protocol_t) {
			case ISO7816_PROTOCOL_T_0:
				ctrlb |= (uint32_t)config->stopbits;	
				ctrlc |= SERCOM_USART_CTRLC_GTIME(config->iso7816_config.guard_time) | \
						(config->iso7816_config.inhibit_nack) | \
						(config->iso7816_config.successive_recv_nack) | \
     9e4:	4318      	orrs	r0, r3
     9e6:	e012      	b.n	a0e <usart_init+0x25e>
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     9e8:	7af3      	ldrb	r3, [r6, #11]
     9ea:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     9ec:	8933      	ldrh	r3, [r6, #8]
     9ee:	2bff      	cmp	r3, #255	; 0xff
     9f0:	d005      	beq.n	9fe <usart_init+0x24e>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     9f2:	2280      	movs	r2, #128	; 0x80
     9f4:	0452      	lsls	r2, r2, #17
     9f6:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     9f8:	4319      	orrs	r1, r3

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
     9fa:	2000      	movs	r0, #0
     9fc:	e007      	b.n	a0e <usart_init+0x25e>
	if (config->parity != USART_PARITY_NONE) {
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
		ctrlb |= config->parity;
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     9fe:	7ef3      	ldrb	r3, [r6, #27]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
     a00:	2000      	movs	r0, #0
	if (config->parity != USART_PARITY_NONE) {
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
		ctrlb |= config->parity;
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     a02:	2b00      	cmp	r3, #0
     a04:	d003      	beq.n	a0e <usart_init+0x25e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     a06:	2380      	movs	r3, #128	; 0x80
     a08:	04db      	lsls	r3, r3, #19
     a0a:	431f      	orrs	r7, r3
     a0c:	e7ff      	b.n	a0e <usart_init+0x25e>
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     a0e:	2348      	movs	r3, #72	; 0x48
     a10:	5cf3      	ldrb	r3, [r6, r3]
     a12:	2b00      	cmp	r3, #0
     a14:	d103      	bne.n	a1e <usart_init+0x26e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     a16:	4b43      	ldr	r3, [pc, #268]	; (b24 <usart_init+0x374>)
     a18:	789b      	ldrb	r3, [r3, #2]
     a1a:	079b      	lsls	r3, r3, #30
     a1c:	d501      	bpl.n	a22 <usart_init+0x272>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     a1e:	2380      	movs	r3, #128	; 0x80
     a20:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     a22:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a24:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     a26:	2b00      	cmp	r3, #0
     a28:	d1fc      	bne.n	a24 <usart_init+0x274>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     a2a:	4643      	mov	r3, r8
     a2c:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     a2e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a30:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     a32:	2b00      	cmp	r3, #0
     a34:	d1fc      	bne.n	a30 <usart_init+0x280>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     a36:	4643      	mov	r3, r8
     a38:	601f      	str	r7, [r3, #0]

#ifdef FEATURE_USART_RS485
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
     a3a:	681a      	ldr	r2, [r3, #0]
     a3c:	23f0      	movs	r3, #240	; 0xf0
     a3e:	051b      	lsls	r3, r3, #20
     a40:	4013      	ands	r3, r2
     a42:	22e0      	movs	r2, #224	; 0xe0
     a44:	04d2      	lsls	r2, r2, #19
     a46:	4293      	cmp	r3, r2
     a48:	d00d      	beq.n	a66 <usart_init+0x2b6>
		SERCOM_USART_CTRLA_FORM(0x07)) {
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
     a4a:	4643      	mov	r3, r8
     a4c:	689b      	ldr	r3, [r3, #8]
     a4e:	2207      	movs	r2, #7
     a50:	4393      	bics	r3, r2
     a52:	4642      	mov	r2, r8
     a54:	6093      	str	r3, [r2, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
     a56:	6892      	ldr	r2, [r2, #8]
     a58:	2338      	movs	r3, #56	; 0x38
     a5a:	5cf3      	ldrb	r3, [r6, r3]
     a5c:	2107      	movs	r1, #7
     a5e:	400b      	ands	r3, r1
     a60:	4313      	orrs	r3, r2
     a62:	4642      	mov	r2, r8
     a64:	6093      	str	r3, [r2, #8]
	}
#endif

#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
     a66:	2320      	movs	r3, #32
     a68:	5cf3      	ldrb	r3, [r6, r3]
     a6a:	2b00      	cmp	r3, #0
     a6c:	d066      	beq.n	b3c <usart_init+0x38c>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     a6e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a70:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     a72:	2b00      	cmp	r3, #0
     a74:	d1fc      	bne.n	a70 <usart_init+0x2c0>
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
     a76:	4643      	mov	r3, r8
     a78:	6098      	str	r0, [r3, #8]
     a7a:	e05f      	b.n	b3c <usart_init+0x38c>
     a7c:	b2f1      	uxtb	r1, r6
     a7e:	00b3      	lsls	r3, r6, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a80:	aa06      	add	r2, sp, #24
     a82:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     a84:	2800      	cmp	r0, #0
     a86:	d102      	bne.n	a8e <usart_init+0x2de>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a88:	1c20      	adds	r0, r4, #0
     a8a:	4b27      	ldr	r3, [pc, #156]	; (b28 <usart_init+0x378>)
     a8c:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     a8e:	1c43      	adds	r3, r0, #1
     a90:	d008      	beq.n	aa4 <usart_init+0x2f4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a92:	ab02      	add	r3, sp, #8
     a94:	2220      	movs	r2, #32
     a96:	189b      	adds	r3, r3, r2
     a98:	7018      	strb	r0, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     a9a:	0c00      	lsrs	r0, r0, #16
     a9c:	b2c0      	uxtb	r0, r0
     a9e:	a90a      	add	r1, sp, #40	; 0x28
     aa0:	4b22      	ldr	r3, [pc, #136]	; (b2c <usart_init+0x37c>)
     aa2:	4798      	blx	r3
     aa4:	3601      	adds	r6, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     aa6:	2e04      	cmp	r6, #4
     aa8:	d1e8      	bne.n	a7c <usart_init+0x2cc>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     aaa:	2300      	movs	r3, #0
     aac:	60eb      	str	r3, [r5, #12]
     aae:	612b      	str	r3, [r5, #16]
     ab0:	616b      	str	r3, [r5, #20]
     ab2:	61ab      	str	r3, [r5, #24]
     ab4:	61eb      	str	r3, [r5, #28]
     ab6:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     ab8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     aba:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     abc:	2200      	movs	r2, #0
     abe:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     ac0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     ac2:	3330      	adds	r3, #48	; 0x30
     ac4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     ac6:	3301      	adds	r3, #1
     ac8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     aca:	3301      	adds	r3, #1
     acc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     ace:	3301      	adds	r3, #1
     ad0:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     ad2:	6828      	ldr	r0, [r5, #0]
     ad4:	4b0a      	ldr	r3, [pc, #40]	; (b00 <usart_init+0x350>)
     ad6:	4798      	blx	r3
     ad8:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     ada:	4915      	ldr	r1, [pc, #84]	; (b30 <usart_init+0x380>)
     adc:	4b15      	ldr	r3, [pc, #84]	; (b34 <usart_init+0x384>)
     ade:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     ae0:	00a4      	lsls	r4, r4, #2
     ae2:	4b15      	ldr	r3, [pc, #84]	; (b38 <usart_init+0x388>)
     ae4:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     ae6:	2300      	movs	r3, #0
     ae8:	e03a      	b.n	b60 <usart_init+0x3b0>
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     aea:	3010      	adds	r0, #16
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     aec:	464b      	mov	r3, r9
     aee:	2b00      	cmp	r3, #0
     af0:	d100      	bne.n	af4 <usart_init+0x344>
     af2:	e703      	b.n	8fc <usart_init+0x14c>
     af4:	2380      	movs	r3, #128	; 0x80
     af6:	055b      	lsls	r3, r3, #21
     af8:	4599      	cmp	r9, r3
     afa:	d100      	bne.n	afe <usart_init+0x34e>
     afc:	e6ec      	b.n	8d8 <usart_init+0x128>
     afe:	e71e      	b.n	93e <usart_init+0x18e>
     b00:	000006a9 	.word	0x000006a9
     b04:	40000800 	.word	0x40000800
     b08:	0000108d 	.word	0x0000108d
     b0c:	00001025 	.word	0x00001025
     b10:	000004d1 	.word	0x000004d1
     b14:	000010b1 	.word	0x000010b1
     b18:	000002e1 	.word	0x000002e1
     b1c:	00000309 	.word	0x00000309
     b20:	07000600 	.word	0x07000600
     b24:	41002000 	.word	0x41002000
     b28:	0000051d 	.word	0x0000051d
     b2c:	00001189 	.word	0x00001189
     b30:	00000b9d 	.word	0x00000b9d
     b34:	000006e9 	.word	0x000006e9
     b38:	20000114 	.word	0x20000114
     b3c:	ab0a      	add	r3, sp, #40	; 0x28
     b3e:	2280      	movs	r2, #128	; 0x80
     b40:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b42:	2200      	movs	r2, #0
     b44:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     b46:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     b48:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     b4a:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
     b4c:	9306      	str	r3, [sp, #24]
     b4e:	6d33      	ldr	r3, [r6, #80]	; 0x50
     b50:	9307      	str	r3, [sp, #28]
     b52:	6d73      	ldr	r3, [r6, #84]	; 0x54
     b54:	9308      	str	r3, [sp, #32]
     b56:	6db3      	ldr	r3, [r6, #88]	; 0x58
     b58:	9303      	str	r3, [sp, #12]
     b5a:	9309      	str	r3, [sp, #36]	; 0x24
     b5c:	2600      	movs	r6, #0
     b5e:	e78d      	b.n	a7c <usart_init+0x2cc>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     b60:	1c18      	adds	r0, r3, #0
     b62:	b00d      	add	sp, #52	; 0x34
     b64:	bc3c      	pop	{r2, r3, r4, r5}
     b66:	4690      	mov	r8, r2
     b68:	4699      	mov	r9, r3
     b6a:	46a2      	mov	sl, r4
     b6c:	46ab      	mov	fp, r5
     b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000b70 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     b70:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b72:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     b74:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     b76:	221c      	movs	r2, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     b78:	2c00      	cmp	r4, #0
     b7a:	d00d      	beq.n	b98 <usart_write_wait+0x28>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     b7c:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
     b7e:	b280      	uxth	r0, r0
		return STATUS_BUSY;
     b80:	3a17      	subs	r2, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     b82:	2800      	cmp	r0, #0
     b84:	d108      	bne.n	b98 <usart_write_wait+0x28>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b86:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     b88:	2a00      	cmp	r2, #0
     b8a:	d1fc      	bne.n	b86 <usart_write_wait+0x16>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     b8c:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     b8e:	2102      	movs	r1, #2
     b90:	7e1a      	ldrb	r2, [r3, #24]
     b92:	420a      	tst	r2, r1
     b94:	d0fc      	beq.n	b90 <usart_write_wait+0x20>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     b96:	2200      	movs	r2, #0
}
     b98:	1c10      	adds	r0, r2, #0
     b9a:	bd10      	pop	{r4, pc}

00000b9c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     b9e:	0080      	lsls	r0, r0, #2
     ba0:	4b63      	ldr	r3, [pc, #396]	; (d30 <_usart_interrupt_handler+0x194>)
     ba2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     ba4:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ba6:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ba8:	2b00      	cmp	r3, #0
     baa:	d1fc      	bne.n	ba6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     bac:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     bae:	7da6      	ldrb	r6, [r4, #22]
     bb0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     bb2:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     bb4:	5ceb      	ldrb	r3, [r5, r3]
     bb6:	2230      	movs	r2, #48	; 0x30
     bb8:	5caf      	ldrb	r7, [r5, r2]
     bba:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     bbc:	07f3      	lsls	r3, r6, #31
     bbe:	d522      	bpl.n	c06 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     bc0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     bc2:	b29b      	uxth	r3, r3
     bc4:	2b00      	cmp	r3, #0
     bc6:	d01c      	beq.n	c02 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     bc8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     bca:	7813      	ldrb	r3, [r2, #0]
     bcc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     bce:	1c51      	adds	r1, r2, #1
     bd0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     bd2:	7969      	ldrb	r1, [r5, #5]
     bd4:	2901      	cmp	r1, #1
     bd6:	d001      	beq.n	bdc <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     bd8:	b29b      	uxth	r3, r3
     bda:	e004      	b.n	be6 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     bdc:	7851      	ldrb	r1, [r2, #1]
     bde:	0209      	lsls	r1, r1, #8
     be0:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     be2:	3202      	adds	r2, #2
     be4:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     be6:	05db      	lsls	r3, r3, #23
     be8:	0ddb      	lsrs	r3, r3, #23
     bea:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     bec:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     bee:	3b01      	subs	r3, #1
     bf0:	b29b      	uxth	r3, r3
     bf2:	85eb      	strh	r3, [r5, #46]	; 0x2e
     bf4:	2b00      	cmp	r3, #0
     bf6:	d106      	bne.n	c06 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     bf8:	3301      	adds	r3, #1
     bfa:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     bfc:	3301      	adds	r3, #1
     bfe:	75a3      	strb	r3, [r4, #22]
     c00:	e001      	b.n	c06 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c02:	2301      	movs	r3, #1
     c04:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     c06:	07b3      	lsls	r3, r6, #30
     c08:	d509      	bpl.n	c1e <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     c0a:	2302      	movs	r3, #2
     c0c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     c0e:	2200      	movs	r2, #0
     c10:	3331      	adds	r3, #49	; 0x31
     c12:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     c14:	07fb      	lsls	r3, r7, #31
     c16:	d502      	bpl.n	c1e <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     c18:	1c28      	adds	r0, r5, #0
     c1a:	68eb      	ldr	r3, [r5, #12]
     c1c:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     c1e:	0773      	lsls	r3, r6, #29
     c20:	d566      	bpl.n	cf0 <_usart_interrupt_handler+0x154>

		if (module->remaining_rx_buffer_length) {
     c22:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     c24:	b29b      	uxth	r3, r3
     c26:	2b00      	cmp	r3, #0
     c28:	d060      	beq.n	cec <_usart_interrupt_handler+0x150>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     c2a:	8b63      	ldrh	r3, [r4, #26]
     c2c:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     c2e:	071a      	lsls	r2, r3, #28
     c30:	d501      	bpl.n	c36 <_usart_interrupt_handler+0x9a>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     c32:	2208      	movs	r2, #8
     c34:	4393      	bics	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     c36:	2b00      	cmp	r3, #0
     c38:	d036      	beq.n	ca8 <_usart_interrupt_handler+0x10c>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     c3a:	079a      	lsls	r2, r3, #30
     c3c:	d507      	bpl.n	c4e <_usart_interrupt_handler+0xb2>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     c3e:	221a      	movs	r2, #26
     c40:	2332      	movs	r3, #50	; 0x32
     c42:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     c44:	8b62      	ldrh	r2, [r4, #26]
     c46:	3b30      	subs	r3, #48	; 0x30
     c48:	4313      	orrs	r3, r2
     c4a:	8363      	strh	r3, [r4, #26]
     c4c:	e026      	b.n	c9c <_usart_interrupt_handler+0x100>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     c4e:	075a      	lsls	r2, r3, #29
     c50:	d507      	bpl.n	c62 <_usart_interrupt_handler+0xc6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     c52:	221e      	movs	r2, #30
     c54:	2332      	movs	r3, #50	; 0x32
     c56:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     c58:	8b62      	ldrh	r2, [r4, #26]
     c5a:	3b2e      	subs	r3, #46	; 0x2e
     c5c:	4313      	orrs	r3, r2
     c5e:	8363      	strh	r3, [r4, #26]
     c60:	e01c      	b.n	c9c <_usart_interrupt_handler+0x100>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     c62:	07da      	lsls	r2, r3, #31
     c64:	d507      	bpl.n	c76 <_usart_interrupt_handler+0xda>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     c66:	2213      	movs	r2, #19
     c68:	2332      	movs	r3, #50	; 0x32
     c6a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     c6c:	8b62      	ldrh	r2, [r4, #26]
     c6e:	3b31      	subs	r3, #49	; 0x31
     c70:	4313      	orrs	r3, r2
     c72:	8363      	strh	r3, [r4, #26]
     c74:	e012      	b.n	c9c <_usart_interrupt_handler+0x100>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     c76:	06da      	lsls	r2, r3, #27
     c78:	d507      	bpl.n	c8a <_usart_interrupt_handler+0xee>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     c7a:	2242      	movs	r2, #66	; 0x42
     c7c:	2332      	movs	r3, #50	; 0x32
     c7e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     c80:	8b62      	ldrh	r2, [r4, #26]
     c82:	3b22      	subs	r3, #34	; 0x22
     c84:	4313      	orrs	r3, r2
     c86:	8363      	strh	r3, [r4, #26]
     c88:	e008      	b.n	c9c <_usart_interrupt_handler+0x100>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     c8a:	069b      	lsls	r3, r3, #26
     c8c:	d506      	bpl.n	c9c <_usart_interrupt_handler+0x100>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     c8e:	2241      	movs	r2, #65	; 0x41
     c90:	2332      	movs	r3, #50	; 0x32
     c92:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     c94:	8b62      	ldrh	r2, [r4, #26]
     c96:	3b12      	subs	r3, #18
     c98:	4313      	orrs	r3, r2
     c9a:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     c9c:	077b      	lsls	r3, r7, #29
     c9e:	d527      	bpl.n	cf0 <_usart_interrupt_handler+0x154>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     ca0:	1c28      	adds	r0, r5, #0
     ca2:	696b      	ldr	r3, [r5, #20]
     ca4:	4798      	blx	r3
     ca6:	e023      	b.n	cf0 <_usart_interrupt_handler+0x154>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     ca8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     caa:	05db      	lsls	r3, r3, #23
     cac:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     cae:	b2da      	uxtb	r2, r3
     cb0:	6a69      	ldr	r1, [r5, #36]	; 0x24
     cb2:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     cb4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     cb6:	1c51      	adds	r1, r2, #1
     cb8:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     cba:	7969      	ldrb	r1, [r5, #5]
     cbc:	2901      	cmp	r1, #1
     cbe:	d104      	bne.n	cca <_usart_interrupt_handler+0x12e>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     cc0:	0a1b      	lsrs	r3, r3, #8
     cc2:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     cc4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     cc6:	3301      	adds	r3, #1
     cc8:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     cca:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     ccc:	3b01      	subs	r3, #1
     cce:	b29b      	uxth	r3, r3
     cd0:	85ab      	strh	r3, [r5, #44]	; 0x2c
     cd2:	2b00      	cmp	r3, #0
     cd4:	d10c      	bne.n	cf0 <_usart_interrupt_handler+0x154>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     cd6:	3304      	adds	r3, #4
     cd8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     cda:	2200      	movs	r2, #0
     cdc:	332e      	adds	r3, #46	; 0x2e
     cde:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     ce0:	07bb      	lsls	r3, r7, #30
     ce2:	d505      	bpl.n	cf0 <_usart_interrupt_handler+0x154>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     ce4:	1c28      	adds	r0, r5, #0
     ce6:	692b      	ldr	r3, [r5, #16]
     ce8:	4798      	blx	r3
     cea:	e001      	b.n	cf0 <_usart_interrupt_handler+0x154>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     cec:	2304      	movs	r3, #4
     cee:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     cf0:	06f3      	lsls	r3, r6, #27
     cf2:	d507      	bpl.n	d04 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     cf4:	2310      	movs	r3, #16
     cf6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     cf8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     cfa:	06fb      	lsls	r3, r7, #27
     cfc:	d502      	bpl.n	d04 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     cfe:	1c28      	adds	r0, r5, #0
     d00:	69eb      	ldr	r3, [r5, #28]
     d02:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     d04:	06b3      	lsls	r3, r6, #26
     d06:	d507      	bpl.n	d18 <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     d08:	2320      	movs	r3, #32
     d0a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     d0c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     d0e:	073b      	lsls	r3, r7, #28
     d10:	d502      	bpl.n	d18 <_usart_interrupt_handler+0x17c>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     d12:	1c28      	adds	r0, r5, #0
     d14:	69ab      	ldr	r3, [r5, #24]
     d16:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     d18:	0733      	lsls	r3, r6, #28
     d1a:	d507      	bpl.n	d2c <_usart_interrupt_handler+0x190>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     d1c:	2308      	movs	r3, #8
     d1e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     d20:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     d22:	06bb      	lsls	r3, r7, #26
     d24:	d502      	bpl.n	d2c <_usart_interrupt_handler+0x190>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     d26:	6a2b      	ldr	r3, [r5, #32]
     d28:	1c28      	adds	r0, r5, #0
     d2a:	4798      	blx	r3
		}
	}
#endif
}
     d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d2e:	46c0      	nop			; (mov r8, r8)
     d30:	20000114 	.word	0x20000114

00000d34 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     d34:	b508      	push	{r3, lr}
	switch (clock_source) {
     d36:	2807      	cmp	r0, #7
     d38:	d803      	bhi.n	d42 <system_clock_source_get_hz+0xe>
     d3a:	0080      	lsls	r0, r0, #2
     d3c:	4b1c      	ldr	r3, [pc, #112]	; (db0 <system_clock_source_get_hz+0x7c>)
     d3e:	581b      	ldr	r3, [r3, r0]
     d40:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
     d42:	2000      	movs	r0, #0
     d44:	e032      	b.n	dac <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     d46:	4b1b      	ldr	r3, [pc, #108]	; (db4 <system_clock_source_get_hz+0x80>)
     d48:	6918      	ldr	r0, [r3, #16]
     d4a:	e02f      	b.n	dac <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
     d4c:	4b1a      	ldr	r3, [pc, #104]	; (db8 <system_clock_source_get_hz+0x84>)
     d4e:	7d18      	ldrb	r0, [r3, #20]
     d50:	0700      	lsls	r0, r0, #28
     d52:	0f80      	lsrs	r0, r0, #30
     d54:	3001      	adds	r0, #1
     d56:	4b19      	ldr	r3, [pc, #100]	; (dbc <system_clock_source_get_hz+0x88>)
     d58:	4358      	muls	r0, r3
     d5a:	e027      	b.n	dac <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     d5c:	4b15      	ldr	r3, [pc, #84]	; (db4 <system_clock_source_get_hz+0x80>)
     d5e:	6958      	ldr	r0, [r3, #20]
     d60:	e024      	b.n	dac <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     d62:	4b14      	ldr	r3, [pc, #80]	; (db4 <system_clock_source_get_hz+0x80>)
     d64:	681b      	ldr	r3, [r3, #0]
     d66:	2002      	movs	r0, #2
     d68:	4018      	ands	r0, r3
     d6a:	d01f      	beq.n	dac <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     d6c:	4912      	ldr	r1, [pc, #72]	; (db8 <system_clock_source_get_hz+0x84>)
     d6e:	2280      	movs	r2, #128	; 0x80
     d70:	0052      	lsls	r2, r2, #1
     d72:	68cb      	ldr	r3, [r1, #12]
     d74:	4213      	tst	r3, r2
     d76:	d0fc      	beq.n	d72 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
     d78:	4b0e      	ldr	r3, [pc, #56]	; (db4 <system_clock_source_get_hz+0x80>)
     d7a:	681b      	ldr	r3, [r3, #0]
     d7c:	075b      	lsls	r3, r3, #29
     d7e:	d514      	bpl.n	daa <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     d80:	2000      	movs	r0, #0
     d82:	4b0f      	ldr	r3, [pc, #60]	; (dc0 <system_clock_source_get_hz+0x8c>)
     d84:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     d86:	4b0b      	ldr	r3, [pc, #44]	; (db4 <system_clock_source_get_hz+0x80>)
     d88:	689b      	ldr	r3, [r3, #8]
     d8a:	041b      	lsls	r3, r3, #16
     d8c:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     d8e:	4358      	muls	r0, r3
     d90:	e00c      	b.n	dac <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     d92:	2328      	movs	r3, #40	; 0x28
     d94:	4a08      	ldr	r2, [pc, #32]	; (db8 <system_clock_source_get_hz+0x84>)
     d96:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     d98:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     d9a:	079b      	lsls	r3, r3, #30
     d9c:	d506      	bpl.n	dac <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
     d9e:	4b05      	ldr	r3, [pc, #20]	; (db4 <system_clock_source_get_hz+0x80>)
     da0:	68d8      	ldr	r0, [r3, #12]
     da2:	e003      	b.n	dac <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
     da4:	2080      	movs	r0, #128	; 0x80
     da6:	0200      	lsls	r0, r0, #8
     da8:	e000      	b.n	dac <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     daa:	4806      	ldr	r0, [pc, #24]	; (dc4 <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
     dac:	bd08      	pop	{r3, pc}
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	000028ec 	.word	0x000028ec
     db4:	200000a8 	.word	0x200000a8
     db8:	40001000 	.word	0x40001000
     dbc:	003d0900 	.word	0x003d0900
     dc0:	000010b1 	.word	0x000010b1
     dc4:	02dc6c00 	.word	0x02dc6c00

00000dc8 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     dc8:	b510      	push	{r4, lr}
     dca:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
     dcc:	2280      	movs	r2, #128	; 0x80
     dce:	0052      	lsls	r2, r2, #1
     dd0:	4b2d      	ldr	r3, [pc, #180]	; (e88 <system_clock_init+0xc0>)
     dd2:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
     dd4:	3afd      	subs	r2, #253	; 0xfd
     dd6:	4b2d      	ldr	r3, [pc, #180]	; (e8c <system_clock_init+0xc4>)
     dd8:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     dda:	4a2d      	ldr	r2, [pc, #180]	; (e90 <system_clock_init+0xc8>)
     ddc:	6853      	ldr	r3, [r2, #4]
     dde:	211e      	movs	r1, #30
     de0:	438b      	bics	r3, r1
     de2:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     de4:	4b2b      	ldr	r3, [pc, #172]	; (e94 <system_clock_init+0xcc>)
     de6:	789b      	ldrb	r3, [r3, #2]
     de8:	2b02      	cmp	r3, #2
     dea:	d00d      	beq.n	e08 <system_clock_init+0x40>
		return STATUS_OK;
	}

#if SAML22
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     dec:	4b29      	ldr	r3, [pc, #164]	; (e94 <system_clock_init+0xcc>)
     dee:	789b      	ldrb	r3, [r3, #2]
     df0:	b25b      	sxtb	r3, r3
     df2:	2b00      	cmp	r3, #0
     df4:	db08      	blt.n	e08 <system_clock_init+0x40>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     df6:	4b27      	ldr	r3, [pc, #156]	; (e94 <system_clock_init+0xcc>)
     df8:	2201      	movs	r2, #1
     dfa:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
     dfc:	3201      	adds	r2, #1
     dfe:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
     e00:	1c1a      	adds	r2, r3, #0
     e02:	7993      	ldrb	r3, [r2, #6]
     e04:	2b00      	cmp	r3, #0
     e06:	d0fc      	beq.n	e02 <system_clock_init+0x3a>
	}
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
     e08:	4b1f      	ldr	r3, [pc, #124]	; (e88 <system_clock_init+0xc0>)
     e0a:	7d1a      	ldrb	r2, [r3, #20]
     e0c:	2180      	movs	r1, #128	; 0x80
     e0e:	4249      	negs	r1, r1
     e10:	430a      	orrs	r2, r1
     e12:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
     e14:	7d1a      	ldrb	r2, [r3, #20]
     e16:	31c0      	adds	r1, #192	; 0xc0
     e18:	438a      	bics	r2, r1
     e1a:	751a      	strb	r2, [r3, #20]
	} else {
		_system_clock_source_osc16m_freq_sel();
	}

	uint32_t mask = OSC32KCTRL->OSCULP32K.reg & (~(OSC32KCTRL_OSCULP32K_EN32K | OSC32KCTRL_OSCULP32K_EN1K));
     e1c:	4a1e      	ldr	r2, [pc, #120]	; (e98 <system_clock_init+0xd0>)
     e1e:	69d1      	ldr	r1, [r2, #28]
     e20:	2306      	movs	r3, #6
	OSC32KCTRL->OSCULP32K.reg = mask | (CONF_CLOCK_OSCULP32K_ENABLE_1KHZ_OUTPUT << OSC32KCTRL_OSCULP32K_EN1K_Pos)
									 | (CONF_CLOCK_OSCULP32K_ENABLE_32KHZ_OUTPUT << OSC32KCTRL_OSCULP32K_EN32K_Pos);
     e22:	430b      	orrs	r3, r1
	} else {
		_system_clock_source_osc16m_freq_sel();
	}

	uint32_t mask = OSC32KCTRL->OSCULP32K.reg & (~(OSC32KCTRL_OSCULP32K_EN32K | OSC32KCTRL_OSCULP32K_EN1K));
	OSC32KCTRL->OSCULP32K.reg = mask | (CONF_CLOCK_OSCULP32K_ENABLE_1KHZ_OUTPUT << OSC32KCTRL_OSCULP32K_EN1K_Pos)
     e24:	61d3      	str	r3, [r2, #28]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     e26:	4b1d      	ldr	r3, [pc, #116]	; (e9c <system_clock_init+0xd4>)
     e28:	4798      	blx	r3
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
     e2a:	4c1d      	ldr	r4, [pc, #116]	; (ea0 <system_clock_init+0xd8>)
     e2c:	2301      	movs	r3, #1
     e2e:	71a3      	strb	r3, [r4, #6]
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
     e30:	7123      	strb	r3, [r4, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     e32:	a901      	add	r1, sp, #4
     e34:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
     e36:	2300      	movs	r3, #0
     e38:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
     e3a:	2205      	movs	r2, #5
     e3c:	700a      	strb	r2, [r1, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     e3e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     e40:	724b      	strb	r3, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     e42:	2000      	movs	r0, #0
     e44:	4b17      	ldr	r3, [pc, #92]	; (ea4 <system_clock_init+0xdc>)
     e46:	4798      	blx	r3
     e48:	2000      	movs	r0, #0
     e4a:	4b17      	ldr	r3, [pc, #92]	; (ea8 <system_clock_init+0xe0>)
     e4c:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> (MCLK->CPUDIV.reg - 1));
     e4e:	2000      	movs	r0, #0
     e50:	4b16      	ldr	r3, [pc, #88]	; (eac <system_clock_init+0xe4>)
     e52:	4798      	blx	r3
     e54:	7923      	ldrb	r3, [r4, #4]
     e56:	3b01      	subs	r3, #1
     e58:	40d8      	lsrs	r0, r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
     e5a:	4b15      	ldr	r3, [pc, #84]	; (eb0 <system_clock_init+0xe8>)
     e5c:	4298      	cmp	r0, r3
     e5e:	d811      	bhi.n	e84 <system_clock_init+0xbc>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     e60:	4b0c      	ldr	r3, [pc, #48]	; (e94 <system_clock_init+0xcc>)
     e62:	789b      	ldrb	r3, [r3, #2]
     e64:	2b00      	cmp	r3, #0
     e66:	d00d      	beq.n	e84 <system_clock_init+0xbc>
		return STATUS_OK;
	}

#if SAML22
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     e68:	4b0a      	ldr	r3, [pc, #40]	; (e94 <system_clock_init+0xcc>)
     e6a:	789b      	ldrb	r3, [r3, #2]
     e6c:	b25b      	sxtb	r3, r3
     e6e:	2b00      	cmp	r3, #0
     e70:	db08      	blt.n	e84 <system_clock_init+0xbc>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     e72:	4b08      	ldr	r3, [pc, #32]	; (e94 <system_clock_init+0xcc>)
     e74:	2201      	movs	r2, #1
     e76:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
     e78:	2200      	movs	r2, #0
     e7a:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
     e7c:	1c1a      	adds	r2, r3, #0
     e7e:	7993      	ldrb	r3, [r2, #6]
     e80:	2b00      	cmp	r3, #0
     e82:	d0fc      	beq.n	e7e <system_clock_init+0xb6>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
     e84:	b004      	add	sp, #16
     e86:	bd10      	pop	{r4, pc}
     e88:	40001000 	.word	0x40001000
     e8c:	40001800 	.word	0x40001800
     e90:	41004000 	.word	0x41004000
     e94:	40000400 	.word	0x40000400
     e98:	40001400 	.word	0x40001400
     e9c:	00000eb5 	.word	0x00000eb5
     ea0:	40000800 	.word	0x40000800
     ea4:	00000ed9 	.word	0x00000ed9
     ea8:	00000f81 	.word	0x00000f81
     eac:	00000fbd 	.word	0x00000fbd
     eb0:	00b71b00 	.word	0x00b71b00

00000eb4 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     eb4:	4a06      	ldr	r2, [pc, #24]	; (ed0 <system_gclk_init+0x1c>)
     eb6:	6951      	ldr	r1, [r2, #20]
     eb8:	2380      	movs	r3, #128	; 0x80
     eba:	430b      	orrs	r3, r1
     ebc:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
     ebe:	2201      	movs	r2, #1
     ec0:	4b04      	ldr	r3, [pc, #16]	; (ed4 <system_gclk_init+0x20>)
     ec2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
     ec4:	1c19      	adds	r1, r3, #0
     ec6:	780b      	ldrb	r3, [r1, #0]
     ec8:	4213      	tst	r3, r2
     eca:	d1fc      	bne.n	ec6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     ecc:	4770      	bx	lr
     ece:	46c0      	nop			; (mov r8, r8)
     ed0:	40000800 	.word	0x40000800
     ed4:	40001c00 	.word	0x40001c00

00000ed8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     ed8:	b570      	push	{r4, r5, r6, lr}
     eda:	1c04      	adds	r4, r0, #0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
     edc:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     ede:	784b      	ldrb	r3, [r1, #1]
     ee0:	2b00      	cmp	r3, #0
     ee2:	d002      	beq.n	eea <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     ee4:	2380      	movs	r3, #128	; 0x80
     ee6:	00db      	lsls	r3, r3, #3
     ee8:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     eea:	7a4b      	ldrb	r3, [r1, #9]
     eec:	2b00      	cmp	r3, #0
     eee:	d002      	beq.n	ef6 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     ef0:	2380      	movs	r3, #128	; 0x80
     ef2:	011b      	lsls	r3, r3, #4
     ef4:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     ef6:	684a      	ldr	r2, [r1, #4]
     ef8:	2a01      	cmp	r2, #1
     efa:	d917      	bls.n	f2c <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     efc:	1e53      	subs	r3, r2, #1
     efe:	421a      	tst	r2, r3
     f00:	d10f      	bne.n	f22 <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     f02:	2a02      	cmp	r2, #2
     f04:	d906      	bls.n	f14 <system_gclk_gen_set_config+0x3c>
     f06:	2302      	movs	r3, #2
     f08:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
     f0a:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
     f0c:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     f0e:	429a      	cmp	r2, r3
     f10:	d8fb      	bhi.n	f0a <system_gclk_gen_set_config+0x32>
     f12:	e000      	b.n	f16 <system_gclk_gen_set_config+0x3e>
     f14:	2000      	movs	r0, #0
     f16:	2380      	movs	r3, #128	; 0x80
     f18:	015b      	lsls	r3, r3, #5
     f1a:	431d      	orrs	r5, r3
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
     f1c:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     f1e:	4305      	orrs	r5, r0
     f20:	e004      	b.n	f2c <system_gclk_gen_set_config+0x54>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
     f22:	0412      	lsls	r2, r2, #16
     f24:	2380      	movs	r3, #128	; 0x80
     f26:	009b      	lsls	r3, r3, #2
     f28:	431a      	orrs	r2, r3

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     f2a:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     f2c:	7a0b      	ldrb	r3, [r1, #8]
     f2e:	2b00      	cmp	r3, #0
     f30:	d002      	beq.n	f38 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     f32:	2380      	movs	r3, #128	; 0x80
     f34:	019b      	lsls	r3, r3, #6
     f36:	431d      	orrs	r5, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     f38:	2604      	movs	r6, #4
     f3a:	40a6      	lsls	r6, r4
     f3c:	490d      	ldr	r1, [pc, #52]	; (f74 <system_gclk_gen_set_config+0x9c>)
     f3e:	227c      	movs	r2, #124	; 0x7c
     f40:	684b      	ldr	r3, [r1, #4]
     f42:	4013      	ands	r3, r2
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
     f44:	421e      	tst	r6, r3
     f46:	d1fb      	bne.n	f40 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f48:	4b0b      	ldr	r3, [pc, #44]	; (f78 <system_gclk_gen_set_config+0xa0>)
     f4a:	4798      	blx	r3
     f4c:	00a4      	lsls	r4, r4, #2
     f4e:	4b09      	ldr	r3, [pc, #36]	; (f74 <system_gclk_gen_set_config+0x9c>)
     f50:	469c      	mov	ip, r3
     f52:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
     f54:	6a20      	ldr	r0, [r4, #32]
     f56:	2380      	movs	r3, #128	; 0x80
     f58:	005b      	lsls	r3, r3, #1
     f5a:	4018      	ands	r0, r3
     f5c:	4328      	orrs	r0, r5
     f5e:	6220      	str	r0, [r4, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     f60:	4661      	mov	r1, ip
     f62:	227c      	movs	r2, #124	; 0x7c
     f64:	684b      	ldr	r3, [r1, #4]
     f66:	4013      	ands	r3, r2

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
     f68:	421e      	tst	r6, r3
     f6a:	d1fb      	bne.n	f64 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f6c:	4b03      	ldr	r3, [pc, #12]	; (f7c <system_gclk_gen_set_config+0xa4>)
     f6e:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
     f70:	bd70      	pop	{r4, r5, r6, pc}
     f72:	46c0      	nop			; (mov r8, r8)
     f74:	40001c00 	.word	0x40001c00
     f78:	00000109 	.word	0x00000109
     f7c:	00000149 	.word	0x00000149

00000f80 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     f80:	b510      	push	{r4, lr}
     f82:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     f84:	2204      	movs	r2, #4
     f86:	4082      	lsls	r2, r0
     f88:	4809      	ldr	r0, [pc, #36]	; (fb0 <system_gclk_gen_enable+0x30>)
     f8a:	217c      	movs	r1, #124	; 0x7c
     f8c:	6843      	ldr	r3, [r0, #4]
     f8e:	400b      	ands	r3, r1
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
     f90:	421a      	tst	r2, r3
     f92:	d1fb      	bne.n	f8c <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f94:	4b07      	ldr	r3, [pc, #28]	; (fb4 <system_gclk_gen_enable+0x34>)
     f96:	4798      	blx	r3
     f98:	00a4      	lsls	r4, r4, #2
     f9a:	4b05      	ldr	r3, [pc, #20]	; (fb0 <system_gclk_gen_enable+0x30>)
     f9c:	469c      	mov	ip, r3
     f9e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
     fa0:	6a23      	ldr	r3, [r4, #32]
     fa2:	2280      	movs	r2, #128	; 0x80
     fa4:	0052      	lsls	r2, r2, #1
     fa6:	4313      	orrs	r3, r2
     fa8:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     faa:	4b03      	ldr	r3, [pc, #12]	; (fb8 <system_gclk_gen_enable+0x38>)
     fac:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     fae:	bd10      	pop	{r4, pc}
     fb0:	40001c00 	.word	0x40001c00
     fb4:	00000109 	.word	0x00000109
     fb8:	00000149 	.word	0x00000149

00000fbc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fbe:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     fc0:	2204      	movs	r2, #4
     fc2:	4082      	lsls	r2, r0
     fc4:	4812      	ldr	r0, [pc, #72]	; (1010 <system_gclk_gen_get_hz+0x54>)
     fc6:	217c      	movs	r1, #124	; 0x7c
     fc8:	6843      	ldr	r3, [r0, #4]
     fca:	400b      	ands	r3, r1
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
     fcc:	421a      	tst	r2, r3
     fce:	d1fb      	bne.n	fc8 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     fd0:	4b10      	ldr	r3, [pc, #64]	; (1014 <system_gclk_gen_get_hz+0x58>)
     fd2:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
     fd4:	4f0e      	ldr	r7, [pc, #56]	; (1010 <system_gclk_gen_get_hz+0x54>)
     fd6:	3408      	adds	r4, #8
     fd8:	00a4      	lsls	r4, r4, #2
     fda:	59e3      	ldr	r3, [r4, r7]
     fdc:	2007      	movs	r0, #7
     fde:	4018      	ands	r0, r3
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
     fe0:	4b0d      	ldr	r3, [pc, #52]	; (1018 <system_gclk_gen_get_hz+0x5c>)
     fe2:	4798      	blx	r3
     fe4:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
     fe6:	59e5      	ldr	r5, [r4, r7]
     fe8:	04ed      	lsls	r5, r5, #19
     fea:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
     fec:	59e4      	ldr	r4, [r4, r7]
     fee:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     ff0:	4b0a      	ldr	r3, [pc, #40]	; (101c <system_gclk_gen_get_hz+0x60>)
     ff2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     ff4:	2d00      	cmp	r5, #0
     ff6:	d107      	bne.n	1008 <system_gclk_gen_get_hz+0x4c>
     ff8:	2c01      	cmp	r4, #1
     ffa:	d907      	bls.n	100c <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
     ffc:	1c30      	adds	r0, r6, #0
     ffe:	1c21      	adds	r1, r4, #0
    1000:	4b07      	ldr	r3, [pc, #28]	; (1020 <system_gclk_gen_get_hz+0x64>)
    1002:	4798      	blx	r3
    1004:	1c06      	adds	r6, r0, #0
    1006:	e001      	b.n	100c <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1008:	3401      	adds	r4, #1
    100a:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    100c:	1c30      	adds	r0, r6, #0
    100e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1010:	40001c00 	.word	0x40001c00
    1014:	00000109 	.word	0x00000109
    1018:	00000d35 	.word	0x00000d35
    101c:	00000149 	.word	0x00000149
    1020:	000017b1 	.word	0x000017b1

00001024 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1024:	b510      	push	{r4, lr}
    1026:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1028:	4b08      	ldr	r3, [pc, #32]	; (104c <system_gclk_chan_enable+0x28>)
    102a:	4798      	blx	r3
    102c:	00a4      	lsls	r4, r4, #2
    102e:	4b08      	ldr	r3, [pc, #32]	; (1050 <system_gclk_chan_enable+0x2c>)
    1030:	18e0      	adds	r0, r4, r3
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    1032:	2280      	movs	r2, #128	; 0x80
    1034:	5881      	ldr	r1, [r0, r2]
    1036:	2340      	movs	r3, #64	; 0x40
    1038:	430b      	orrs	r3, r1
    103a:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    103c:	2180      	movs	r1, #128	; 0x80
    103e:	3a40      	subs	r2, #64	; 0x40
    1040:	5843      	ldr	r3, [r0, r1]
    1042:	421a      	tst	r2, r3
    1044:	d0fc      	beq.n	1040 <system_gclk_chan_enable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1046:	4b03      	ldr	r3, [pc, #12]	; (1054 <system_gclk_chan_enable+0x30>)
    1048:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    104a:	bd10      	pop	{r4, pc}
    104c:	00000109 	.word	0x00000109
    1050:	40001c00 	.word	0x40001c00
    1054:	00000149 	.word	0x00000149

00001058 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1058:	b510      	push	{r4, lr}
    105a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    105c:	4b08      	ldr	r3, [pc, #32]	; (1080 <system_gclk_chan_disable+0x28>)
    105e:	4798      	blx	r3
    1060:	00a4      	lsls	r4, r4, #2
    1062:	4b08      	ldr	r3, [pc, #32]	; (1084 <system_gclk_chan_disable+0x2c>)
    1064:	18e0      	adds	r0, r4, r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    1066:	2280      	movs	r2, #128	; 0x80
    1068:	5883      	ldr	r3, [r0, r2]
    106a:	2140      	movs	r1, #64	; 0x40
    106c:	438b      	bics	r3, r1
    106e:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    1070:	3140      	adds	r1, #64	; 0x40
    1072:	3a40      	subs	r2, #64	; 0x40
    1074:	5843      	ldr	r3, [r0, r1]
    1076:	421a      	tst	r2, r3
    1078:	d1fc      	bne.n	1074 <system_gclk_chan_disable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    107a:	4b03      	ldr	r3, [pc, #12]	; (1088 <system_gclk_chan_disable+0x30>)
    107c:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    107e:	bd10      	pop	{r4, pc}
    1080:	00000109 	.word	0x00000109
    1084:	40001c00 	.word	0x40001c00
    1088:	00000149 	.word	0x00000149

0000108c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    108c:	b538      	push	{r3, r4, r5, lr}
    108e:	1c04      	adds	r4, r0, #0
    1090:	1c0d      	adds	r5, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1092:	4b05      	ldr	r3, [pc, #20]	; (10a8 <system_gclk_chan_set_config+0x1c>)
    1094:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    1096:	782b      	ldrb	r3, [r5, #0]
    1098:	2207      	movs	r2, #7
    109a:	4013      	ands	r3, r2
    109c:	3420      	adds	r4, #32
    109e:	00a4      	lsls	r4, r4, #2
    10a0:	4a02      	ldr	r2, [pc, #8]	; (10ac <system_gclk_chan_set_config+0x20>)
    10a2:	50a3      	str	r3, [r4, r2]


}
    10a4:	bd38      	pop	{r3, r4, r5, pc}
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	00001059 	.word	0x00001059
    10ac:	40001c00 	.word	0x40001c00

000010b0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    10b0:	b510      	push	{r4, lr}
    10b2:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    10b4:	4b06      	ldr	r3, [pc, #24]	; (10d0 <system_gclk_chan_get_hz+0x20>)
    10b6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    10b8:	3420      	adds	r4, #32
    10ba:	00a4      	lsls	r4, r4, #2
    10bc:	4b05      	ldr	r3, [pc, #20]	; (10d4 <system_gclk_chan_get_hz+0x24>)
    10be:	58e3      	ldr	r3, [r4, r3]
    10c0:	2407      	movs	r4, #7
    10c2:	401c      	ands	r4, r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    10c4:	4b04      	ldr	r3, [pc, #16]	; (10d8 <system_gclk_chan_get_hz+0x28>)
    10c6:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    10c8:	1c20      	adds	r0, r4, #0
    10ca:	4b04      	ldr	r3, [pc, #16]	; (10dc <system_gclk_chan_get_hz+0x2c>)
    10cc:	4798      	blx	r3
}
    10ce:	bd10      	pop	{r4, pc}
    10d0:	00000109 	.word	0x00000109
    10d4:	40001c00 	.word	0x40001c00
    10d8:	00000149 	.word	0x00000149
    10dc:	00000fbd 	.word	0x00000fbd

000010e0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    10e0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    10e2:	78d3      	ldrb	r3, [r2, #3]
    10e4:	2b00      	cmp	r3, #0
    10e6:	d11e      	bne.n	1126 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    10e8:	7814      	ldrb	r4, [r2, #0]
    10ea:	2c80      	cmp	r4, #128	; 0x80
    10ec:	d004      	beq.n	10f8 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    10ee:	0624      	lsls	r4, r4, #24
    10f0:	2380      	movs	r3, #128	; 0x80
    10f2:	025b      	lsls	r3, r3, #9
    10f4:	431c      	orrs	r4, r3
    10f6:	e000      	b.n	10fa <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    10f8:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    10fa:	7853      	ldrb	r3, [r2, #1]
    10fc:	2502      	movs	r5, #2
    10fe:	43ab      	bics	r3, r5
    1100:	d10a      	bne.n	1118 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1102:	7893      	ldrb	r3, [r2, #2]
    1104:	2b00      	cmp	r3, #0
    1106:	d103      	bne.n	1110 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1108:	2380      	movs	r3, #128	; 0x80
    110a:	029b      	lsls	r3, r3, #10
    110c:	431c      	orrs	r4, r3
    110e:	e002      	b.n	1116 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1110:	23c0      	movs	r3, #192	; 0xc0
    1112:	02db      	lsls	r3, r3, #11
    1114:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1116:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1118:	7853      	ldrb	r3, [r2, #1]
    111a:	3b01      	subs	r3, #1
    111c:	2b01      	cmp	r3, #1
    111e:	d812      	bhi.n	1146 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1120:	4b18      	ldr	r3, [pc, #96]	; (1184 <_system_pinmux_config+0xa4>)
    1122:	401c      	ands	r4, r3
    1124:	e00f      	b.n	1146 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1126:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1128:	040b      	lsls	r3, r1, #16
    112a:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    112c:	24a0      	movs	r4, #160	; 0xa0
    112e:	05e4      	lsls	r4, r4, #23
    1130:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1132:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1134:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1136:	24d0      	movs	r4, #208	; 0xd0
    1138:	0624      	lsls	r4, r4, #24
    113a:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    113c:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    113e:	78d3      	ldrb	r3, [r2, #3]
    1140:	2b00      	cmp	r3, #0
    1142:	d018      	beq.n	1176 <_system_pinmux_config+0x96>
    1144:	e01c      	b.n	1180 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1146:	040b      	lsls	r3, r1, #16
    1148:	0c1b      	lsrs	r3, r3, #16
    114a:	25a0      	movs	r5, #160	; 0xa0
    114c:	05ed      	lsls	r5, r5, #23
    114e:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1150:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1152:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1154:	0c0b      	lsrs	r3, r1, #16
    1156:	25d0      	movs	r5, #208	; 0xd0
    1158:	062d      	lsls	r5, r5, #24
    115a:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    115c:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    115e:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1160:	78d3      	ldrb	r3, [r2, #3]
    1162:	2b00      	cmp	r3, #0
    1164:	d10c      	bne.n	1180 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1166:	0363      	lsls	r3, r4, #13
    1168:	d505      	bpl.n	1176 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    116a:	7893      	ldrb	r3, [r2, #2]
    116c:	2b01      	cmp	r3, #1
    116e:	d101      	bne.n	1174 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1170:	6181      	str	r1, [r0, #24]
    1172:	e000      	b.n	1176 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    1174:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1176:	7853      	ldrb	r3, [r2, #1]
    1178:	3b01      	subs	r3, #1
    117a:	2b01      	cmp	r3, #1
    117c:	d800      	bhi.n	1180 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    117e:	6081      	str	r1, [r0, #8]
		}
	}
}
    1180:	bd30      	pop	{r4, r5, pc}
    1182:	46c0      	nop			; (mov r8, r8)
    1184:	fffbffff 	.word	0xfffbffff

00001188 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1188:	b508      	push	{r3, lr}
    118a:	1c03      	adds	r3, r0, #0
    118c:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    118e:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1190:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1192:	2900      	cmp	r1, #0
    1194:	d104      	bne.n	11a0 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    1196:	0958      	lsrs	r0, r3, #5
    1198:	01c0      	lsls	r0, r0, #7
    119a:	4905      	ldr	r1, [pc, #20]	; (11b0 <system_pinmux_pin_set_config+0x28>)
    119c:	468c      	mov	ip, r1
    119e:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    11a0:	211f      	movs	r1, #31
    11a2:	400b      	ands	r3, r1
    11a4:	391e      	subs	r1, #30
    11a6:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    11a8:	4b02      	ldr	r3, [pc, #8]	; (11b4 <system_pinmux_pin_set_config+0x2c>)
    11aa:	4798      	blx	r3
}
    11ac:	bd08      	pop	{r3, pc}
    11ae:	46c0      	nop			; (mov r8, r8)
    11b0:	41006000 	.word	0x41006000
    11b4:	000010e1 	.word	0x000010e1

000011b8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    11b8:	4770      	bx	lr
    11ba:	46c0      	nop			; (mov r8, r8)

000011bc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    11bc:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    11be:	4b05      	ldr	r3, [pc, #20]	; (11d4 <system_init+0x18>)
    11c0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    11c2:	4b05      	ldr	r3, [pc, #20]	; (11d8 <system_init+0x1c>)
    11c4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    11c6:	4b05      	ldr	r3, [pc, #20]	; (11dc <system_init+0x20>)
    11c8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    11ca:	4b05      	ldr	r3, [pc, #20]	; (11e0 <system_init+0x24>)
    11cc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    11ce:	4b05      	ldr	r3, [pc, #20]	; (11e4 <system_init+0x28>)
    11d0:	4798      	blx	r3
}
    11d2:	bd08      	pop	{r3, pc}
    11d4:	00000dc9 	.word	0x00000dc9
    11d8:	00000179 	.word	0x00000179
    11dc:	000011b9 	.word	0x000011b9
    11e0:	00000239 	.word	0x00000239
    11e4:	000011b9 	.word	0x000011b9

000011e8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    11e8:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    11ea:	0080      	lsls	r0, r0, #2
    11ec:	4b14      	ldr	r3, [pc, #80]	; (1240 <_tc_interrupt_handler+0x58>)
    11ee:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    11f0:	682b      	ldr	r3, [r5, #0]
    11f2:	7a9c      	ldrb	r4, [r3, #10]
    11f4:	7e2b      	ldrb	r3, [r5, #24]
    11f6:	401c      	ands	r4, r3
    11f8:	7e6b      	ldrb	r3, [r5, #25]
    11fa:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    11fc:	07e3      	lsls	r3, r4, #31
    11fe:	d505      	bpl.n	120c <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1200:	1c28      	adds	r0, r5, #0
    1202:	68ab      	ldr	r3, [r5, #8]
    1204:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1206:	2301      	movs	r3, #1
    1208:	682a      	ldr	r2, [r5, #0]
    120a:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    120c:	07a3      	lsls	r3, r4, #30
    120e:	d505      	bpl.n	121c <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1210:	1c28      	adds	r0, r5, #0
    1212:	68eb      	ldr	r3, [r5, #12]
    1214:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1216:	2302      	movs	r3, #2
    1218:	682a      	ldr	r2, [r5, #0]
    121a:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    121c:	06e3      	lsls	r3, r4, #27
    121e:	d505      	bpl.n	122c <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1220:	1c28      	adds	r0, r5, #0
    1222:	692b      	ldr	r3, [r5, #16]
    1224:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1226:	2310      	movs	r3, #16
    1228:	682a      	ldr	r2, [r5, #0]
    122a:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    122c:	06a3      	lsls	r3, r4, #26
    122e:	d505      	bpl.n	123c <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1230:	1c28      	adds	r0, r5, #0
    1232:	696b      	ldr	r3, [r5, #20]
    1234:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1236:	682b      	ldr	r3, [r5, #0]
    1238:	2220      	movs	r2, #32
    123a:	729a      	strb	r2, [r3, #10]
	}
}
    123c:	bd38      	pop	{r3, r4, r5, pc}
    123e:	46c0      	nop			; (mov r8, r8)
    1240:	2000012c 	.word	0x2000012c

00001244 <TC0_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1244:	b508      	push	{r3, lr}
    1246:	2000      	movs	r0, #0
    1248:	4b01      	ldr	r3, [pc, #4]	; (1250 <TC0_Handler+0xc>)
    124a:	4798      	blx	r3
    124c:	bd08      	pop	{r3, pc}
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	000011e9 	.word	0x000011e9

00001254 <TC1_Handler>:
    1254:	b508      	push	{r3, lr}
    1256:	2001      	movs	r0, #1
    1258:	4b01      	ldr	r3, [pc, #4]	; (1260 <TC1_Handler+0xc>)
    125a:	4798      	blx	r3
    125c:	bd08      	pop	{r3, pc}
    125e:	46c0      	nop			; (mov r8, r8)
    1260:	000011e9 	.word	0x000011e9

00001264 <TC2_Handler>:
    1264:	b508      	push	{r3, lr}
    1266:	2002      	movs	r0, #2
    1268:	4b01      	ldr	r3, [pc, #4]	; (1270 <TC2_Handler+0xc>)
    126a:	4798      	blx	r3
    126c:	bd08      	pop	{r3, pc}
    126e:	46c0      	nop			; (mov r8, r8)
    1270:	000011e9 	.word	0x000011e9

00001274 <TC3_Handler>:
    1274:	b508      	push	{r3, lr}
    1276:	2003      	movs	r0, #3
    1278:	4b01      	ldr	r3, [pc, #4]	; (1280 <TC3_Handler+0xc>)
    127a:	4798      	blx	r3
    127c:	bd08      	pop	{r3, pc}
    127e:	46c0      	nop			; (mov r8, r8)
    1280:	000011e9 	.word	0x000011e9

00001284 <Dummy_Handler>:
 */

void Dummy_Handler(void)
{
        while (1) {
        }
    1284:	e7fe      	b.n	1284 <Dummy_Handler>
    1286:	46c0      	nop			; (mov r8, r8)

00001288 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1288:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    128a:	4b1b      	ldr	r3, [pc, #108]	; (12f8 <Reset_Handler+0x70>)
    128c:	4a1b      	ldr	r2, [pc, #108]	; (12fc <Reset_Handler+0x74>)
    128e:	429a      	cmp	r2, r3
    1290:	d003      	beq.n	129a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1292:	4b1b      	ldr	r3, [pc, #108]	; (1300 <Reset_Handler+0x78>)
    1294:	4a18      	ldr	r2, [pc, #96]	; (12f8 <Reset_Handler+0x70>)
    1296:	429a      	cmp	r2, r3
    1298:	d304      	bcc.n	12a4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    129a:	4b1a      	ldr	r3, [pc, #104]	; (1304 <Reset_Handler+0x7c>)
    129c:	4a1a      	ldr	r2, [pc, #104]	; (1308 <Reset_Handler+0x80>)
    129e:	429a      	cmp	r2, r3
    12a0:	d310      	bcc.n	12c4 <Reset_Handler+0x3c>
    12a2:	e01e      	b.n	12e2 <Reset_Handler+0x5a>
    12a4:	4a19      	ldr	r2, [pc, #100]	; (130c <Reset_Handler+0x84>)
    12a6:	4b16      	ldr	r3, [pc, #88]	; (1300 <Reset_Handler+0x78>)
    12a8:	3303      	adds	r3, #3
    12aa:	1a9b      	subs	r3, r3, r2
    12ac:	089b      	lsrs	r3, r3, #2
    12ae:	3301      	adds	r3, #1
    12b0:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    12b2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    12b4:	4810      	ldr	r0, [pc, #64]	; (12f8 <Reset_Handler+0x70>)
    12b6:	4911      	ldr	r1, [pc, #68]	; (12fc <Reset_Handler+0x74>)
    12b8:	588c      	ldr	r4, [r1, r2]
    12ba:	5084      	str	r4, [r0, r2]
    12bc:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    12be:	429a      	cmp	r2, r3
    12c0:	d1fa      	bne.n	12b8 <Reset_Handler+0x30>
    12c2:	e7ea      	b.n	129a <Reset_Handler+0x12>
    12c4:	4a12      	ldr	r2, [pc, #72]	; (1310 <Reset_Handler+0x88>)
    12c6:	4b0f      	ldr	r3, [pc, #60]	; (1304 <Reset_Handler+0x7c>)
    12c8:	3303      	adds	r3, #3
    12ca:	1a9b      	subs	r3, r3, r2
    12cc:	089b      	lsrs	r3, r3, #2
    12ce:	3301      	adds	r3, #1
    12d0:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    12d2:	2200      	movs	r2, #0
                *pDest++ = 0;
    12d4:	480c      	ldr	r0, [pc, #48]	; (1308 <Reset_Handler+0x80>)
    12d6:	2100      	movs	r1, #0
    12d8:	1814      	adds	r4, r2, r0
    12da:	6021      	str	r1, [r4, #0]
    12dc:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    12de:	429a      	cmp	r2, r3
    12e0:	d1fa      	bne.n	12d8 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    12e2:	4a0c      	ldr	r2, [pc, #48]	; (1314 <Reset_Handler+0x8c>)
    12e4:	21ff      	movs	r1, #255	; 0xff
    12e6:	4b0c      	ldr	r3, [pc, #48]	; (1318 <Reset_Handler+0x90>)
    12e8:	438b      	bics	r3, r1
    12ea:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
    12ec:	4b0b      	ldr	r3, [pc, #44]	; (131c <Reset_Handler+0x94>)
    12ee:	4798      	blx	r3

        /* Branch to main function */
        main();
    12f0:	4b0b      	ldr	r3, [pc, #44]	; (1320 <Reset_Handler+0x98>)
    12f2:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    12f4:	e7fe      	b.n	12f4 <Reset_Handler+0x6c>
    12f6:	46c0      	nop			; (mov r8, r8)
    12f8:	20000000 	.word	0x20000000
    12fc:	000029dc 	.word	0x000029dc
    1300:	20000068 	.word	0x20000068
    1304:	200001e4 	.word	0x200001e4
    1308:	20000068 	.word	0x20000068
    130c:	20000004 	.word	0x20000004
    1310:	2000006c 	.word	0x2000006c
    1314:	e000ed00 	.word	0xe000ed00
    1318:	00000000 	.word	0x00000000
    131c:	00001929 	.word	0x00001929
    1320:	00001649 	.word	0x00001649

00001324 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1324:	b5f0      	push	{r4, r5, r6, r7, lr}
    1326:	4647      	mov	r7, r8
    1328:	b480      	push	{r7}
    132a:	1c0c      	adds	r4, r1, #0
    132c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    132e:	2800      	cmp	r0, #0
    1330:	d110      	bne.n	1354 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
    1332:	2a00      	cmp	r2, #0
    1334:	dd0a      	ble.n	134c <_read+0x28>
    1336:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1338:	4e09      	ldr	r6, [pc, #36]	; (1360 <_read+0x3c>)
    133a:	4d0a      	ldr	r5, [pc, #40]	; (1364 <_read+0x40>)
    133c:	6830      	ldr	r0, [r6, #0]
    133e:	1c21      	adds	r1, r4, #0
    1340:	682b      	ldr	r3, [r5, #0]
    1342:	4798      	blx	r3
		ptr++;
    1344:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1346:	42bc      	cmp	r4, r7
    1348:	d1f8      	bne.n	133c <_read+0x18>
    134a:	e001      	b.n	1350 <_read+0x2c>
    134c:	2300      	movs	r3, #0
    134e:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    1350:	4640      	mov	r0, r8
    1352:	e001      	b.n	1358 <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    1354:	2001      	movs	r0, #1
    1356:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    1358:	bc04      	pop	{r2}
    135a:	4690      	mov	r8, r2
    135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	20000144 	.word	0x20000144
    1364:	2000013c 	.word	0x2000013c

00001368 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1368:	b5f0      	push	{r4, r5, r6, r7, lr}
    136a:	4647      	mov	r7, r8
    136c:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    136e:	3801      	subs	r0, #1
    1370:	2802      	cmp	r0, #2
    1372:	d815      	bhi.n	13a0 <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
    1374:	2a00      	cmp	r2, #0
    1376:	d010      	beq.n	139a <_write+0x32>
    1378:	1c15      	adds	r5, r2, #0
    137a:	1c0e      	adds	r6, r1, #0
    137c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    137e:	4b0c      	ldr	r3, [pc, #48]	; (13b0 <_write+0x48>)
    1380:	4698      	mov	r8, r3
    1382:	4f0c      	ldr	r7, [pc, #48]	; (13b4 <_write+0x4c>)
    1384:	4643      	mov	r3, r8
    1386:	6818      	ldr	r0, [r3, #0]
    1388:	5d31      	ldrb	r1, [r6, r4]
    138a:	683b      	ldr	r3, [r7, #0]
    138c:	4798      	blx	r3
    138e:	2800      	cmp	r0, #0
    1390:	db09      	blt.n	13a6 <_write+0x3e>
			return -1;
		}
		++nChars;
    1392:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1394:	42a5      	cmp	r5, r4
    1396:	d1f5      	bne.n	1384 <_write+0x1c>
    1398:	e000      	b.n	139c <_write+0x34>
    139a:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    139c:	1c20      	adds	r0, r4, #0
    139e:	e004      	b.n	13aa <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    13a0:	2001      	movs	r0, #1
    13a2:	4240      	negs	r0, r0
    13a4:	e001      	b.n	13aa <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    13a6:	2001      	movs	r0, #1
    13a8:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    13aa:	bc04      	pop	{r2}
    13ac:	4690      	mov	r8, r2
    13ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13b0:	20000144 	.word	0x20000144
    13b4:	20000140 	.word	0x20000140

000013b8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    13b8:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    13ba:	4a06      	ldr	r2, [pc, #24]	; (13d4 <_sbrk+0x1c>)
    13bc:	6812      	ldr	r2, [r2, #0]
    13be:	2a00      	cmp	r2, #0
    13c0:	d102      	bne.n	13c8 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    13c2:	4905      	ldr	r1, [pc, #20]	; (13d8 <_sbrk+0x20>)
    13c4:	4a03      	ldr	r2, [pc, #12]	; (13d4 <_sbrk+0x1c>)
    13c6:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    13c8:	4a02      	ldr	r2, [pc, #8]	; (13d4 <_sbrk+0x1c>)
    13ca:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    13cc:	18c3      	adds	r3, r0, r3
    13ce:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    13d0:	4770      	bx	lr
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	200000c0 	.word	0x200000c0
    13d8:	200021e8 	.word	0x200021e8

000013dc <_close>:
}

extern int _close(int file)
{
	return -1;
}
    13dc:	2001      	movs	r0, #1
    13de:	4240      	negs	r0, r0
    13e0:	4770      	bx	lr
    13e2:	46c0      	nop			; (mov r8, r8)

000013e4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    13e4:	2380      	movs	r3, #128	; 0x80
    13e6:	019b      	lsls	r3, r3, #6
    13e8:	604b      	str	r3, [r1, #4]

	return 0;
}
    13ea:	2000      	movs	r0, #0
    13ec:	4770      	bx	lr
    13ee:	46c0      	nop			; (mov r8, r8)

000013f0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    13f0:	2001      	movs	r0, #1
    13f2:	4770      	bx	lr

000013f4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    13f4:	2000      	movs	r0, #0
    13f6:	4770      	bx	lr

000013f8 <Get_PoorSignal_HeartRate>:
uint8_t  versionBuffer[20]={0};
*/
UINT temp;

signed int    Get_PoorSignal_HeartRate(void)
{
    13f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13fa:	b085      	sub	sp, #20
 */
static inline uint8_t usart_serial_getchar(
		struct usart_module *const module,
		volatile uint8_t *c)
{
	volatile uint8_t temp = 0;
    13fc:	2200      	movs	r2, #0
    13fe:	ab02      	add	r3, sp, #8
    1400:	705a      	strb	r2, [r3, #1]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1402:	4b79      	ldr	r3, [pc, #484]	; (15e8 <Get_PoorSignal_HeartRate+0x1f0>)
    1404:	681b      	ldr	r3, [r3, #0]
	while(!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC));
    1406:	2104      	movs	r1, #4
    1408:	7e1a      	ldrb	r2, [r3, #24]
    140a:	420a      	tst	r2, r1
    140c:	d0fc      	beq.n	1408 <Get_PoorSignal_HeartRate+0x10>
	temp=usart_hw->DATA.bit.DATA;
    140e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    1410:	b2d2      	uxtb	r2, r2
    1412:	a902      	add	r1, sp, #8
    1414:	704a      	strb	r2, [r1, #1]
	return temp;
    1416:	784a      	ldrb	r2, [r1, #1]
    1418:	b2d2      	uxtb	r2, r2
					}
				}
			}
		}
	}
	return 0;
    141a:	2000      	movs	r0, #0
*/
UINT temp;

signed int    Get_PoorSignal_HeartRate(void)
{
	if(Packet_Header == usart_serial_getchar(&ext3_uart_module,tmp_data))  //0xAA
    141c:	2aaa      	cmp	r2, #170	; 0xaa
    141e:	d000      	beq.n	1422 <Get_PoorSignal_HeartRate+0x2a>
    1420:	e0df      	b.n	15e2 <Get_PoorSignal_HeartRate+0x1ea>
 */
static inline uint8_t usart_serial_getchar(
		struct usart_module *const module,
		volatile uint8_t *c)
{
	volatile uint8_t temp = 0;
    1422:	2100      	movs	r1, #0
    1424:	aa02      	add	r2, sp, #8
    1426:	7091      	strb	r1, [r2, #2]
	SercomUsart *const usart_hw = &(module->hw->USART);
	while(!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC));
    1428:	3104      	adds	r1, #4
    142a:	7e1a      	ldrb	r2, [r3, #24]
    142c:	420a      	tst	r2, r1
    142e:	d0fc      	beq.n	142a <Get_PoorSignal_HeartRate+0x32>
	temp=usart_hw->DATA.bit.DATA;
    1430:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    1432:	b2d2      	uxtb	r2, r2
    1434:	a902      	add	r1, sp, #8
    1436:	708a      	strb	r2, [r1, #2]
	return temp;
    1438:	788a      	ldrb	r2, [r1, #2]
    143a:	b2d2      	uxtb	r2, r2
					}
				}
			}
		}
	}
	return 0;
    143c:	2000      	movs	r0, #0

signed int    Get_PoorSignal_HeartRate(void)
{
	if(Packet_Header == usart_serial_getchar(&ext3_uart_module,tmp_data))  //0xAA
	{
		if(Packet_Header == usart_serial_getchar(&ext3_uart_module,tmp_data))//0xAA
    143e:	2aaa      	cmp	r2, #170	; 0xaa
    1440:	d000      	beq.n	1444 <Get_PoorSignal_HeartRate+0x4c>
    1442:	e0ce      	b.n	15e2 <Get_PoorSignal_HeartRate+0x1ea>
 */
static inline uint8_t usart_serial_getchar(
		struct usart_module *const module,
		volatile uint8_t *c)
{
	volatile uint8_t temp = 0;
    1444:	2100      	movs	r1, #0
    1446:	aa02      	add	r2, sp, #8
    1448:	70d1      	strb	r1, [r2, #3]
	SercomUsart *const usart_hw = &(module->hw->USART);
	while(!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC));
    144a:	3104      	adds	r1, #4
    144c:	7e1a      	ldrb	r2, [r3, #24]
    144e:	420a      	tst	r2, r1
    1450:	d0fc      	beq.n	144c <Get_PoorSignal_HeartRate+0x54>
	temp=usart_hw->DATA.bit.DATA;
    1452:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    1454:	b2d2      	uxtb	r2, r2
    1456:	a902      	add	r1, sp, #8
    1458:	70ca      	strb	r2, [r1, #3]
	return temp;
    145a:	78ca      	ldrb	r2, [r1, #3]
		{
			vBMD101.Rpayload_Length = usart_serial_getchar(&ext3_uart_module,tmp_data);
    145c:	4963      	ldr	r1, [pc, #396]	; (15ec <Get_PoorSignal_HeartRate+0x1f4>)
    145e:	800a      	strh	r2, [r1, #0]
			if(vBMD101.Rpayload_Length == Payload_Length )
    1460:	2a04      	cmp	r2, #4
    1462:	d155      	bne.n	1510 <Get_PoorSignal_HeartRate+0x118>
    1464:	1c08      	adds	r0, r1, #0
    1466:	1c0f      	adds	r7, r1, #0
    1468:	3710      	adds	r7, #16
    146a:	2500      	movs	r5, #0
 */
static inline uint8_t usart_serial_getchar(
		struct usart_module *const module,
		volatile uint8_t *c)
{
	volatile uint8_t temp = 0;
    146c:	2600      	movs	r6, #0
	SercomUsart *const usart_hw = &(module->hw->USART);
	while(!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC));
    146e:	2104      	movs	r1, #4
 */
static inline uint8_t usart_serial_getchar(
		struct usart_module *const module,
		volatile uint8_t *c)
{
	volatile uint8_t temp = 0;
    1470:	aa03      	add	r2, sp, #12
    1472:	7016      	strb	r6, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
	while(!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC));
    1474:	7e1a      	ldrb	r2, [r3, #24]
    1476:	420a      	tst	r2, r1
    1478:	d0fc      	beq.n	1474 <Get_PoorSignal_HeartRate+0x7c>
	temp=usart_hw->DATA.bit.DATA;
    147a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    147c:	b2d2      	uxtb	r2, r2
    147e:	ac03      	add	r4, sp, #12
    1480:	7022      	strb	r2, [r4, #0]
	return temp;
    1482:	7822      	ldrb	r2, [r4, #0]
    1484:	b2d2      	uxtb	r2, r2
			{
				generatedCheckSum=0;
				for( kk= 0; kk< vBMD101.Rpayload_Length; kk++)
				{
					vBMD101.PayloadData[kk] = usart_serial_getchar(&ext3_uart_module,tmp_data);
    1486:	6042      	str	r2, [r0, #4]
					generatedCheckSum += vBMD101.PayloadData[kk];
    1488:	18ad      	adds	r5, r5, r2
    148a:	3004      	adds	r0, #4
		{
			vBMD101.Rpayload_Length = usart_serial_getchar(&ext3_uart_module,tmp_data);
			if(vBMD101.Rpayload_Length == Payload_Length )
			{
				generatedCheckSum=0;
				for( kk= 0; kk< vBMD101.Rpayload_Length; kk++)
    148c:	42b8      	cmp	r0, r7
    148e:	d1ef      	bne.n	1470 <Get_PoorSignal_HeartRate+0x78>
    1490:	4a57      	ldr	r2, [pc, #348]	; (15f0 <Get_PoorSignal_HeartRate+0x1f8>)
    1492:	6015      	str	r5, [r2, #0]
    1494:	2104      	movs	r1, #4
    1496:	4a57      	ldr	r2, [pc, #348]	; (15f4 <Get_PoorSignal_HeartRate+0x1fc>)
    1498:	6011      	str	r1, [r2, #0]
 */
static inline uint8_t usart_serial_getchar(
		struct usart_module *const module,
		volatile uint8_t *c)
{
	volatile uint8_t temp = 0;
    149a:	2100      	movs	r1, #0
    149c:	aa02      	add	r2, sp, #8
    149e:	7151      	strb	r1, [r2, #5]
	SercomUsart *const usart_hw = &(module->hw->USART);
	while(!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC));
    14a0:	3104      	adds	r1, #4
    14a2:	7e1a      	ldrb	r2, [r3, #24]
    14a4:	420a      	tst	r2, r1
    14a6:	d0fc      	beq.n	14a2 <Get_PoorSignal_HeartRate+0xaa>
	temp=usart_hw->DATA.bit.DATA;
    14a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    14aa:	b2db      	uxtb	r3, r3
    14ac:	aa02      	add	r2, sp, #8
    14ae:	7153      	strb	r3, [r2, #5]
	return temp;
    14b0:	7953      	ldrb	r3, [r2, #5]
    14b2:	b2db      	uxtb	r3, r3
				{
					vBMD101.PayloadData[kk] = usart_serial_getchar(&ext3_uart_module,tmp_data);
					generatedCheckSum += vBMD101.PayloadData[kk];
				}
				vBMD101.PacketCheckSum = usart_serial_getchar(&ext3_uart_module,tmp_data);
    14b4:	2248      	movs	r2, #72	; 0x48
    14b6:	494d      	ldr	r1, [pc, #308]	; (15ec <Get_PoorSignal_HeartRate+0x1f4>)
    14b8:	528b      	strh	r3, [r1, r2]
				generatedCheckSum &= 0xFF;
    14ba:	494d      	ldr	r1, [pc, #308]	; (15f0 <Get_PoorSignal_HeartRate+0x1f8>)
    14bc:	7808      	ldrb	r0, [r1, #0]
				generatedCheckSum = ~generatedCheckSum & 0xFF;
    14be:	32b7      	adds	r2, #183	; 0xb7
    14c0:	4382      	bics	r2, r0
    14c2:	600a      	str	r2, [r1, #0]
					}
				}
			}
		}
	}
	return 0;
    14c4:	2000      	movs	r0, #0
					generatedCheckSum += vBMD101.PayloadData[kk];
				}
				vBMD101.PacketCheckSum = usart_serial_getchar(&ext3_uart_module,tmp_data);
				generatedCheckSum &= 0xFF;
				generatedCheckSum = ~generatedCheckSum & 0xFF;
				if(vBMD101.PacketCheckSum == generatedCheckSum)
    14c6:	429a      	cmp	r2, r3
    14c8:	d000      	beq.n	14cc <Get_PoorSignal_HeartRate+0xd4>
    14ca:	e08a      	b.n	15e2 <Get_PoorSignal_HeartRate+0x1ea>
				{
					//printf("No touch the sensor and the value is short\n");
					vBMD101.PacketCheckSum=0;
    14cc:	4947      	ldr	r1, [pc, #284]	; (15ec <Get_PoorSignal_HeartRate+0x1f4>)
    14ce:	2300      	movs	r3, #0
    14d0:	2248      	movs	r2, #72	; 0x48
    14d2:	528b      	strh	r3, [r1, r2]
					generatedCheckSum=0;
    14d4:	4a46      	ldr	r2, [pc, #280]	; (15f0 <Get_PoorSignal_HeartRate+0x1f8>)
    14d6:	6013      	str	r3, [r2, #0]
					vBMD101.HighData= vBMD101.PayloadData[2] & 0xFFFF;
    14d8:	898b      	ldrh	r3, [r1, #12]
    14da:	634b      	str	r3, [r1, #52]	; 0x34
					vBMD101.LowData= vBMD101.PayloadData[3] & 0xFFFF;
    14dc:	8a0a      	ldrh	r2, [r1, #16]
    14de:	638a      	str	r2, [r1, #56]	; 0x38
					temp = (vBMD101.HighData)<<8;
    14e0:	021b      	lsls	r3, r3, #8
    14e2:	4945      	ldr	r1, [pc, #276]	; (15f8 <Get_PoorSignal_HeartRate+0x200>)
    14e4:	600b      	str	r3, [r1, #0]
					vBMD101.RawData = (temp|vBMD101.LowData);
    14e6:	4313      	orrs	r3, r2
					if(vBMD101.RawData > 32768)
    14e8:	2280      	movs	r2, #128	; 0x80
    14ea:	0212      	lsls	r2, r2, #8
    14ec:	4293      	cmp	r3, r2
    14ee:	d802      	bhi.n	14f6 <Get_PoorSignal_HeartRate+0xfe>
					vBMD101.PacketCheckSum=0;
					generatedCheckSum=0;
					vBMD101.HighData= vBMD101.PayloadData[2] & 0xFFFF;
					vBMD101.LowData= vBMD101.PayloadData[3] & 0xFFFF;
					temp = (vBMD101.HighData)<<8;
					vBMD101.RawData = (temp|vBMD101.LowData);
    14f0:	4a3e      	ldr	r2, [pc, #248]	; (15ec <Get_PoorSignal_HeartRate+0x1f4>)
    14f2:	63d3      	str	r3, [r2, #60]	; 0x3c
    14f4:	e004      	b.n	1500 <Get_PoorSignal_HeartRate+0x108>
					if(vBMD101.RawData > 32768)
					{
						vBMD101.RawData -= 65536;
    14f6:	4a41      	ldr	r2, [pc, #260]	; (15fc <Get_PoorSignal_HeartRate+0x204>)
    14f8:	4694      	mov	ip, r2
    14fa:	4463      	add	r3, ip
    14fc:	4a3b      	ldr	r2, [pc, #236]	; (15ec <Get_PoorSignal_HeartRate+0x1f4>)
    14fe:	63d3      	str	r3, [r2, #60]	; 0x3c
					}
					if(vBMD101.PoorSignal_Value == 0xC8)
    1500:	2342      	movs	r3, #66	; 0x42
    1502:	4a3a      	ldr	r2, [pc, #232]	; (15ec <Get_PoorSignal_HeartRate+0x1f4>)
    1504:	5ad3      	ldrh	r3, [r2, r3]
						//printf("\nRawData is %d\n",vBMD101.RawData);
						return vBMD101.RawData;
					}
					else
					{
						return 0;
    1506:	2000      	movs	r0, #0
					vBMD101.RawData = (temp|vBMD101.LowData);
					if(vBMD101.RawData > 32768)
					{
						vBMD101.RawData -= 65536;
					}
					if(vBMD101.PoorSignal_Value == 0xC8)
    1508:	2bc8      	cmp	r3, #200	; 0xc8
    150a:	d16a      	bne.n	15e2 <Get_PoorSignal_HeartRate+0x1ea>
								sprintf((char*)lsqBuffer,"LSQ: %2d ms ",lsq);
							}
						}
						*/
						//printf("\nRawData is %d\n",vBMD101.RawData);
						return vBMD101.RawData;
    150c:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    150e:	e068      	b.n	15e2 <Get_PoorSignal_HeartRate+0x1ea>
					}
				}
			}
		}
	}
	return 0;
    1510:	2000      	movs	r0, #0
					{
						return 0;
					}
				}
			}
			else if (vBMD101.Rpayload_Length == 0x12 )
    1512:	2a12      	cmp	r2, #18
    1514:	d165      	bne.n	15e2 <Get_PoorSignal_HeartRate+0x1ea>
    1516:	4c3a      	ldr	r4, [pc, #232]	; (1600 <Get_PoorSignal_HeartRate+0x208>)
    1518:	1c27      	adds	r7, r4, #0
    151a:	3748      	adds	r7, #72	; 0x48
    151c:	2500      	movs	r5, #0
 */
static inline uint8_t usart_serial_getchar(
		struct usart_module *const module,
		volatile uint8_t *c)
{
	volatile uint8_t temp = 0;
    151e:	aa02      	add	r2, sp, #8
    1520:	1d90      	adds	r0, r2, #6
    1522:	2600      	movs	r6, #0
	SercomUsart *const usart_hw = &(module->hw->USART);
	while(!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC));
    1524:	2104      	movs	r1, #4
 */
static inline uint8_t usart_serial_getchar(
		struct usart_module *const module,
		volatile uint8_t *c)
{
	volatile uint8_t temp = 0;
    1526:	7006      	strb	r6, [r0, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
	while(!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC));
    1528:	7e1a      	ldrb	r2, [r3, #24]
    152a:	420a      	tst	r2, r1
    152c:	d0fc      	beq.n	1528 <Get_PoorSignal_HeartRate+0x130>
	temp=usart_hw->DATA.bit.DATA;
    152e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    1530:	b2d2      	uxtb	r2, r2
    1532:	7002      	strb	r2, [r0, #0]
	return temp;
    1534:	7802      	ldrb	r2, [r0, #0]
    1536:	b2d2      	uxtb	r2, r2
			{
				generatedCheckSum=0;
				for( jj= 0; jj< vBMD101.Rpayload_Length; jj++)
				{
					vBMD101.PayloadData[jj] = usart_serial_getchar(&ext3_uart_module,tmp_data);
    1538:	c404      	stmia	r4!, {r2}
					generatedCheckSum += vBMD101.PayloadData[jj];
    153a:	18ad      	adds	r5, r5, r2
				}
			}
			else if (vBMD101.Rpayload_Length == 0x12 )
			{
				generatedCheckSum=0;
				for( jj= 0; jj< vBMD101.Rpayload_Length; jj++)
    153c:	42bc      	cmp	r4, r7
    153e:	d1f2      	bne.n	1526 <Get_PoorSignal_HeartRate+0x12e>
    1540:	4a2b      	ldr	r2, [pc, #172]	; (15f0 <Get_PoorSignal_HeartRate+0x1f8>)
    1542:	6015      	str	r5, [r2, #0]
    1544:	2112      	movs	r1, #18
    1546:	4a2f      	ldr	r2, [pc, #188]	; (1604 <Get_PoorSignal_HeartRate+0x20c>)
    1548:	6011      	str	r1, [r2, #0]
 */
static inline uint8_t usart_serial_getchar(
		struct usart_module *const module,
		volatile uint8_t *c)
{
	volatile uint8_t temp = 0;
    154a:	2100      	movs	r1, #0
    154c:	aa02      	add	r2, sp, #8
    154e:	71d1      	strb	r1, [r2, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);
	while(!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC));
    1550:	3104      	adds	r1, #4
    1552:	7e1a      	ldrb	r2, [r3, #24]
    1554:	420a      	tst	r2, r1
    1556:	d0fc      	beq.n	1552 <Get_PoorSignal_HeartRate+0x15a>
	temp=usart_hw->DATA.bit.DATA;
    1558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    155a:	b2db      	uxtb	r3, r3
    155c:	aa02      	add	r2, sp, #8
    155e:	71d3      	strb	r3, [r2, #7]
	return temp;
    1560:	79d3      	ldrb	r3, [r2, #7]
    1562:	b2db      	uxtb	r3, r3
				{
					vBMD101.PayloadData[jj] = usart_serial_getchar(&ext3_uart_module,tmp_data);
					generatedCheckSum += vBMD101.PayloadData[jj];
				}
				vBMD101.PacketCheckSum = usart_serial_getchar(&ext3_uart_module,tmp_data);
    1564:	2248      	movs	r2, #72	; 0x48
    1566:	4921      	ldr	r1, [pc, #132]	; (15ec <Get_PoorSignal_HeartRate+0x1f4>)
    1568:	528b      	strh	r3, [r1, r2]
				generatedCheckSum &= 0xFF;
    156a:	4921      	ldr	r1, [pc, #132]	; (15f0 <Get_PoorSignal_HeartRate+0x1f8>)
    156c:	7808      	ldrb	r0, [r1, #0]
				generatedCheckSum = ~generatedCheckSum & 0xFF;
    156e:	32b7      	adds	r2, #183	; 0xb7
    1570:	4382      	bics	r2, r0
    1572:	600a      	str	r2, [r1, #0]
					}
				}
			}
		}
	}
	return 0;
    1574:	2000      	movs	r0, #0
					generatedCheckSum += vBMD101.PayloadData[jj];
				}
				vBMD101.PacketCheckSum = usart_serial_getchar(&ext3_uart_module,tmp_data);
				generatedCheckSum &= 0xFF;
				generatedCheckSum = ~generatedCheckSum & 0xFF;
				if(vBMD101.PacketCheckSum == generatedCheckSum)
    1576:	429a      	cmp	r2, r3
    1578:	d133      	bne.n	15e2 <Get_PoorSignal_HeartRate+0x1ea>
				{
					vBMD101.PacketCheckSum=0;
    157a:	4b1c      	ldr	r3, [pc, #112]	; (15ec <Get_PoorSignal_HeartRate+0x1f4>)
    157c:	2200      	movs	r2, #0
    157e:	2148      	movs	r1, #72	; 0x48
    1580:	525a      	strh	r2, [r3, r1]
					generatedCheckSum=0;
    1582:	491b      	ldr	r1, [pc, #108]	; (15f0 <Get_PoorSignal_HeartRate+0x1f8>)
    1584:	600a      	str	r2, [r1, #0]
					for(ii=0; ii<vBMD101.Rpayload_Length;ii++)
					{
						switch(ii)
						{
							case 0:
							vBMD101.PoorSignal_Tag = vBMD101.PayloadData[0];
    1586:	889e      	ldrh	r6, [r3, #4]
    1588:	3240      	adds	r2, #64	; 0x40
    158a:	5a9a      	ldrh	r2, [r3, r2]
							break;
							case 1:
							vBMD101.PoorSignal_Value = vBMD101.PayloadData[1];
    158c:	891d      	ldrh	r5, [r3, #8]
    158e:	2142      	movs	r1, #66	; 0x42
    1590:	5a59      	ldrh	r1, [r3, r1]
							//printf("PoorSignal_Value is %d",vBMD101.PoorSignal_Value);
							break;
							case 2:
							vBMD101.HeartRate_Tag = vBMD101.PayloadData[2];
    1592:	8998      	ldrh	r0, [r3, #12]
    1594:	9001      	str	r0, [sp, #4]
    1596:	2044      	movs	r0, #68	; 0x44
    1598:	5a1c      	ldrh	r4, [r3, r0]
							break;
							case 3:
							vBMD101.HeartRate_Value = vBMD101.PayloadData[3];
    159a:	8a18      	ldrh	r0, [r3, #16]
    159c:	2746      	movs	r7, #70	; 0x46
    159e:	5bdf      	ldrh	r7, [r3, r7]
    15a0:	2300      	movs	r3, #0
				{
					vBMD101.PacketCheckSum=0;
					generatedCheckSum=0;
					for(ii=0; ii<vBMD101.Rpayload_Length;ii++)
					{
						switch(ii)
    15a2:	2b01      	cmp	r3, #1
    15a4:	d006      	beq.n	15b4 <Get_PoorSignal_HeartRate+0x1bc>
    15a6:	2b00      	cmp	r3, #0
    15a8:	d00a      	beq.n	15c0 <Get_PoorSignal_HeartRate+0x1c8>
    15aa:	2b02      	cmp	r3, #2
    15ac:	d004      	beq.n	15b8 <Get_PoorSignal_HeartRate+0x1c0>
    15ae:	2b03      	cmp	r3, #3
    15b0:	d004      	beq.n	15bc <Get_PoorSignal_HeartRate+0x1c4>
    15b2:	e006      	b.n	15c2 <Get_PoorSignal_HeartRate+0x1ca>
						{
							case 0:
							vBMD101.PoorSignal_Tag = vBMD101.PayloadData[0];
							break;
							case 1:
							vBMD101.PoorSignal_Value = vBMD101.PayloadData[1];
    15b4:	1c29      	adds	r1, r5, #0
							//printf("PoorSignal_Value is %d",vBMD101.PoorSignal_Value);
							break;
    15b6:	e004      	b.n	15c2 <Get_PoorSignal_HeartRate+0x1ca>
							case 2:
							vBMD101.HeartRate_Tag = vBMD101.PayloadData[2];
    15b8:	9c01      	ldr	r4, [sp, #4]
							break;
    15ba:	e002      	b.n	15c2 <Get_PoorSignal_HeartRate+0x1ca>
							case 3:
							vBMD101.HeartRate_Value = vBMD101.PayloadData[3];
    15bc:	1c07      	adds	r7, r0, #0
							break;
    15be:	e000      	b.n	15c2 <Get_PoorSignal_HeartRate+0x1ca>
					for(ii=0; ii<vBMD101.Rpayload_Length;ii++)
					{
						switch(ii)
						{
							case 0:
							vBMD101.PoorSignal_Tag = vBMD101.PayloadData[0];
    15c0:	1c32      	adds	r2, r6, #0
    15c2:	3301      	adds	r3, #1
				generatedCheckSum = ~generatedCheckSum & 0xFF;
				if(vBMD101.PacketCheckSum == generatedCheckSum)
				{
					vBMD101.PacketCheckSum=0;
					generatedCheckSum=0;
					for(ii=0; ii<vBMD101.Rpayload_Length;ii++)
    15c4:	2b12      	cmp	r3, #18
    15c6:	d1ec      	bne.n	15a2 <Get_PoorSignal_HeartRate+0x1aa>
    15c8:	4b08      	ldr	r3, [pc, #32]	; (15ec <Get_PoorSignal_HeartRate+0x1f4>)
    15ca:	2044      	movs	r0, #68	; 0x44
    15cc:	521c      	strh	r4, [r3, r0]
    15ce:	3002      	adds	r0, #2
    15d0:	521f      	strh	r7, [r3, r0]
    15d2:	2412      	movs	r4, #18
    15d4:	480c      	ldr	r0, [pc, #48]	; (1608 <Get_PoorSignal_HeartRate+0x210>)
    15d6:	6004      	str	r4, [r0, #0]
    15d8:	2042      	movs	r0, #66	; 0x42
    15da:	5219      	strh	r1, [r3, r0]
    15dc:	2140      	movs	r1, #64	; 0x40
    15de:	525a      	strh	r2, [r3, r1]
					}
				}
			}
		}
	}
	return 0;
    15e0:	2000      	movs	r0, #0
}
    15e2:	b005      	add	sp, #20
    15e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15e6:	46c0      	nop			; (mov r8, r8)
    15e8:	200001a8 	.word	0x200001a8
    15ec:	20000154 	.word	0x20000154
    15f0:	200000c4 	.word	0x200000c4
    15f4:	200001a4 	.word	0x200001a4
    15f8:	2000014c 	.word	0x2000014c
    15fc:	ffff0000 	.word	0xffff0000
    1600:	20000158 	.word	0x20000158
    1604:	20000148 	.word	0x20000148
    1608:	200001a0 	.word	0x200001a0

0000160c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline uint8_t usart_serial_getchar(
		struct usart_module *const module,
		volatile uint8_t *c)
{
    160c:	b082      	sub	sp, #8
	volatile uint8_t temp = 0;
    160e:	2200      	movs	r2, #0
    1610:	466b      	mov	r3, sp
    1612:	71da      	strb	r2, [r3, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1614:	6802      	ldr	r2, [r0, #0]
	while(!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC));
    1616:	2104      	movs	r1, #4
    1618:	7e13      	ldrb	r3, [r2, #24]
    161a:	420b      	tst	r3, r1
    161c:	d0fc      	beq.n	1618 <usart_serial_getchar+0xc>
	temp=usart_hw->DATA.bit.DATA;
    161e:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1620:	b2db      	uxtb	r3, r3
    1622:	466a      	mov	r2, sp
    1624:	71d3      	strb	r3, [r2, #7]
	return temp;
    1626:	79d0      	ldrb	r0, [r2, #7]
    1628:	b2c0      	uxtb	r0, r0
}
    162a:	b002      	add	sp, #8
    162c:	4770      	bx	lr
    162e:	46c0      	nop			; (mov r8, r8)

00001630 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    1630:	b570      	push	{r4, r5, r6, lr}
    1632:	1c05      	adds	r5, r0, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    1634:	b28c      	uxth	r4, r1
    1636:	4e03      	ldr	r6, [pc, #12]	; (1644 <usart_serial_putchar+0x14>)
    1638:	1c28      	adds	r0, r5, #0
    163a:	1c21      	adds	r1, r4, #0
    163c:	47b0      	blx	r6
    163e:	2800      	cmp	r0, #0
    1640:	d1fa      	bne.n	1638 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    1642:	bd70      	pop	{r4, r5, r6, pc}
    1644:	00000b71 	.word	0x00000b71

00001648 <main>:
	usart_enable(&ext3_uart_module);
}

	
int main(void)
{
    1648:	b5f0      	push	{r4, r5, r6, r7, lr}
    164a:	b09b      	sub	sp, #108	; 0x6c
	struct port_config pin;

	volatile uint8_t raw_data=0;
    164c:	2400      	movs	r4, #0
    164e:	2500      	movs	r5, #0
    1650:	2363      	movs	r3, #99	; 0x63
    1652:	446b      	add	r3, sp
    1654:	701c      	strb	r4, [r3, #0]
	system_init();
    1656:	4b42      	ldr	r3, [pc, #264]	; (1760 <main+0x118>)
    1658:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    165a:	aa01      	add	r2, sp, #4
    165c:	2380      	movs	r3, #128	; 0x80
    165e:	05db      	lsls	r3, r3, #23
    1660:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1662:	6054      	str	r4, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    1664:	23ff      	movs	r3, #255	; 0xff
    1666:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    1668:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    166a:	72d4      	strb	r4, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    166c:	2601      	movs	r6, #1
    166e:	3bbf      	subs	r3, #191	; 0xbf
    1670:	54d6      	strb	r6, [r2, r3]
	config->transmitter_enable = true;
    1672:	3301      	adds	r3, #1
    1674:	54d6      	strb	r6, [r2, r3]
	config->clock_polarity_inverted = false;
    1676:	3301      	adds	r3, #1
    1678:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
    167a:	3301      	adds	r3, #1
    167c:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
    167e:	6454      	str	r4, [r2, #68]	; 0x44
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1680:	3305      	adds	r3, #5
    1682:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    1684:	3301      	adds	r3, #1
    1686:	54d4      	strb	r4, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1688:	6154      	str	r4, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    168a:	8214      	strh	r4, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    168c:	2300      	movs	r3, #0
    168e:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1690:	7615      	strb	r5, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1692:	7715      	strb	r5, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1694:	7655      	strb	r5, [r2, #25]
	config->receive_pulse_length                    = 19;
    1696:	2313      	movs	r3, #19
    1698:	7693      	strb	r3, [r2, #26]
#endif
#ifdef FEATURE_USART_ISO7816
	config->iso7816_config.enabled                  = false;
    169a:	330d      	adds	r3, #13
    169c:	54d5      	strb	r5, [r2, r3]
	config->iso7816_config.guard_time               = ISO7816_GUARD_TIME_2_BIT;
    169e:	2102      	movs	r1, #2
    16a0:	3309      	adds	r3, #9
    16a2:	54d1      	strb	r1, [r2, r3]
	config->iso7816_config.protocol_t               = ISO7816_PROTOCOL_T_0;
    16a4:	2380      	movs	r3, #128	; 0x80
    16a6:	055b      	lsls	r3, r3, #21
    16a8:	6253      	str	r3, [r2, #36]	; 0x24
	config->iso7816_config.enable_inverse           = false;
    16aa:	2328      	movs	r3, #40	; 0x28
    16ac:	54d5      	strb	r5, [r2, r3]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
    16ae:	62d4      	str	r4, [r2, #44]	; 0x2c
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
    16b0:	6314      	str	r4, [r2, #48]	; 0x30
	config->iso7816_config.max_iterations           = 7;
    16b2:	3b21      	subs	r3, #33	; 0x21
    16b4:	6353      	str	r3, [r2, #52]	; 0x34
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    16b6:	3332      	adds	r3, #50	; 0x32
    16b8:	54d5      	strb	r5, [r2, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    16ba:	3b01      	subs	r3, #1
    16bc:	54d5      	strb	r5, [r2, r3]
 */
static void configure_console(void)
{
	struct usart_config usart_conf;
	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = EXT3_UART_SERCOM_MUX_SETTING ;
    16be:	23c4      	movs	r3, #196	; 0xc4
    16c0:	039b      	lsls	r3, r3, #14
    16c2:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EXT3_UART_SERCOM_PINMUX_PAD0;
    16c4:	2301      	movs	r3, #1
    16c6:	425b      	negs	r3, r3
    16c8:	64d3      	str	r3, [r2, #76]	; 0x4c
	usart_conf.pinmux_pad1 = EXT3_UART_SERCOM_PINMUX_PAD1;
    16ca:	6513      	str	r3, [r2, #80]	; 0x50
	usart_conf.pinmux_pad2 = EXT3_UART_SERCOM_PINMUX_PAD2;
    16cc:	4b25      	ldr	r3, [pc, #148]	; (1764 <main+0x11c>)
    16ce:	6553      	str	r3, [r2, #84]	; 0x54
	usart_conf.pinmux_pad3 = EXT3_UART_SERCOM_PINMUX_PAD3;
    16d0:	4b25      	ldr	r3, [pc, #148]	; (1768 <main+0x120>)
    16d2:	6593      	str	r3, [r2, #88]	; 0x58
	usart_conf.baudrate    = 57600;
    16d4:	23e1      	movs	r3, #225	; 0xe1
    16d6:	021b      	lsls	r3, r3, #8
    16d8:	63d3      	str	r3, [r2, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    16da:	4c24      	ldr	r4, [pc, #144]	; (176c <main+0x124>)
    16dc:	4b24      	ldr	r3, [pc, #144]	; (1770 <main+0x128>)
    16de:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    16e0:	4924      	ldr	r1, [pc, #144]	; (1774 <main+0x12c>)
    16e2:	4b25      	ldr	r3, [pc, #148]	; (1778 <main+0x130>)
    16e4:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    16e6:	4925      	ldr	r1, [pc, #148]	; (177c <main+0x134>)
    16e8:	4b25      	ldr	r3, [pc, #148]	; (1780 <main+0x138>)
    16ea:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    16ec:	1c20      	adds	r0, r4, #0
    16ee:	4925      	ldr	r1, [pc, #148]	; (1784 <main+0x13c>)
    16f0:	4b25      	ldr	r3, [pc, #148]	; (1788 <main+0x140>)
    16f2:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    16f4:	4f25      	ldr	r7, [pc, #148]	; (178c <main+0x144>)
    16f6:	683b      	ldr	r3, [r7, #0]
    16f8:	6898      	ldr	r0, [r3, #8]
    16fa:	2100      	movs	r1, #0
    16fc:	4d24      	ldr	r5, [pc, #144]	; (1790 <main+0x148>)
    16fe:	47a8      	blx	r5
	setbuf(stdin, NULL);
    1700:	683b      	ldr	r3, [r7, #0]
    1702:	6858      	ldr	r0, [r3, #4]
    1704:	2100      	movs	r1, #0
    1706:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1708:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    170a:	1c28      	adds	r0, r5, #0
    170c:	4b21      	ldr	r3, [pc, #132]	; (1794 <main+0x14c>)
    170e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1710:	231f      	movs	r3, #31
    1712:	4018      	ands	r0, r3
    1714:	4086      	lsls	r6, r0
    1716:	4b20      	ldr	r3, [pc, #128]	; (1798 <main+0x150>)
    1718:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    171a:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    171c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    171e:	2a00      	cmp	r2, #0
    1720:	d1fc      	bne.n	171c <main+0xd4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1722:	682a      	ldr	r2, [r5, #0]
    1724:	2302      	movs	r3, #2
    1726:	4313      	orrs	r3, r2
    1728:	602b      	str	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    172a:	a919      	add	r1, sp, #100	; 0x64
    172c:	2301      	movs	r3, #1
    172e:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    1730:	2200      	movs	r2, #0
    1732:	708a      	strb	r2, [r1, #2]
	/*Configure UART console.*/
    configure_console();
	/* Output example information */
    /*Configures PORT for LED0*/
	port_get_config_defaults(&pin);
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1734:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(LED0_PIN, &pin);
    1736:	205b      	movs	r0, #91	; 0x5b
    1738:	4b18      	ldr	r3, [pc, #96]	; (179c <main+0x154>)
    173a:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    173c:	2280      	movs	r2, #128	; 0x80
    173e:	0512      	lsls	r2, r2, #20
    1740:	4b17      	ldr	r3, [pc, #92]	; (17a0 <main+0x158>)
    1742:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
	/*main loop*/
	while(1)
	{ 
		raw_data = Get_PoorSignal_HeartRate();
    1744:	4e17      	ldr	r6, [pc, #92]	; (17a4 <main+0x15c>)
		
		/***************printf the raw data**************/
		printf("\nRaw_data is %d\n",raw_data);
    1746:	4c18      	ldr	r4, [pc, #96]	; (17a8 <main+0x160>)
    1748:	4d18      	ldr	r5, [pc, #96]	; (17ac <main+0x164>)
	port_pin_set_config(LED0_PIN, &pin);
	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
	/*main loop*/
	while(1)
	{ 
		raw_data = Get_PoorSignal_HeartRate();
    174a:	47b0      	blx	r6
    174c:	b2c0      	uxtb	r0, r0
    174e:	2363      	movs	r3, #99	; 0x63
    1750:	446b      	add	r3, sp
    1752:	7018      	strb	r0, [r3, #0]
		
		/***************printf the raw data**************/
		printf("\nRaw_data is %d\n",raw_data);
    1754:	7819      	ldrb	r1, [r3, #0]
    1756:	b2c9      	uxtb	r1, r1
    1758:	1c20      	adds	r0, r4, #0
    175a:	47a8      	blx	r5
			
	}
    175c:	e7f5      	b.n	174a <main+0x102>
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	000011bd 	.word	0x000011bd
    1764:	000e0002 	.word	0x000e0002
    1768:	000f0002 	.word	0x000f0002
    176c:	200001a8 	.word	0x200001a8
    1770:	20000144 	.word	0x20000144
    1774:	00001631 	.word	0x00001631
    1778:	20000140 	.word	0x20000140
    177c:	0000160d 	.word	0x0000160d
    1780:	2000013c 	.word	0x2000013c
    1784:	42001400 	.word	0x42001400
    1788:	000007b1 	.word	0x000007b1
    178c:	20000064 	.word	0x20000064
    1790:	000019cd 	.word	0x000019cd
    1794:	00000725 	.word	0x00000725
    1798:	e000e100 	.word	0xe000e100
    179c:	000002bd 	.word	0x000002bd
    17a0:	41006100 	.word	0x41006100
    17a4:	000013f9 	.word	0x000013f9
    17a8:	0000290c 	.word	0x0000290c
    17ac:	00001999 	.word	0x00001999

000017b0 <__aeabi_uidiv>:
    17b0:	2200      	movs	r2, #0
    17b2:	0843      	lsrs	r3, r0, #1
    17b4:	428b      	cmp	r3, r1
    17b6:	d374      	bcc.n	18a2 <__aeabi_uidiv+0xf2>
    17b8:	0903      	lsrs	r3, r0, #4
    17ba:	428b      	cmp	r3, r1
    17bc:	d35f      	bcc.n	187e <__aeabi_uidiv+0xce>
    17be:	0a03      	lsrs	r3, r0, #8
    17c0:	428b      	cmp	r3, r1
    17c2:	d344      	bcc.n	184e <__aeabi_uidiv+0x9e>
    17c4:	0b03      	lsrs	r3, r0, #12
    17c6:	428b      	cmp	r3, r1
    17c8:	d328      	bcc.n	181c <__aeabi_uidiv+0x6c>
    17ca:	0c03      	lsrs	r3, r0, #16
    17cc:	428b      	cmp	r3, r1
    17ce:	d30d      	bcc.n	17ec <__aeabi_uidiv+0x3c>
    17d0:	22ff      	movs	r2, #255	; 0xff
    17d2:	0209      	lsls	r1, r1, #8
    17d4:	ba12      	rev	r2, r2
    17d6:	0c03      	lsrs	r3, r0, #16
    17d8:	428b      	cmp	r3, r1
    17da:	d302      	bcc.n	17e2 <__aeabi_uidiv+0x32>
    17dc:	1212      	asrs	r2, r2, #8
    17de:	0209      	lsls	r1, r1, #8
    17e0:	d065      	beq.n	18ae <__aeabi_uidiv+0xfe>
    17e2:	0b03      	lsrs	r3, r0, #12
    17e4:	428b      	cmp	r3, r1
    17e6:	d319      	bcc.n	181c <__aeabi_uidiv+0x6c>
    17e8:	e000      	b.n	17ec <__aeabi_uidiv+0x3c>
    17ea:	0a09      	lsrs	r1, r1, #8
    17ec:	0bc3      	lsrs	r3, r0, #15
    17ee:	428b      	cmp	r3, r1
    17f0:	d301      	bcc.n	17f6 <__aeabi_uidiv+0x46>
    17f2:	03cb      	lsls	r3, r1, #15
    17f4:	1ac0      	subs	r0, r0, r3
    17f6:	4152      	adcs	r2, r2
    17f8:	0b83      	lsrs	r3, r0, #14
    17fa:	428b      	cmp	r3, r1
    17fc:	d301      	bcc.n	1802 <__aeabi_uidiv+0x52>
    17fe:	038b      	lsls	r3, r1, #14
    1800:	1ac0      	subs	r0, r0, r3
    1802:	4152      	adcs	r2, r2
    1804:	0b43      	lsrs	r3, r0, #13
    1806:	428b      	cmp	r3, r1
    1808:	d301      	bcc.n	180e <__aeabi_uidiv+0x5e>
    180a:	034b      	lsls	r3, r1, #13
    180c:	1ac0      	subs	r0, r0, r3
    180e:	4152      	adcs	r2, r2
    1810:	0b03      	lsrs	r3, r0, #12
    1812:	428b      	cmp	r3, r1
    1814:	d301      	bcc.n	181a <__aeabi_uidiv+0x6a>
    1816:	030b      	lsls	r3, r1, #12
    1818:	1ac0      	subs	r0, r0, r3
    181a:	4152      	adcs	r2, r2
    181c:	0ac3      	lsrs	r3, r0, #11
    181e:	428b      	cmp	r3, r1
    1820:	d301      	bcc.n	1826 <__aeabi_uidiv+0x76>
    1822:	02cb      	lsls	r3, r1, #11
    1824:	1ac0      	subs	r0, r0, r3
    1826:	4152      	adcs	r2, r2
    1828:	0a83      	lsrs	r3, r0, #10
    182a:	428b      	cmp	r3, r1
    182c:	d301      	bcc.n	1832 <__aeabi_uidiv+0x82>
    182e:	028b      	lsls	r3, r1, #10
    1830:	1ac0      	subs	r0, r0, r3
    1832:	4152      	adcs	r2, r2
    1834:	0a43      	lsrs	r3, r0, #9
    1836:	428b      	cmp	r3, r1
    1838:	d301      	bcc.n	183e <__aeabi_uidiv+0x8e>
    183a:	024b      	lsls	r3, r1, #9
    183c:	1ac0      	subs	r0, r0, r3
    183e:	4152      	adcs	r2, r2
    1840:	0a03      	lsrs	r3, r0, #8
    1842:	428b      	cmp	r3, r1
    1844:	d301      	bcc.n	184a <__aeabi_uidiv+0x9a>
    1846:	020b      	lsls	r3, r1, #8
    1848:	1ac0      	subs	r0, r0, r3
    184a:	4152      	adcs	r2, r2
    184c:	d2cd      	bcs.n	17ea <__aeabi_uidiv+0x3a>
    184e:	09c3      	lsrs	r3, r0, #7
    1850:	428b      	cmp	r3, r1
    1852:	d301      	bcc.n	1858 <__aeabi_uidiv+0xa8>
    1854:	01cb      	lsls	r3, r1, #7
    1856:	1ac0      	subs	r0, r0, r3
    1858:	4152      	adcs	r2, r2
    185a:	0983      	lsrs	r3, r0, #6
    185c:	428b      	cmp	r3, r1
    185e:	d301      	bcc.n	1864 <__aeabi_uidiv+0xb4>
    1860:	018b      	lsls	r3, r1, #6
    1862:	1ac0      	subs	r0, r0, r3
    1864:	4152      	adcs	r2, r2
    1866:	0943      	lsrs	r3, r0, #5
    1868:	428b      	cmp	r3, r1
    186a:	d301      	bcc.n	1870 <__aeabi_uidiv+0xc0>
    186c:	014b      	lsls	r3, r1, #5
    186e:	1ac0      	subs	r0, r0, r3
    1870:	4152      	adcs	r2, r2
    1872:	0903      	lsrs	r3, r0, #4
    1874:	428b      	cmp	r3, r1
    1876:	d301      	bcc.n	187c <__aeabi_uidiv+0xcc>
    1878:	010b      	lsls	r3, r1, #4
    187a:	1ac0      	subs	r0, r0, r3
    187c:	4152      	adcs	r2, r2
    187e:	08c3      	lsrs	r3, r0, #3
    1880:	428b      	cmp	r3, r1
    1882:	d301      	bcc.n	1888 <__aeabi_uidiv+0xd8>
    1884:	00cb      	lsls	r3, r1, #3
    1886:	1ac0      	subs	r0, r0, r3
    1888:	4152      	adcs	r2, r2
    188a:	0883      	lsrs	r3, r0, #2
    188c:	428b      	cmp	r3, r1
    188e:	d301      	bcc.n	1894 <__aeabi_uidiv+0xe4>
    1890:	008b      	lsls	r3, r1, #2
    1892:	1ac0      	subs	r0, r0, r3
    1894:	4152      	adcs	r2, r2
    1896:	0843      	lsrs	r3, r0, #1
    1898:	428b      	cmp	r3, r1
    189a:	d301      	bcc.n	18a0 <__aeabi_uidiv+0xf0>
    189c:	004b      	lsls	r3, r1, #1
    189e:	1ac0      	subs	r0, r0, r3
    18a0:	4152      	adcs	r2, r2
    18a2:	1a41      	subs	r1, r0, r1
    18a4:	d200      	bcs.n	18a8 <__aeabi_uidiv+0xf8>
    18a6:	4601      	mov	r1, r0
    18a8:	4152      	adcs	r2, r2
    18aa:	4610      	mov	r0, r2
    18ac:	4770      	bx	lr
    18ae:	e7ff      	b.n	18b0 <__aeabi_uidiv+0x100>
    18b0:	b501      	push	{r0, lr}
    18b2:	2000      	movs	r0, #0
    18b4:	f000 f80c 	bl	18d0 <__aeabi_idiv0>
    18b8:	bd02      	pop	{r1, pc}
    18ba:	46c0      	nop			; (mov r8, r8)

000018bc <__aeabi_uidivmod>:
    18bc:	2900      	cmp	r1, #0
    18be:	d0f7      	beq.n	18b0 <__aeabi_uidiv+0x100>
    18c0:	b503      	push	{r0, r1, lr}
    18c2:	f7ff ff75 	bl	17b0 <__aeabi_uidiv>
    18c6:	bc0e      	pop	{r1, r2, r3}
    18c8:	4342      	muls	r2, r0
    18ca:	1a89      	subs	r1, r1, r2
    18cc:	4718      	bx	r3
    18ce:	46c0      	nop			; (mov r8, r8)

000018d0 <__aeabi_idiv0>:
    18d0:	4770      	bx	lr
    18d2:	46c0      	nop			; (mov r8, r8)

000018d4 <__aeabi_lmul>:
    18d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18d6:	464f      	mov	r7, r9
    18d8:	4646      	mov	r6, r8
    18da:	0405      	lsls	r5, r0, #16
    18dc:	0c2d      	lsrs	r5, r5, #16
    18de:	1c2c      	adds	r4, r5, #0
    18e0:	b4c0      	push	{r6, r7}
    18e2:	0417      	lsls	r7, r2, #16
    18e4:	0c16      	lsrs	r6, r2, #16
    18e6:	0c3f      	lsrs	r7, r7, #16
    18e8:	4699      	mov	r9, r3
    18ea:	0c03      	lsrs	r3, r0, #16
    18ec:	437c      	muls	r4, r7
    18ee:	4375      	muls	r5, r6
    18f0:	435f      	muls	r7, r3
    18f2:	4373      	muls	r3, r6
    18f4:	197d      	adds	r5, r7, r5
    18f6:	0c26      	lsrs	r6, r4, #16
    18f8:	19ad      	adds	r5, r5, r6
    18fa:	469c      	mov	ip, r3
    18fc:	42af      	cmp	r7, r5
    18fe:	d903      	bls.n	1908 <__aeabi_lmul+0x34>
    1900:	2380      	movs	r3, #128	; 0x80
    1902:	025b      	lsls	r3, r3, #9
    1904:	4698      	mov	r8, r3
    1906:	44c4      	add	ip, r8
    1908:	464b      	mov	r3, r9
    190a:	4351      	muls	r1, r2
    190c:	4343      	muls	r3, r0
    190e:	0424      	lsls	r4, r4, #16
    1910:	0c2e      	lsrs	r6, r5, #16
    1912:	0c24      	lsrs	r4, r4, #16
    1914:	042d      	lsls	r5, r5, #16
    1916:	4466      	add	r6, ip
    1918:	192c      	adds	r4, r5, r4
    191a:	1859      	adds	r1, r3, r1
    191c:	1989      	adds	r1, r1, r6
    191e:	1c20      	adds	r0, r4, #0
    1920:	bc0c      	pop	{r2, r3}
    1922:	4690      	mov	r8, r2
    1924:	4699      	mov	r9, r3
    1926:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001928 <__libc_init_array>:
    1928:	4b0e      	ldr	r3, [pc, #56]	; (1964 <__libc_init_array+0x3c>)
    192a:	b570      	push	{r4, r5, r6, lr}
    192c:	2500      	movs	r5, #0
    192e:	1c1e      	adds	r6, r3, #0
    1930:	4c0d      	ldr	r4, [pc, #52]	; (1968 <__libc_init_array+0x40>)
    1932:	1ae4      	subs	r4, r4, r3
    1934:	10a4      	asrs	r4, r4, #2
    1936:	42a5      	cmp	r5, r4
    1938:	d004      	beq.n	1944 <__libc_init_array+0x1c>
    193a:	00ab      	lsls	r3, r5, #2
    193c:	58f3      	ldr	r3, [r6, r3]
    193e:	4798      	blx	r3
    1940:	3501      	adds	r5, #1
    1942:	e7f8      	b.n	1936 <__libc_init_array+0xe>
    1944:	f001 f83a 	bl	29bc <_init>
    1948:	4b08      	ldr	r3, [pc, #32]	; (196c <__libc_init_array+0x44>)
    194a:	2500      	movs	r5, #0
    194c:	1c1e      	adds	r6, r3, #0
    194e:	4c08      	ldr	r4, [pc, #32]	; (1970 <__libc_init_array+0x48>)
    1950:	1ae4      	subs	r4, r4, r3
    1952:	10a4      	asrs	r4, r4, #2
    1954:	42a5      	cmp	r5, r4
    1956:	d004      	beq.n	1962 <__libc_init_array+0x3a>
    1958:	00ab      	lsls	r3, r5, #2
    195a:	58f3      	ldr	r3, [r6, r3]
    195c:	4798      	blx	r3
    195e:	3501      	adds	r5, #1
    1960:	e7f8      	b.n	1954 <__libc_init_array+0x2c>
    1962:	bd70      	pop	{r4, r5, r6, pc}
    1964:	000029c8 	.word	0x000029c8
    1968:	000029c8 	.word	0x000029c8
    196c:	000029c8 	.word	0x000029c8
    1970:	000029cc 	.word	0x000029cc

00001974 <memcpy>:
    1974:	2300      	movs	r3, #0
    1976:	b510      	push	{r4, lr}
    1978:	4293      	cmp	r3, r2
    197a:	d003      	beq.n	1984 <memcpy+0x10>
    197c:	5ccc      	ldrb	r4, [r1, r3]
    197e:	54c4      	strb	r4, [r0, r3]
    1980:	3301      	adds	r3, #1
    1982:	e7f9      	b.n	1978 <memcpy+0x4>
    1984:	bd10      	pop	{r4, pc}

00001986 <memset>:
    1986:	1c03      	adds	r3, r0, #0
    1988:	1882      	adds	r2, r0, r2
    198a:	4293      	cmp	r3, r2
    198c:	d002      	beq.n	1994 <memset+0xe>
    198e:	7019      	strb	r1, [r3, #0]
    1990:	3301      	adds	r3, #1
    1992:	e7fa      	b.n	198a <memset+0x4>
    1994:	4770      	bx	lr
	...

00001998 <iprintf>:
    1998:	b40f      	push	{r0, r1, r2, r3}
    199a:	4b0b      	ldr	r3, [pc, #44]	; (19c8 <iprintf+0x30>)
    199c:	b513      	push	{r0, r1, r4, lr}
    199e:	681c      	ldr	r4, [r3, #0]
    19a0:	2c00      	cmp	r4, #0
    19a2:	d005      	beq.n	19b0 <iprintf+0x18>
    19a4:	69a3      	ldr	r3, [r4, #24]
    19a6:	2b00      	cmp	r3, #0
    19a8:	d102      	bne.n	19b0 <iprintf+0x18>
    19aa:	1c20      	adds	r0, r4, #0
    19ac:	f000 f996 	bl	1cdc <__sinit>
    19b0:	ab05      	add	r3, sp, #20
    19b2:	1c20      	adds	r0, r4, #0
    19b4:	68a1      	ldr	r1, [r4, #8]
    19b6:	9a04      	ldr	r2, [sp, #16]
    19b8:	9301      	str	r3, [sp, #4]
    19ba:	f000 faf1 	bl	1fa0 <_vfiprintf_r>
    19be:	bc16      	pop	{r1, r2, r4}
    19c0:	bc08      	pop	{r3}
    19c2:	b004      	add	sp, #16
    19c4:	4718      	bx	r3
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	20000064 	.word	0x20000064

000019cc <setbuf>:
    19cc:	b508      	push	{r3, lr}
    19ce:	424a      	negs	r2, r1
    19d0:	414a      	adcs	r2, r1
    19d2:	2380      	movs	r3, #128	; 0x80
    19d4:	0052      	lsls	r2, r2, #1
    19d6:	00db      	lsls	r3, r3, #3
    19d8:	f000 f802 	bl	19e0 <setvbuf>
    19dc:	bd08      	pop	{r3, pc}
	...

000019e0 <setvbuf>:
    19e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    19e2:	1c1e      	adds	r6, r3, #0
    19e4:	4b3c      	ldr	r3, [pc, #240]	; (1ad8 <setvbuf+0xf8>)
    19e6:	1c04      	adds	r4, r0, #0
    19e8:	681d      	ldr	r5, [r3, #0]
    19ea:	1c0f      	adds	r7, r1, #0
    19ec:	9201      	str	r2, [sp, #4]
    19ee:	2d00      	cmp	r5, #0
    19f0:	d005      	beq.n	19fe <setvbuf+0x1e>
    19f2:	69ab      	ldr	r3, [r5, #24]
    19f4:	2b00      	cmp	r3, #0
    19f6:	d102      	bne.n	19fe <setvbuf+0x1e>
    19f8:	1c28      	adds	r0, r5, #0
    19fa:	f000 f96f 	bl	1cdc <__sinit>
    19fe:	4b37      	ldr	r3, [pc, #220]	; (1adc <setvbuf+0xfc>)
    1a00:	429c      	cmp	r4, r3
    1a02:	d101      	bne.n	1a08 <setvbuf+0x28>
    1a04:	686c      	ldr	r4, [r5, #4]
    1a06:	e008      	b.n	1a1a <setvbuf+0x3a>
    1a08:	4b35      	ldr	r3, [pc, #212]	; (1ae0 <setvbuf+0x100>)
    1a0a:	429c      	cmp	r4, r3
    1a0c:	d101      	bne.n	1a12 <setvbuf+0x32>
    1a0e:	68ac      	ldr	r4, [r5, #8]
    1a10:	e003      	b.n	1a1a <setvbuf+0x3a>
    1a12:	4b34      	ldr	r3, [pc, #208]	; (1ae4 <setvbuf+0x104>)
    1a14:	429c      	cmp	r4, r3
    1a16:	d100      	bne.n	1a1a <setvbuf+0x3a>
    1a18:	68ec      	ldr	r4, [r5, #12]
    1a1a:	9b01      	ldr	r3, [sp, #4]
    1a1c:	2b02      	cmp	r3, #2
    1a1e:	d858      	bhi.n	1ad2 <setvbuf+0xf2>
    1a20:	2e00      	cmp	r6, #0
    1a22:	db56      	blt.n	1ad2 <setvbuf+0xf2>
    1a24:	1c28      	adds	r0, r5, #0
    1a26:	1c21      	adds	r1, r4, #0
    1a28:	f000 f8ea 	bl	1c00 <_fflush_r>
    1a2c:	2300      	movs	r3, #0
    1a2e:	6063      	str	r3, [r4, #4]
    1a30:	61a3      	str	r3, [r4, #24]
    1a32:	89a3      	ldrh	r3, [r4, #12]
    1a34:	061b      	lsls	r3, r3, #24
    1a36:	d503      	bpl.n	1a40 <setvbuf+0x60>
    1a38:	1c28      	adds	r0, r5, #0
    1a3a:	6921      	ldr	r1, [r4, #16]
    1a3c:	f000 f9ea 	bl	1e14 <_free_r>
    1a40:	2283      	movs	r2, #131	; 0x83
    1a42:	89a3      	ldrh	r3, [r4, #12]
    1a44:	4393      	bics	r3, r2
    1a46:	81a3      	strh	r3, [r4, #12]
    1a48:	9b01      	ldr	r3, [sp, #4]
    1a4a:	2b02      	cmp	r3, #2
    1a4c:	d013      	beq.n	1a76 <setvbuf+0x96>
    1a4e:	2f00      	cmp	r7, #0
    1a50:	d125      	bne.n	1a9e <setvbuf+0xbe>
    1a52:	2e00      	cmp	r6, #0
    1a54:	d101      	bne.n	1a5a <setvbuf+0x7a>
    1a56:	2680      	movs	r6, #128	; 0x80
    1a58:	00f6      	lsls	r6, r6, #3
    1a5a:	1c30      	adds	r0, r6, #0
    1a5c:	f000 f9d0 	bl	1e00 <malloc>
    1a60:	1e07      	subs	r7, r0, #0
    1a62:	d118      	bne.n	1a96 <setvbuf+0xb6>
    1a64:	2080      	movs	r0, #128	; 0x80
    1a66:	00c0      	lsls	r0, r0, #3
    1a68:	f000 f9ca 	bl	1e00 <malloc>
    1a6c:	1e07      	subs	r7, r0, #0
    1a6e:	d110      	bne.n	1a92 <setvbuf+0xb2>
    1a70:	2001      	movs	r0, #1
    1a72:	4240      	negs	r0, r0
    1a74:	e000      	b.n	1a78 <setvbuf+0x98>
    1a76:	2000      	movs	r0, #0
    1a78:	2202      	movs	r2, #2
    1a7a:	89a3      	ldrh	r3, [r4, #12]
    1a7c:	4313      	orrs	r3, r2
    1a7e:	81a3      	strh	r3, [r4, #12]
    1a80:	2300      	movs	r3, #0
    1a82:	60a3      	str	r3, [r4, #8]
    1a84:	1c23      	adds	r3, r4, #0
    1a86:	3347      	adds	r3, #71	; 0x47
    1a88:	6023      	str	r3, [r4, #0]
    1a8a:	6123      	str	r3, [r4, #16]
    1a8c:	2301      	movs	r3, #1
    1a8e:	6163      	str	r3, [r4, #20]
    1a90:	e021      	b.n	1ad6 <setvbuf+0xf6>
    1a92:	2680      	movs	r6, #128	; 0x80
    1a94:	00f6      	lsls	r6, r6, #3
    1a96:	2280      	movs	r2, #128	; 0x80
    1a98:	89a3      	ldrh	r3, [r4, #12]
    1a9a:	4313      	orrs	r3, r2
    1a9c:	81a3      	strh	r3, [r4, #12]
    1a9e:	9b01      	ldr	r3, [sp, #4]
    1aa0:	2b01      	cmp	r3, #1
    1aa2:	d105      	bne.n	1ab0 <setvbuf+0xd0>
    1aa4:	89a3      	ldrh	r3, [r4, #12]
    1aa6:	9a01      	ldr	r2, [sp, #4]
    1aa8:	431a      	orrs	r2, r3
    1aaa:	4273      	negs	r3, r6
    1aac:	81a2      	strh	r2, [r4, #12]
    1aae:	61a3      	str	r3, [r4, #24]
    1ab0:	4b0d      	ldr	r3, [pc, #52]	; (1ae8 <setvbuf+0x108>)
    1ab2:	2000      	movs	r0, #0
    1ab4:	62ab      	str	r3, [r5, #40]	; 0x28
    1ab6:	89a2      	ldrh	r2, [r4, #12]
    1ab8:	6027      	str	r7, [r4, #0]
    1aba:	6127      	str	r7, [r4, #16]
    1abc:	6166      	str	r6, [r4, #20]
    1abe:	0713      	lsls	r3, r2, #28
    1ac0:	d509      	bpl.n	1ad6 <setvbuf+0xf6>
    1ac2:	2303      	movs	r3, #3
    1ac4:	401a      	ands	r2, r3
    1ac6:	4253      	negs	r3, r2
    1ac8:	4153      	adcs	r3, r2
    1aca:	425b      	negs	r3, r3
    1acc:	401e      	ands	r6, r3
    1ace:	60a6      	str	r6, [r4, #8]
    1ad0:	e001      	b.n	1ad6 <setvbuf+0xf6>
    1ad2:	2001      	movs	r0, #1
    1ad4:	4240      	negs	r0, r0
    1ad6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1ad8:	20000064 	.word	0x20000064
    1adc:	00002928 	.word	0x00002928
    1ae0:	00002948 	.word	0x00002948
    1ae4:	00002968 	.word	0x00002968
    1ae8:	00001c59 	.word	0x00001c59

00001aec <__sflush_r>:
    1aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1aee:	898a      	ldrh	r2, [r1, #12]
    1af0:	1c05      	adds	r5, r0, #0
    1af2:	1c0c      	adds	r4, r1, #0
    1af4:	0713      	lsls	r3, r2, #28
    1af6:	d45e      	bmi.n	1bb6 <__sflush_r+0xca>
    1af8:	684b      	ldr	r3, [r1, #4]
    1afa:	2b00      	cmp	r3, #0
    1afc:	dc02      	bgt.n	1b04 <__sflush_r+0x18>
    1afe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1b00:	2b00      	cmp	r3, #0
    1b02:	dd1a      	ble.n	1b3a <__sflush_r+0x4e>
    1b04:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1b06:	2f00      	cmp	r7, #0
    1b08:	d017      	beq.n	1b3a <__sflush_r+0x4e>
    1b0a:	2300      	movs	r3, #0
    1b0c:	682e      	ldr	r6, [r5, #0]
    1b0e:	602b      	str	r3, [r5, #0]
    1b10:	2380      	movs	r3, #128	; 0x80
    1b12:	015b      	lsls	r3, r3, #5
    1b14:	401a      	ands	r2, r3
    1b16:	d001      	beq.n	1b1c <__sflush_r+0x30>
    1b18:	6d62      	ldr	r2, [r4, #84]	; 0x54
    1b1a:	e015      	b.n	1b48 <__sflush_r+0x5c>
    1b1c:	1c28      	adds	r0, r5, #0
    1b1e:	6a21      	ldr	r1, [r4, #32]
    1b20:	2301      	movs	r3, #1
    1b22:	47b8      	blx	r7
    1b24:	1c02      	adds	r2, r0, #0
    1b26:	1c43      	adds	r3, r0, #1
    1b28:	d10e      	bne.n	1b48 <__sflush_r+0x5c>
    1b2a:	682b      	ldr	r3, [r5, #0]
    1b2c:	2b00      	cmp	r3, #0
    1b2e:	d00b      	beq.n	1b48 <__sflush_r+0x5c>
    1b30:	2b1d      	cmp	r3, #29
    1b32:	d001      	beq.n	1b38 <__sflush_r+0x4c>
    1b34:	2b16      	cmp	r3, #22
    1b36:	d102      	bne.n	1b3e <__sflush_r+0x52>
    1b38:	602e      	str	r6, [r5, #0]
    1b3a:	2000      	movs	r0, #0
    1b3c:	e05e      	b.n	1bfc <__sflush_r+0x110>
    1b3e:	2140      	movs	r1, #64	; 0x40
    1b40:	89a3      	ldrh	r3, [r4, #12]
    1b42:	430b      	orrs	r3, r1
    1b44:	81a3      	strh	r3, [r4, #12]
    1b46:	e059      	b.n	1bfc <__sflush_r+0x110>
    1b48:	89a3      	ldrh	r3, [r4, #12]
    1b4a:	075b      	lsls	r3, r3, #29
    1b4c:	d506      	bpl.n	1b5c <__sflush_r+0x70>
    1b4e:	6863      	ldr	r3, [r4, #4]
    1b50:	1ad2      	subs	r2, r2, r3
    1b52:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1b54:	2b00      	cmp	r3, #0
    1b56:	d001      	beq.n	1b5c <__sflush_r+0x70>
    1b58:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1b5a:	1ad2      	subs	r2, r2, r3
    1b5c:	2300      	movs	r3, #0
    1b5e:	1c28      	adds	r0, r5, #0
    1b60:	6a21      	ldr	r1, [r4, #32]
    1b62:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1b64:	47b8      	blx	r7
    1b66:	89a3      	ldrh	r3, [r4, #12]
    1b68:	1c42      	adds	r2, r0, #1
    1b6a:	d106      	bne.n	1b7a <__sflush_r+0x8e>
    1b6c:	682a      	ldr	r2, [r5, #0]
    1b6e:	2a00      	cmp	r2, #0
    1b70:	d003      	beq.n	1b7a <__sflush_r+0x8e>
    1b72:	2a1d      	cmp	r2, #29
    1b74:	d001      	beq.n	1b7a <__sflush_r+0x8e>
    1b76:	2a16      	cmp	r2, #22
    1b78:	d119      	bne.n	1bae <__sflush_r+0xc2>
    1b7a:	2200      	movs	r2, #0
    1b7c:	6062      	str	r2, [r4, #4]
    1b7e:	6922      	ldr	r2, [r4, #16]
    1b80:	6022      	str	r2, [r4, #0]
    1b82:	04db      	lsls	r3, r3, #19
    1b84:	d505      	bpl.n	1b92 <__sflush_r+0xa6>
    1b86:	1c43      	adds	r3, r0, #1
    1b88:	d102      	bne.n	1b90 <__sflush_r+0xa4>
    1b8a:	682b      	ldr	r3, [r5, #0]
    1b8c:	2b00      	cmp	r3, #0
    1b8e:	d100      	bne.n	1b92 <__sflush_r+0xa6>
    1b90:	6560      	str	r0, [r4, #84]	; 0x54
    1b92:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1b94:	602e      	str	r6, [r5, #0]
    1b96:	2900      	cmp	r1, #0
    1b98:	d0cf      	beq.n	1b3a <__sflush_r+0x4e>
    1b9a:	1c23      	adds	r3, r4, #0
    1b9c:	3344      	adds	r3, #68	; 0x44
    1b9e:	4299      	cmp	r1, r3
    1ba0:	d002      	beq.n	1ba8 <__sflush_r+0xbc>
    1ba2:	1c28      	adds	r0, r5, #0
    1ba4:	f000 f936 	bl	1e14 <_free_r>
    1ba8:	2000      	movs	r0, #0
    1baa:	6360      	str	r0, [r4, #52]	; 0x34
    1bac:	e026      	b.n	1bfc <__sflush_r+0x110>
    1bae:	2240      	movs	r2, #64	; 0x40
    1bb0:	4313      	orrs	r3, r2
    1bb2:	81a3      	strh	r3, [r4, #12]
    1bb4:	e022      	b.n	1bfc <__sflush_r+0x110>
    1bb6:	690f      	ldr	r7, [r1, #16]
    1bb8:	2f00      	cmp	r7, #0
    1bba:	d0be      	beq.n	1b3a <__sflush_r+0x4e>
    1bbc:	680b      	ldr	r3, [r1, #0]
    1bbe:	600f      	str	r7, [r1, #0]
    1bc0:	1bdb      	subs	r3, r3, r7
    1bc2:	9301      	str	r3, [sp, #4]
    1bc4:	2300      	movs	r3, #0
    1bc6:	0792      	lsls	r2, r2, #30
    1bc8:	d100      	bne.n	1bcc <__sflush_r+0xe0>
    1bca:	694b      	ldr	r3, [r1, #20]
    1bcc:	60a3      	str	r3, [r4, #8]
    1bce:	9b01      	ldr	r3, [sp, #4]
    1bd0:	2b00      	cmp	r3, #0
    1bd2:	ddb2      	ble.n	1b3a <__sflush_r+0x4e>
    1bd4:	1c28      	adds	r0, r5, #0
    1bd6:	6a21      	ldr	r1, [r4, #32]
    1bd8:	1c3a      	adds	r2, r7, #0
    1bda:	9b01      	ldr	r3, [sp, #4]
    1bdc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1bde:	47b0      	blx	r6
    1be0:	2800      	cmp	r0, #0
    1be2:	dc06      	bgt.n	1bf2 <__sflush_r+0x106>
    1be4:	2240      	movs	r2, #64	; 0x40
    1be6:	2001      	movs	r0, #1
    1be8:	89a3      	ldrh	r3, [r4, #12]
    1bea:	4240      	negs	r0, r0
    1bec:	4313      	orrs	r3, r2
    1bee:	81a3      	strh	r3, [r4, #12]
    1bf0:	e004      	b.n	1bfc <__sflush_r+0x110>
    1bf2:	9b01      	ldr	r3, [sp, #4]
    1bf4:	183f      	adds	r7, r7, r0
    1bf6:	1a1b      	subs	r3, r3, r0
    1bf8:	9301      	str	r3, [sp, #4]
    1bfa:	e7e8      	b.n	1bce <__sflush_r+0xe2>
    1bfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00001c00 <_fflush_r>:
    1c00:	b538      	push	{r3, r4, r5, lr}
    1c02:	690b      	ldr	r3, [r1, #16]
    1c04:	1c05      	adds	r5, r0, #0
    1c06:	1c0c      	adds	r4, r1, #0
    1c08:	2b00      	cmp	r3, #0
    1c0a:	d101      	bne.n	1c10 <_fflush_r+0x10>
    1c0c:	2000      	movs	r0, #0
    1c0e:	e01c      	b.n	1c4a <_fflush_r+0x4a>
    1c10:	2800      	cmp	r0, #0
    1c12:	d004      	beq.n	1c1e <_fflush_r+0x1e>
    1c14:	6983      	ldr	r3, [r0, #24]
    1c16:	2b00      	cmp	r3, #0
    1c18:	d101      	bne.n	1c1e <_fflush_r+0x1e>
    1c1a:	f000 f85f 	bl	1cdc <__sinit>
    1c1e:	4b0b      	ldr	r3, [pc, #44]	; (1c4c <_fflush_r+0x4c>)
    1c20:	429c      	cmp	r4, r3
    1c22:	d101      	bne.n	1c28 <_fflush_r+0x28>
    1c24:	686c      	ldr	r4, [r5, #4]
    1c26:	e008      	b.n	1c3a <_fflush_r+0x3a>
    1c28:	4b09      	ldr	r3, [pc, #36]	; (1c50 <_fflush_r+0x50>)
    1c2a:	429c      	cmp	r4, r3
    1c2c:	d101      	bne.n	1c32 <_fflush_r+0x32>
    1c2e:	68ac      	ldr	r4, [r5, #8]
    1c30:	e003      	b.n	1c3a <_fflush_r+0x3a>
    1c32:	4b08      	ldr	r3, [pc, #32]	; (1c54 <_fflush_r+0x54>)
    1c34:	429c      	cmp	r4, r3
    1c36:	d100      	bne.n	1c3a <_fflush_r+0x3a>
    1c38:	68ec      	ldr	r4, [r5, #12]
    1c3a:	220c      	movs	r2, #12
    1c3c:	5ea3      	ldrsh	r3, [r4, r2]
    1c3e:	2b00      	cmp	r3, #0
    1c40:	d0e4      	beq.n	1c0c <_fflush_r+0xc>
    1c42:	1c28      	adds	r0, r5, #0
    1c44:	1c21      	adds	r1, r4, #0
    1c46:	f7ff ff51 	bl	1aec <__sflush_r>
    1c4a:	bd38      	pop	{r3, r4, r5, pc}
    1c4c:	00002928 	.word	0x00002928
    1c50:	00002948 	.word	0x00002948
    1c54:	00002968 	.word	0x00002968

00001c58 <_cleanup_r>:
    1c58:	b508      	push	{r3, lr}
    1c5a:	4902      	ldr	r1, [pc, #8]	; (1c64 <_cleanup_r+0xc>)
    1c5c:	f000 f8ae 	bl	1dbc <_fwalk_reent>
    1c60:	bd08      	pop	{r3, pc}
    1c62:	46c0      	nop			; (mov r8, r8)
    1c64:	00001c01 	.word	0x00001c01

00001c68 <std.isra.0>:
    1c68:	2300      	movs	r3, #0
    1c6a:	b510      	push	{r4, lr}
    1c6c:	1c04      	adds	r4, r0, #0
    1c6e:	6003      	str	r3, [r0, #0]
    1c70:	6043      	str	r3, [r0, #4]
    1c72:	6083      	str	r3, [r0, #8]
    1c74:	8181      	strh	r1, [r0, #12]
    1c76:	6643      	str	r3, [r0, #100]	; 0x64
    1c78:	81c2      	strh	r2, [r0, #14]
    1c7a:	6103      	str	r3, [r0, #16]
    1c7c:	6143      	str	r3, [r0, #20]
    1c7e:	6183      	str	r3, [r0, #24]
    1c80:	1c19      	adds	r1, r3, #0
    1c82:	2208      	movs	r2, #8
    1c84:	305c      	adds	r0, #92	; 0x5c
    1c86:	f7ff fe7e 	bl	1986 <memset>
    1c8a:	4b05      	ldr	r3, [pc, #20]	; (1ca0 <std.isra.0+0x38>)
    1c8c:	6224      	str	r4, [r4, #32]
    1c8e:	6263      	str	r3, [r4, #36]	; 0x24
    1c90:	4b04      	ldr	r3, [pc, #16]	; (1ca4 <std.isra.0+0x3c>)
    1c92:	62a3      	str	r3, [r4, #40]	; 0x28
    1c94:	4b04      	ldr	r3, [pc, #16]	; (1ca8 <std.isra.0+0x40>)
    1c96:	62e3      	str	r3, [r4, #44]	; 0x2c
    1c98:	4b04      	ldr	r3, [pc, #16]	; (1cac <std.isra.0+0x44>)
    1c9a:	6323      	str	r3, [r4, #48]	; 0x30
    1c9c:	bd10      	pop	{r4, pc}
    1c9e:	46c0      	nop			; (mov r8, r8)
    1ca0:	000024f1 	.word	0x000024f1
    1ca4:	00002519 	.word	0x00002519
    1ca8:	00002551 	.word	0x00002551
    1cac:	0000257d 	.word	0x0000257d

00001cb0 <__sfmoreglue>:
    1cb0:	b570      	push	{r4, r5, r6, lr}
    1cb2:	2568      	movs	r5, #104	; 0x68
    1cb4:	1e4b      	subs	r3, r1, #1
    1cb6:	435d      	muls	r5, r3
    1cb8:	1c0e      	adds	r6, r1, #0
    1cba:	1c29      	adds	r1, r5, #0
    1cbc:	3174      	adds	r1, #116	; 0x74
    1cbe:	f000 f8ef 	bl	1ea0 <_malloc_r>
    1cc2:	1e04      	subs	r4, r0, #0
    1cc4:	d008      	beq.n	1cd8 <__sfmoreglue+0x28>
    1cc6:	2100      	movs	r1, #0
    1cc8:	1c2a      	adds	r2, r5, #0
    1cca:	6001      	str	r1, [r0, #0]
    1ccc:	6046      	str	r6, [r0, #4]
    1cce:	300c      	adds	r0, #12
    1cd0:	60a0      	str	r0, [r4, #8]
    1cd2:	3268      	adds	r2, #104	; 0x68
    1cd4:	f7ff fe57 	bl	1986 <memset>
    1cd8:	1c20      	adds	r0, r4, #0
    1cda:	bd70      	pop	{r4, r5, r6, pc}

00001cdc <__sinit>:
    1cdc:	6983      	ldr	r3, [r0, #24]
    1cde:	b513      	push	{r0, r1, r4, lr}
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	d128      	bne.n	1d36 <__sinit+0x5a>
    1ce4:	6483      	str	r3, [r0, #72]	; 0x48
    1ce6:	64c3      	str	r3, [r0, #76]	; 0x4c
    1ce8:	6503      	str	r3, [r0, #80]	; 0x50
    1cea:	4b13      	ldr	r3, [pc, #76]	; (1d38 <__sinit+0x5c>)
    1cec:	4a13      	ldr	r2, [pc, #76]	; (1d3c <__sinit+0x60>)
    1cee:	681b      	ldr	r3, [r3, #0]
    1cf0:	6282      	str	r2, [r0, #40]	; 0x28
    1cf2:	9301      	str	r3, [sp, #4]
    1cf4:	4298      	cmp	r0, r3
    1cf6:	d101      	bne.n	1cfc <__sinit+0x20>
    1cf8:	2301      	movs	r3, #1
    1cfa:	6183      	str	r3, [r0, #24]
    1cfc:	1c04      	adds	r4, r0, #0
    1cfe:	f000 f81f 	bl	1d40 <__sfp>
    1d02:	6060      	str	r0, [r4, #4]
    1d04:	1c20      	adds	r0, r4, #0
    1d06:	f000 f81b 	bl	1d40 <__sfp>
    1d0a:	60a0      	str	r0, [r4, #8]
    1d0c:	1c20      	adds	r0, r4, #0
    1d0e:	f000 f817 	bl	1d40 <__sfp>
    1d12:	2104      	movs	r1, #4
    1d14:	60e0      	str	r0, [r4, #12]
    1d16:	2200      	movs	r2, #0
    1d18:	6860      	ldr	r0, [r4, #4]
    1d1a:	f7ff ffa5 	bl	1c68 <std.isra.0>
    1d1e:	68a0      	ldr	r0, [r4, #8]
    1d20:	2109      	movs	r1, #9
    1d22:	2201      	movs	r2, #1
    1d24:	f7ff ffa0 	bl	1c68 <std.isra.0>
    1d28:	68e0      	ldr	r0, [r4, #12]
    1d2a:	2112      	movs	r1, #18
    1d2c:	2202      	movs	r2, #2
    1d2e:	f7ff ff9b 	bl	1c68 <std.isra.0>
    1d32:	2301      	movs	r3, #1
    1d34:	61a3      	str	r3, [r4, #24]
    1d36:	bd13      	pop	{r0, r1, r4, pc}
    1d38:	00002924 	.word	0x00002924
    1d3c:	00001c59 	.word	0x00001c59

00001d40 <__sfp>:
    1d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d42:	4b1d      	ldr	r3, [pc, #116]	; (1db8 <__sfp+0x78>)
    1d44:	1c06      	adds	r6, r0, #0
    1d46:	681d      	ldr	r5, [r3, #0]
    1d48:	69ab      	ldr	r3, [r5, #24]
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	d102      	bne.n	1d54 <__sfp+0x14>
    1d4e:	1c28      	adds	r0, r5, #0
    1d50:	f7ff ffc4 	bl	1cdc <__sinit>
    1d54:	3548      	adds	r5, #72	; 0x48
    1d56:	68ac      	ldr	r4, [r5, #8]
    1d58:	686b      	ldr	r3, [r5, #4]
    1d5a:	3b01      	subs	r3, #1
    1d5c:	d405      	bmi.n	1d6a <__sfp+0x2a>
    1d5e:	220c      	movs	r2, #12
    1d60:	5ea7      	ldrsh	r7, [r4, r2]
    1d62:	2f00      	cmp	r7, #0
    1d64:	d010      	beq.n	1d88 <__sfp+0x48>
    1d66:	3468      	adds	r4, #104	; 0x68
    1d68:	e7f7      	b.n	1d5a <__sfp+0x1a>
    1d6a:	682b      	ldr	r3, [r5, #0]
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	d106      	bne.n	1d7e <__sfp+0x3e>
    1d70:	1c30      	adds	r0, r6, #0
    1d72:	2104      	movs	r1, #4
    1d74:	f7ff ff9c 	bl	1cb0 <__sfmoreglue>
    1d78:	6028      	str	r0, [r5, #0]
    1d7a:	2800      	cmp	r0, #0
    1d7c:	d001      	beq.n	1d82 <__sfp+0x42>
    1d7e:	682d      	ldr	r5, [r5, #0]
    1d80:	e7e9      	b.n	1d56 <__sfp+0x16>
    1d82:	230c      	movs	r3, #12
    1d84:	6033      	str	r3, [r6, #0]
    1d86:	e016      	b.n	1db6 <__sfp+0x76>
    1d88:	2301      	movs	r3, #1
    1d8a:	1c20      	adds	r0, r4, #0
    1d8c:	425b      	negs	r3, r3
    1d8e:	81e3      	strh	r3, [r4, #14]
    1d90:	3302      	adds	r3, #2
    1d92:	81a3      	strh	r3, [r4, #12]
    1d94:	6667      	str	r7, [r4, #100]	; 0x64
    1d96:	6027      	str	r7, [r4, #0]
    1d98:	60a7      	str	r7, [r4, #8]
    1d9a:	6067      	str	r7, [r4, #4]
    1d9c:	6127      	str	r7, [r4, #16]
    1d9e:	6167      	str	r7, [r4, #20]
    1da0:	61a7      	str	r7, [r4, #24]
    1da2:	305c      	adds	r0, #92	; 0x5c
    1da4:	1c39      	adds	r1, r7, #0
    1da6:	2208      	movs	r2, #8
    1da8:	f7ff fded 	bl	1986 <memset>
    1dac:	1c20      	adds	r0, r4, #0
    1dae:	6367      	str	r7, [r4, #52]	; 0x34
    1db0:	63a7      	str	r7, [r4, #56]	; 0x38
    1db2:	64a7      	str	r7, [r4, #72]	; 0x48
    1db4:	64e7      	str	r7, [r4, #76]	; 0x4c
    1db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1db8:	00002924 	.word	0x00002924

00001dbc <_fwalk_reent>:
    1dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1dbe:	1c04      	adds	r4, r0, #0
    1dc0:	1c07      	adds	r7, r0, #0
    1dc2:	2600      	movs	r6, #0
    1dc4:	9101      	str	r1, [sp, #4]
    1dc6:	3448      	adds	r4, #72	; 0x48
    1dc8:	2c00      	cmp	r4, #0
    1dca:	d016      	beq.n	1dfa <_fwalk_reent+0x3e>
    1dcc:	6863      	ldr	r3, [r4, #4]
    1dce:	68a5      	ldr	r5, [r4, #8]
    1dd0:	9300      	str	r3, [sp, #0]
    1dd2:	9b00      	ldr	r3, [sp, #0]
    1dd4:	3b01      	subs	r3, #1
    1dd6:	9300      	str	r3, [sp, #0]
    1dd8:	d40d      	bmi.n	1df6 <_fwalk_reent+0x3a>
    1dda:	89ab      	ldrh	r3, [r5, #12]
    1ddc:	2b01      	cmp	r3, #1
    1dde:	d908      	bls.n	1df2 <_fwalk_reent+0x36>
    1de0:	220e      	movs	r2, #14
    1de2:	5eab      	ldrsh	r3, [r5, r2]
    1de4:	3301      	adds	r3, #1
    1de6:	d004      	beq.n	1df2 <_fwalk_reent+0x36>
    1de8:	1c38      	adds	r0, r7, #0
    1dea:	1c29      	adds	r1, r5, #0
    1dec:	9b01      	ldr	r3, [sp, #4]
    1dee:	4798      	blx	r3
    1df0:	4306      	orrs	r6, r0
    1df2:	3568      	adds	r5, #104	; 0x68
    1df4:	e7ed      	b.n	1dd2 <_fwalk_reent+0x16>
    1df6:	6824      	ldr	r4, [r4, #0]
    1df8:	e7e6      	b.n	1dc8 <_fwalk_reent+0xc>
    1dfa:	1c30      	adds	r0, r6, #0
    1dfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00001e00 <malloc>:
    1e00:	b508      	push	{r3, lr}
    1e02:	4b03      	ldr	r3, [pc, #12]	; (1e10 <malloc+0x10>)
    1e04:	1c01      	adds	r1, r0, #0
    1e06:	6818      	ldr	r0, [r3, #0]
    1e08:	f000 f84a 	bl	1ea0 <_malloc_r>
    1e0c:	bd08      	pop	{r3, pc}
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	20000064 	.word	0x20000064

00001e14 <_free_r>:
    1e14:	b530      	push	{r4, r5, lr}
    1e16:	2900      	cmp	r1, #0
    1e18:	d03e      	beq.n	1e98 <_free_r+0x84>
    1e1a:	3904      	subs	r1, #4
    1e1c:	680b      	ldr	r3, [r1, #0]
    1e1e:	2b00      	cmp	r3, #0
    1e20:	da00      	bge.n	1e24 <_free_r+0x10>
    1e22:	18c9      	adds	r1, r1, r3
    1e24:	4a1d      	ldr	r2, [pc, #116]	; (1e9c <_free_r+0x88>)
    1e26:	6813      	ldr	r3, [r2, #0]
    1e28:	1c14      	adds	r4, r2, #0
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	d102      	bne.n	1e34 <_free_r+0x20>
    1e2e:	604b      	str	r3, [r1, #4]
    1e30:	6011      	str	r1, [r2, #0]
    1e32:	e031      	b.n	1e98 <_free_r+0x84>
    1e34:	4299      	cmp	r1, r3
    1e36:	d20d      	bcs.n	1e54 <_free_r+0x40>
    1e38:	6808      	ldr	r0, [r1, #0]
    1e3a:	180a      	adds	r2, r1, r0
    1e3c:	429a      	cmp	r2, r3
    1e3e:	d103      	bne.n	1e48 <_free_r+0x34>
    1e40:	6813      	ldr	r3, [r2, #0]
    1e42:	18c3      	adds	r3, r0, r3
    1e44:	600b      	str	r3, [r1, #0]
    1e46:	6853      	ldr	r3, [r2, #4]
    1e48:	604b      	str	r3, [r1, #4]
    1e4a:	6021      	str	r1, [r4, #0]
    1e4c:	e024      	b.n	1e98 <_free_r+0x84>
    1e4e:	428a      	cmp	r2, r1
    1e50:	d803      	bhi.n	1e5a <_free_r+0x46>
    1e52:	1c13      	adds	r3, r2, #0
    1e54:	685a      	ldr	r2, [r3, #4]
    1e56:	2a00      	cmp	r2, #0
    1e58:	d1f9      	bne.n	1e4e <_free_r+0x3a>
    1e5a:	681d      	ldr	r5, [r3, #0]
    1e5c:	195c      	adds	r4, r3, r5
    1e5e:	428c      	cmp	r4, r1
    1e60:	d10b      	bne.n	1e7a <_free_r+0x66>
    1e62:	6809      	ldr	r1, [r1, #0]
    1e64:	1869      	adds	r1, r5, r1
    1e66:	1858      	adds	r0, r3, r1
    1e68:	6019      	str	r1, [r3, #0]
    1e6a:	4290      	cmp	r0, r2
    1e6c:	d114      	bne.n	1e98 <_free_r+0x84>
    1e6e:	6810      	ldr	r0, [r2, #0]
    1e70:	6852      	ldr	r2, [r2, #4]
    1e72:	1809      	adds	r1, r1, r0
    1e74:	6019      	str	r1, [r3, #0]
    1e76:	605a      	str	r2, [r3, #4]
    1e78:	e00e      	b.n	1e98 <_free_r+0x84>
    1e7a:	428c      	cmp	r4, r1
    1e7c:	d902      	bls.n	1e84 <_free_r+0x70>
    1e7e:	230c      	movs	r3, #12
    1e80:	6003      	str	r3, [r0, #0]
    1e82:	e009      	b.n	1e98 <_free_r+0x84>
    1e84:	6808      	ldr	r0, [r1, #0]
    1e86:	180c      	adds	r4, r1, r0
    1e88:	4294      	cmp	r4, r2
    1e8a:	d103      	bne.n	1e94 <_free_r+0x80>
    1e8c:	6814      	ldr	r4, [r2, #0]
    1e8e:	6852      	ldr	r2, [r2, #4]
    1e90:	1900      	adds	r0, r0, r4
    1e92:	6008      	str	r0, [r1, #0]
    1e94:	604a      	str	r2, [r1, #4]
    1e96:	6059      	str	r1, [r3, #4]
    1e98:	bd30      	pop	{r4, r5, pc}
    1e9a:	46c0      	nop			; (mov r8, r8)
    1e9c:	200000cc 	.word	0x200000cc

00001ea0 <_malloc_r>:
    1ea0:	2303      	movs	r3, #3
    1ea2:	b570      	push	{r4, r5, r6, lr}
    1ea4:	1ccc      	adds	r4, r1, #3
    1ea6:	439c      	bics	r4, r3
    1ea8:	3408      	adds	r4, #8
    1eaa:	1c05      	adds	r5, r0, #0
    1eac:	2c0c      	cmp	r4, #12
    1eae:	d201      	bcs.n	1eb4 <_malloc_r+0x14>
    1eb0:	240c      	movs	r4, #12
    1eb2:	e005      	b.n	1ec0 <_malloc_r+0x20>
    1eb4:	2c00      	cmp	r4, #0
    1eb6:	da03      	bge.n	1ec0 <_malloc_r+0x20>
    1eb8:	230c      	movs	r3, #12
    1eba:	2000      	movs	r0, #0
    1ebc:	602b      	str	r3, [r5, #0]
    1ebe:	e042      	b.n	1f46 <_malloc_r+0xa6>
    1ec0:	428c      	cmp	r4, r1
    1ec2:	d3f9      	bcc.n	1eb8 <_malloc_r+0x18>
    1ec4:	4a20      	ldr	r2, [pc, #128]	; (1f48 <_malloc_r+0xa8>)
    1ec6:	6813      	ldr	r3, [r2, #0]
    1ec8:	1c10      	adds	r0, r2, #0
    1eca:	1c19      	adds	r1, r3, #0
    1ecc:	2900      	cmp	r1, #0
    1ece:	d013      	beq.n	1ef8 <_malloc_r+0x58>
    1ed0:	680a      	ldr	r2, [r1, #0]
    1ed2:	1b12      	subs	r2, r2, r4
    1ed4:	d40d      	bmi.n	1ef2 <_malloc_r+0x52>
    1ed6:	2a0b      	cmp	r2, #11
    1ed8:	d902      	bls.n	1ee0 <_malloc_r+0x40>
    1eda:	600a      	str	r2, [r1, #0]
    1edc:	188b      	adds	r3, r1, r2
    1ede:	e01f      	b.n	1f20 <_malloc_r+0x80>
    1ee0:	428b      	cmp	r3, r1
    1ee2:	d102      	bne.n	1eea <_malloc_r+0x4a>
    1ee4:	685a      	ldr	r2, [r3, #4]
    1ee6:	6002      	str	r2, [r0, #0]
    1ee8:	e01b      	b.n	1f22 <_malloc_r+0x82>
    1eea:	684a      	ldr	r2, [r1, #4]
    1eec:	605a      	str	r2, [r3, #4]
    1eee:	1c0b      	adds	r3, r1, #0
    1ef0:	e017      	b.n	1f22 <_malloc_r+0x82>
    1ef2:	1c0b      	adds	r3, r1, #0
    1ef4:	6849      	ldr	r1, [r1, #4]
    1ef6:	e7e9      	b.n	1ecc <_malloc_r+0x2c>
    1ef8:	4e14      	ldr	r6, [pc, #80]	; (1f4c <_malloc_r+0xac>)
    1efa:	6833      	ldr	r3, [r6, #0]
    1efc:	2b00      	cmp	r3, #0
    1efe:	d103      	bne.n	1f08 <_malloc_r+0x68>
    1f00:	1c28      	adds	r0, r5, #0
    1f02:	f000 fae3 	bl	24cc <_sbrk_r>
    1f06:	6030      	str	r0, [r6, #0]
    1f08:	1c28      	adds	r0, r5, #0
    1f0a:	1c21      	adds	r1, r4, #0
    1f0c:	f000 fade 	bl	24cc <_sbrk_r>
    1f10:	1c03      	adds	r3, r0, #0
    1f12:	1c42      	adds	r2, r0, #1
    1f14:	d0d0      	beq.n	1eb8 <_malloc_r+0x18>
    1f16:	2203      	movs	r2, #3
    1f18:	1cc6      	adds	r6, r0, #3
    1f1a:	4396      	bics	r6, r2
    1f1c:	4286      	cmp	r6, r0
    1f1e:	d10a      	bne.n	1f36 <_malloc_r+0x96>
    1f20:	601c      	str	r4, [r3, #0]
    1f22:	1c18      	adds	r0, r3, #0
    1f24:	2107      	movs	r1, #7
    1f26:	300b      	adds	r0, #11
    1f28:	1d1a      	adds	r2, r3, #4
    1f2a:	4388      	bics	r0, r1
    1f2c:	1a82      	subs	r2, r0, r2
    1f2e:	d00a      	beq.n	1f46 <_malloc_r+0xa6>
    1f30:	4251      	negs	r1, r2
    1f32:	5099      	str	r1, [r3, r2]
    1f34:	e007      	b.n	1f46 <_malloc_r+0xa6>
    1f36:	1a31      	subs	r1, r6, r0
    1f38:	1c28      	adds	r0, r5, #0
    1f3a:	f000 fac7 	bl	24cc <_sbrk_r>
    1f3e:	1c43      	adds	r3, r0, #1
    1f40:	d0ba      	beq.n	1eb8 <_malloc_r+0x18>
    1f42:	1c33      	adds	r3, r6, #0
    1f44:	e7ec      	b.n	1f20 <_malloc_r+0x80>
    1f46:	bd70      	pop	{r4, r5, r6, pc}
    1f48:	200000cc 	.word	0x200000cc
    1f4c:	200000c8 	.word	0x200000c8

00001f50 <__sfputc_r>:
    1f50:	6893      	ldr	r3, [r2, #8]
    1f52:	b510      	push	{r4, lr}
    1f54:	3b01      	subs	r3, #1
    1f56:	6093      	str	r3, [r2, #8]
    1f58:	2b00      	cmp	r3, #0
    1f5a:	da05      	bge.n	1f68 <__sfputc_r+0x18>
    1f5c:	6994      	ldr	r4, [r2, #24]
    1f5e:	42a3      	cmp	r3, r4
    1f60:	db08      	blt.n	1f74 <__sfputc_r+0x24>
    1f62:	b2cb      	uxtb	r3, r1
    1f64:	2b0a      	cmp	r3, #10
    1f66:	d005      	beq.n	1f74 <__sfputc_r+0x24>
    1f68:	6813      	ldr	r3, [r2, #0]
    1f6a:	1c58      	adds	r0, r3, #1
    1f6c:	6010      	str	r0, [r2, #0]
    1f6e:	7019      	strb	r1, [r3, #0]
    1f70:	b2c8      	uxtb	r0, r1
    1f72:	e001      	b.n	1f78 <__sfputc_r+0x28>
    1f74:	f000 fb08 	bl	2588 <__swbuf_r>
    1f78:	bd10      	pop	{r4, pc}

00001f7a <__sfputs_r>:
    1f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f7c:	1c06      	adds	r6, r0, #0
    1f7e:	1c0f      	adds	r7, r1, #0
    1f80:	1c14      	adds	r4, r2, #0
    1f82:	18d5      	adds	r5, r2, r3
    1f84:	42ac      	cmp	r4, r5
    1f86:	d008      	beq.n	1f9a <__sfputs_r+0x20>
    1f88:	7821      	ldrb	r1, [r4, #0]
    1f8a:	1c30      	adds	r0, r6, #0
    1f8c:	1c3a      	adds	r2, r7, #0
    1f8e:	f7ff ffdf 	bl	1f50 <__sfputc_r>
    1f92:	3401      	adds	r4, #1
    1f94:	1c43      	adds	r3, r0, #1
    1f96:	d1f5      	bne.n	1f84 <__sfputs_r+0xa>
    1f98:	e000      	b.n	1f9c <__sfputs_r+0x22>
    1f9a:	2000      	movs	r0, #0
    1f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001fa0 <_vfiprintf_r>:
    1fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fa2:	b09f      	sub	sp, #124	; 0x7c
    1fa4:	1c06      	adds	r6, r0, #0
    1fa6:	1c0f      	adds	r7, r1, #0
    1fa8:	9202      	str	r2, [sp, #8]
    1faa:	9305      	str	r3, [sp, #20]
    1fac:	2800      	cmp	r0, #0
    1fae:	d004      	beq.n	1fba <_vfiprintf_r+0x1a>
    1fb0:	6983      	ldr	r3, [r0, #24]
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	d101      	bne.n	1fba <_vfiprintf_r+0x1a>
    1fb6:	f7ff fe91 	bl	1cdc <__sinit>
    1fba:	4b79      	ldr	r3, [pc, #484]	; (21a0 <STACK_SIZE+0x1a0>)
    1fbc:	429f      	cmp	r7, r3
    1fbe:	d101      	bne.n	1fc4 <_vfiprintf_r+0x24>
    1fc0:	6877      	ldr	r7, [r6, #4]
    1fc2:	e008      	b.n	1fd6 <_vfiprintf_r+0x36>
    1fc4:	4b77      	ldr	r3, [pc, #476]	; (21a4 <STACK_SIZE+0x1a4>)
    1fc6:	429f      	cmp	r7, r3
    1fc8:	d101      	bne.n	1fce <_vfiprintf_r+0x2e>
    1fca:	68b7      	ldr	r7, [r6, #8]
    1fcc:	e003      	b.n	1fd6 <_vfiprintf_r+0x36>
    1fce:	4b76      	ldr	r3, [pc, #472]	; (21a8 <STACK_SIZE+0x1a8>)
    1fd0:	429f      	cmp	r7, r3
    1fd2:	d100      	bne.n	1fd6 <_vfiprintf_r+0x36>
    1fd4:	68f7      	ldr	r7, [r6, #12]
    1fd6:	89bb      	ldrh	r3, [r7, #12]
    1fd8:	071b      	lsls	r3, r3, #28
    1fda:	d50a      	bpl.n	1ff2 <_vfiprintf_r+0x52>
    1fdc:	693b      	ldr	r3, [r7, #16]
    1fde:	2b00      	cmp	r3, #0
    1fe0:	d007      	beq.n	1ff2 <_vfiprintf_r+0x52>
    1fe2:	2300      	movs	r3, #0
    1fe4:	ad06      	add	r5, sp, #24
    1fe6:	616b      	str	r3, [r5, #20]
    1fe8:	3320      	adds	r3, #32
    1fea:	766b      	strb	r3, [r5, #25]
    1fec:	3310      	adds	r3, #16
    1fee:	76ab      	strb	r3, [r5, #26]
    1ff0:	e03d      	b.n	206e <STACK_SIZE+0x6e>
    1ff2:	1c30      	adds	r0, r6, #0
    1ff4:	1c39      	adds	r1, r7, #0
    1ff6:	f000 fb33 	bl	2660 <__swsetup_r>
    1ffa:	2800      	cmp	r0, #0
    1ffc:	d0f1      	beq.n	1fe2 <_vfiprintf_r+0x42>
    1ffe:	2001      	movs	r0, #1
    2000:	4240      	negs	r0, r0
    2002:	e0ca      	b.n	219a <STACK_SIZE+0x19a>
    2004:	9a05      	ldr	r2, [sp, #20]
    2006:	1d11      	adds	r1, r2, #4
    2008:	6812      	ldr	r2, [r2, #0]
    200a:	9105      	str	r1, [sp, #20]
    200c:	2a00      	cmp	r2, #0
    200e:	db7e      	blt.n	210e <STACK_SIZE+0x10e>
    2010:	9209      	str	r2, [sp, #36]	; 0x24
    2012:	3401      	adds	r4, #1
    2014:	7823      	ldrb	r3, [r4, #0]
    2016:	2b2e      	cmp	r3, #46	; 0x2e
    2018:	d100      	bne.n	201c <STACK_SIZE+0x1c>
    201a:	e089      	b.n	2130 <STACK_SIZE+0x130>
    201c:	7821      	ldrb	r1, [r4, #0]
    201e:	4863      	ldr	r0, [pc, #396]	; (21ac <STACK_SIZE+0x1ac>)
    2020:	2203      	movs	r2, #3
    2022:	f000 fc0f 	bl	2844 <memchr>
    2026:	2800      	cmp	r0, #0
    2028:	d008      	beq.n	203c <STACK_SIZE+0x3c>
    202a:	4b60      	ldr	r3, [pc, #384]	; (21ac <STACK_SIZE+0x1ac>)
    202c:	3401      	adds	r4, #1
    202e:	1ac0      	subs	r0, r0, r3
    2030:	2340      	movs	r3, #64	; 0x40
    2032:	4083      	lsls	r3, r0
    2034:	1c18      	adds	r0, r3, #0
    2036:	682b      	ldr	r3, [r5, #0]
    2038:	4318      	orrs	r0, r3
    203a:	6028      	str	r0, [r5, #0]
    203c:	7821      	ldrb	r1, [r4, #0]
    203e:	1c63      	adds	r3, r4, #1
    2040:	485b      	ldr	r0, [pc, #364]	; (21b0 <STACK_SIZE+0x1b0>)
    2042:	2206      	movs	r2, #6
    2044:	9302      	str	r3, [sp, #8]
    2046:	7629      	strb	r1, [r5, #24]
    2048:	f000 fbfc 	bl	2844 <memchr>
    204c:	2800      	cmp	r0, #0
    204e:	d100      	bne.n	2052 <STACK_SIZE+0x52>
    2050:	e091      	b.n	2176 <STACK_SIZE+0x176>
    2052:	4b58      	ldr	r3, [pc, #352]	; (21b4 <STACK_SIZE+0x1b4>)
    2054:	2b00      	cmp	r3, #0
    2056:	d000      	beq.n	205a <STACK_SIZE+0x5a>
    2058:	e084      	b.n	2164 <STACK_SIZE+0x164>
    205a:	2207      	movs	r2, #7
    205c:	9b05      	ldr	r3, [sp, #20]
    205e:	3307      	adds	r3, #7
    2060:	4393      	bics	r3, r2
    2062:	3308      	adds	r3, #8
    2064:	9305      	str	r3, [sp, #20]
    2066:	696b      	ldr	r3, [r5, #20]
    2068:	9a03      	ldr	r2, [sp, #12]
    206a:	189b      	adds	r3, r3, r2
    206c:	616b      	str	r3, [r5, #20]
    206e:	9c02      	ldr	r4, [sp, #8]
    2070:	7823      	ldrb	r3, [r4, #0]
    2072:	2b00      	cmp	r3, #0
    2074:	d104      	bne.n	2080 <STACK_SIZE+0x80>
    2076:	9b02      	ldr	r3, [sp, #8]
    2078:	1ae3      	subs	r3, r4, r3
    207a:	9304      	str	r3, [sp, #16]
    207c:	d011      	beq.n	20a2 <STACK_SIZE+0xa2>
    207e:	e003      	b.n	2088 <STACK_SIZE+0x88>
    2080:	2b25      	cmp	r3, #37	; 0x25
    2082:	d0f8      	beq.n	2076 <STACK_SIZE+0x76>
    2084:	3401      	adds	r4, #1
    2086:	e7f3      	b.n	2070 <STACK_SIZE+0x70>
    2088:	9b04      	ldr	r3, [sp, #16]
    208a:	1c30      	adds	r0, r6, #0
    208c:	1c39      	adds	r1, r7, #0
    208e:	9a02      	ldr	r2, [sp, #8]
    2090:	f7ff ff73 	bl	1f7a <__sfputs_r>
    2094:	1c43      	adds	r3, r0, #1
    2096:	d07b      	beq.n	2190 <STACK_SIZE+0x190>
    2098:	696a      	ldr	r2, [r5, #20]
    209a:	9b04      	ldr	r3, [sp, #16]
    209c:	4694      	mov	ip, r2
    209e:	4463      	add	r3, ip
    20a0:	616b      	str	r3, [r5, #20]
    20a2:	7823      	ldrb	r3, [r4, #0]
    20a4:	2b00      	cmp	r3, #0
    20a6:	d073      	beq.n	2190 <STACK_SIZE+0x190>
    20a8:	2201      	movs	r2, #1
    20aa:	2300      	movs	r3, #0
    20ac:	4252      	negs	r2, r2
    20ae:	606a      	str	r2, [r5, #4]
    20b0:	a902      	add	r1, sp, #8
    20b2:	3254      	adds	r2, #84	; 0x54
    20b4:	1852      	adds	r2, r2, r1
    20b6:	3401      	adds	r4, #1
    20b8:	602b      	str	r3, [r5, #0]
    20ba:	60eb      	str	r3, [r5, #12]
    20bc:	60ab      	str	r3, [r5, #8]
    20be:	7013      	strb	r3, [r2, #0]
    20c0:	65ab      	str	r3, [r5, #88]	; 0x58
    20c2:	7821      	ldrb	r1, [r4, #0]
    20c4:	483c      	ldr	r0, [pc, #240]	; (21b8 <STACK_SIZE+0x1b8>)
    20c6:	2205      	movs	r2, #5
    20c8:	f000 fbbc 	bl	2844 <memchr>
    20cc:	2800      	cmp	r0, #0
    20ce:	d009      	beq.n	20e4 <STACK_SIZE+0xe4>
    20d0:	4b39      	ldr	r3, [pc, #228]	; (21b8 <STACK_SIZE+0x1b8>)
    20d2:	3401      	adds	r4, #1
    20d4:	1ac0      	subs	r0, r0, r3
    20d6:	2301      	movs	r3, #1
    20d8:	4083      	lsls	r3, r0
    20da:	1c18      	adds	r0, r3, #0
    20dc:	682b      	ldr	r3, [r5, #0]
    20de:	4318      	orrs	r0, r3
    20e0:	6028      	str	r0, [r5, #0]
    20e2:	e7ee      	b.n	20c2 <STACK_SIZE+0xc2>
    20e4:	682b      	ldr	r3, [r5, #0]
    20e6:	06da      	lsls	r2, r3, #27
    20e8:	d504      	bpl.n	20f4 <STACK_SIZE+0xf4>
    20ea:	2253      	movs	r2, #83	; 0x53
    20ec:	2120      	movs	r1, #32
    20ee:	a802      	add	r0, sp, #8
    20f0:	1812      	adds	r2, r2, r0
    20f2:	7011      	strb	r1, [r2, #0]
    20f4:	071a      	lsls	r2, r3, #28
    20f6:	d504      	bpl.n	2102 <STACK_SIZE+0x102>
    20f8:	2253      	movs	r2, #83	; 0x53
    20fa:	212b      	movs	r1, #43	; 0x2b
    20fc:	a802      	add	r0, sp, #8
    20fe:	1812      	adds	r2, r2, r0
    2100:	7011      	strb	r1, [r2, #0]
    2102:	7822      	ldrb	r2, [r4, #0]
    2104:	2a2a      	cmp	r2, #42	; 0x2a
    2106:	d100      	bne.n	210a <STACK_SIZE+0x10a>
    2108:	e77c      	b.n	2004 <STACK_SIZE+0x4>
    210a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    210c:	e005      	b.n	211a <STACK_SIZE+0x11a>
    210e:	4252      	negs	r2, r2
    2110:	60ea      	str	r2, [r5, #12]
    2112:	2202      	movs	r2, #2
    2114:	4313      	orrs	r3, r2
    2116:	602b      	str	r3, [r5, #0]
    2118:	e77b      	b.n	2012 <STACK_SIZE+0x12>
    211a:	7822      	ldrb	r2, [r4, #0]
    211c:	3a30      	subs	r2, #48	; 0x30
    211e:	2a09      	cmp	r2, #9
    2120:	d804      	bhi.n	212c <STACK_SIZE+0x12c>
    2122:	210a      	movs	r1, #10
    2124:	434b      	muls	r3, r1
    2126:	3401      	adds	r4, #1
    2128:	189b      	adds	r3, r3, r2
    212a:	e7f6      	b.n	211a <STACK_SIZE+0x11a>
    212c:	9309      	str	r3, [sp, #36]	; 0x24
    212e:	e771      	b.n	2014 <STACK_SIZE+0x14>
    2130:	7863      	ldrb	r3, [r4, #1]
    2132:	2b2a      	cmp	r3, #42	; 0x2a
    2134:	d109      	bne.n	214a <STACK_SIZE+0x14a>
    2136:	9b05      	ldr	r3, [sp, #20]
    2138:	3402      	adds	r4, #2
    213a:	1d1a      	adds	r2, r3, #4
    213c:	681b      	ldr	r3, [r3, #0]
    213e:	9205      	str	r2, [sp, #20]
    2140:	2b00      	cmp	r3, #0
    2142:	da0d      	bge.n	2160 <STACK_SIZE+0x160>
    2144:	2301      	movs	r3, #1
    2146:	425b      	negs	r3, r3
    2148:	e00a      	b.n	2160 <STACK_SIZE+0x160>
    214a:	2300      	movs	r3, #0
    214c:	3401      	adds	r4, #1
    214e:	7822      	ldrb	r2, [r4, #0]
    2150:	3a30      	subs	r2, #48	; 0x30
    2152:	2a09      	cmp	r2, #9
    2154:	d804      	bhi.n	2160 <STACK_SIZE+0x160>
    2156:	210a      	movs	r1, #10
    2158:	434b      	muls	r3, r1
    215a:	3401      	adds	r4, #1
    215c:	189b      	adds	r3, r3, r2
    215e:	e7f6      	b.n	214e <STACK_SIZE+0x14e>
    2160:	9307      	str	r3, [sp, #28]
    2162:	e75b      	b.n	201c <STACK_SIZE+0x1c>
    2164:	ab05      	add	r3, sp, #20
    2166:	9300      	str	r3, [sp, #0]
    2168:	1c30      	adds	r0, r6, #0
    216a:	1c29      	adds	r1, r5, #0
    216c:	1c3a      	adds	r2, r7, #0
    216e:	4b13      	ldr	r3, [pc, #76]	; (21bc <STACK_SIZE+0x1bc>)
    2170:	e000      	b.n	2174 <STACK_SIZE+0x174>
    2172:	bf00      	nop
    2174:	e007      	b.n	2186 <STACK_SIZE+0x186>
    2176:	ab05      	add	r3, sp, #20
    2178:	9300      	str	r3, [sp, #0]
    217a:	1c30      	adds	r0, r6, #0
    217c:	1c29      	adds	r1, r5, #0
    217e:	1c3a      	adds	r2, r7, #0
    2180:	4b0e      	ldr	r3, [pc, #56]	; (21bc <STACK_SIZE+0x1bc>)
    2182:	f000 f88b 	bl	229c <_printf_i>
    2186:	9003      	str	r0, [sp, #12]
    2188:	9b03      	ldr	r3, [sp, #12]
    218a:	3301      	adds	r3, #1
    218c:	d000      	beq.n	2190 <STACK_SIZE+0x190>
    218e:	e76a      	b.n	2066 <STACK_SIZE+0x66>
    2190:	89bb      	ldrh	r3, [r7, #12]
    2192:	065b      	lsls	r3, r3, #25
    2194:	d500      	bpl.n	2198 <STACK_SIZE+0x198>
    2196:	e732      	b.n	1ffe <_vfiprintf_r+0x5e>
    2198:	980b      	ldr	r0, [sp, #44]	; 0x2c
    219a:	b01f      	add	sp, #124	; 0x7c
    219c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    219e:	46c0      	nop			; (mov r8, r8)
    21a0:	00002928 	.word	0x00002928
    21a4:	00002948 	.word	0x00002948
    21a8:	00002968 	.word	0x00002968
    21ac:	0000298e 	.word	0x0000298e
    21b0:	00002992 	.word	0x00002992
    21b4:	00000000 	.word	0x00000000
    21b8:	00002988 	.word	0x00002988
    21bc:	00001f7b 	.word	0x00001f7b

000021c0 <_printf_common>:
    21c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    21c2:	1c17      	adds	r7, r2, #0
    21c4:	9301      	str	r3, [sp, #4]
    21c6:	690a      	ldr	r2, [r1, #16]
    21c8:	688b      	ldr	r3, [r1, #8]
    21ca:	9000      	str	r0, [sp, #0]
    21cc:	1c0c      	adds	r4, r1, #0
    21ce:	4293      	cmp	r3, r2
    21d0:	da00      	bge.n	21d4 <_printf_common+0x14>
    21d2:	1c13      	adds	r3, r2, #0
    21d4:	1c22      	adds	r2, r4, #0
    21d6:	603b      	str	r3, [r7, #0]
    21d8:	3243      	adds	r2, #67	; 0x43
    21da:	7812      	ldrb	r2, [r2, #0]
    21dc:	2a00      	cmp	r2, #0
    21de:	d001      	beq.n	21e4 <_printf_common+0x24>
    21e0:	3301      	adds	r3, #1
    21e2:	603b      	str	r3, [r7, #0]
    21e4:	6823      	ldr	r3, [r4, #0]
    21e6:	069b      	lsls	r3, r3, #26
    21e8:	d502      	bpl.n	21f0 <_printf_common+0x30>
    21ea:	683b      	ldr	r3, [r7, #0]
    21ec:	3302      	adds	r3, #2
    21ee:	603b      	str	r3, [r7, #0]
    21f0:	2506      	movs	r5, #6
    21f2:	6823      	ldr	r3, [r4, #0]
    21f4:	401d      	ands	r5, r3
    21f6:	d01e      	beq.n	2236 <_printf_common+0x76>
    21f8:	1c23      	adds	r3, r4, #0
    21fa:	3343      	adds	r3, #67	; 0x43
    21fc:	781b      	ldrb	r3, [r3, #0]
    21fe:	1e5a      	subs	r2, r3, #1
    2200:	4193      	sbcs	r3, r2
    2202:	6822      	ldr	r2, [r4, #0]
    2204:	0692      	lsls	r2, r2, #26
    2206:	d51c      	bpl.n	2242 <_printf_common+0x82>
    2208:	2030      	movs	r0, #48	; 0x30
    220a:	18e1      	adds	r1, r4, r3
    220c:	3140      	adds	r1, #64	; 0x40
    220e:	70c8      	strb	r0, [r1, #3]
    2210:	1c21      	adds	r1, r4, #0
    2212:	1c5a      	adds	r2, r3, #1
    2214:	3145      	adds	r1, #69	; 0x45
    2216:	7809      	ldrb	r1, [r1, #0]
    2218:	18a2      	adds	r2, r4, r2
    221a:	3240      	adds	r2, #64	; 0x40
    221c:	3302      	adds	r3, #2
    221e:	70d1      	strb	r1, [r2, #3]
    2220:	e00f      	b.n	2242 <_printf_common+0x82>
    2222:	1c22      	adds	r2, r4, #0
    2224:	2301      	movs	r3, #1
    2226:	9800      	ldr	r0, [sp, #0]
    2228:	9901      	ldr	r1, [sp, #4]
    222a:	3219      	adds	r2, #25
    222c:	9e08      	ldr	r6, [sp, #32]
    222e:	47b0      	blx	r6
    2230:	1c43      	adds	r3, r0, #1
    2232:	d00e      	beq.n	2252 <_printf_common+0x92>
    2234:	3501      	adds	r5, #1
    2236:	68e3      	ldr	r3, [r4, #12]
    2238:	683a      	ldr	r2, [r7, #0]
    223a:	1a9b      	subs	r3, r3, r2
    223c:	429d      	cmp	r5, r3
    223e:	dbf0      	blt.n	2222 <_printf_common+0x62>
    2240:	e7da      	b.n	21f8 <_printf_common+0x38>
    2242:	1c22      	adds	r2, r4, #0
    2244:	9800      	ldr	r0, [sp, #0]
    2246:	9901      	ldr	r1, [sp, #4]
    2248:	3243      	adds	r2, #67	; 0x43
    224a:	9d08      	ldr	r5, [sp, #32]
    224c:	47a8      	blx	r5
    224e:	1c43      	adds	r3, r0, #1
    2250:	d102      	bne.n	2258 <_printf_common+0x98>
    2252:	2001      	movs	r0, #1
    2254:	4240      	negs	r0, r0
    2256:	e020      	b.n	229a <_printf_common+0xda>
    2258:	2306      	movs	r3, #6
    225a:	6820      	ldr	r0, [r4, #0]
    225c:	68e1      	ldr	r1, [r4, #12]
    225e:	683a      	ldr	r2, [r7, #0]
    2260:	4003      	ands	r3, r0
    2262:	2500      	movs	r5, #0
    2264:	2b04      	cmp	r3, #4
    2266:	d103      	bne.n	2270 <_printf_common+0xb0>
    2268:	1a8d      	subs	r5, r1, r2
    226a:	43eb      	mvns	r3, r5
    226c:	17db      	asrs	r3, r3, #31
    226e:	401d      	ands	r5, r3
    2270:	68a3      	ldr	r3, [r4, #8]
    2272:	6922      	ldr	r2, [r4, #16]
    2274:	4293      	cmp	r3, r2
    2276:	dd01      	ble.n	227c <_printf_common+0xbc>
    2278:	1a9b      	subs	r3, r3, r2
    227a:	18ed      	adds	r5, r5, r3
    227c:	2700      	movs	r7, #0
    227e:	42af      	cmp	r7, r5
    2280:	da0a      	bge.n	2298 <_printf_common+0xd8>
    2282:	1c22      	adds	r2, r4, #0
    2284:	2301      	movs	r3, #1
    2286:	9800      	ldr	r0, [sp, #0]
    2288:	9901      	ldr	r1, [sp, #4]
    228a:	321a      	adds	r2, #26
    228c:	9e08      	ldr	r6, [sp, #32]
    228e:	47b0      	blx	r6
    2290:	1c43      	adds	r3, r0, #1
    2292:	d0de      	beq.n	2252 <_printf_common+0x92>
    2294:	3701      	adds	r7, #1
    2296:	e7f2      	b.n	227e <_printf_common+0xbe>
    2298:	2000      	movs	r0, #0
    229a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000229c <_printf_i>:
    229c:	b5f0      	push	{r4, r5, r6, r7, lr}
    229e:	b08b      	sub	sp, #44	; 0x2c
    22a0:	9206      	str	r2, [sp, #24]
    22a2:	1c0a      	adds	r2, r1, #0
    22a4:	3243      	adds	r2, #67	; 0x43
    22a6:	9307      	str	r3, [sp, #28]
    22a8:	9005      	str	r0, [sp, #20]
    22aa:	9204      	str	r2, [sp, #16]
    22ac:	7e0a      	ldrb	r2, [r1, #24]
    22ae:	1c0c      	adds	r4, r1, #0
    22b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    22b2:	2a6e      	cmp	r2, #110	; 0x6e
    22b4:	d100      	bne.n	22b8 <_printf_i+0x1c>
    22b6:	e0a8      	b.n	240a <_printf_i+0x16e>
    22b8:	d811      	bhi.n	22de <_printf_i+0x42>
    22ba:	2a63      	cmp	r2, #99	; 0x63
    22bc:	d022      	beq.n	2304 <_printf_i+0x68>
    22be:	d809      	bhi.n	22d4 <_printf_i+0x38>
    22c0:	2a00      	cmp	r2, #0
    22c2:	d100      	bne.n	22c6 <_printf_i+0x2a>
    22c4:	e0b2      	b.n	242c <_printf_i+0x190>
    22c6:	2a58      	cmp	r2, #88	; 0x58
    22c8:	d000      	beq.n	22cc <_printf_i+0x30>
    22ca:	e0c2      	b.n	2452 <_printf_i+0x1b6>
    22cc:	3145      	adds	r1, #69	; 0x45
    22ce:	700a      	strb	r2, [r1, #0]
    22d0:	4a7c      	ldr	r2, [pc, #496]	; (24c4 <_printf_i+0x228>)
    22d2:	e04f      	b.n	2374 <_printf_i+0xd8>
    22d4:	2a64      	cmp	r2, #100	; 0x64
    22d6:	d01d      	beq.n	2314 <_printf_i+0x78>
    22d8:	2a69      	cmp	r2, #105	; 0x69
    22da:	d01b      	beq.n	2314 <_printf_i+0x78>
    22dc:	e0b9      	b.n	2452 <_printf_i+0x1b6>
    22de:	2a73      	cmp	r2, #115	; 0x73
    22e0:	d100      	bne.n	22e4 <_printf_i+0x48>
    22e2:	e0a7      	b.n	2434 <_printf_i+0x198>
    22e4:	d809      	bhi.n	22fa <_printf_i+0x5e>
    22e6:	2a6f      	cmp	r2, #111	; 0x6f
    22e8:	d029      	beq.n	233e <_printf_i+0xa2>
    22ea:	2a70      	cmp	r2, #112	; 0x70
    22ec:	d000      	beq.n	22f0 <_printf_i+0x54>
    22ee:	e0b0      	b.n	2452 <_printf_i+0x1b6>
    22f0:	2220      	movs	r2, #32
    22f2:	6809      	ldr	r1, [r1, #0]
    22f4:	430a      	orrs	r2, r1
    22f6:	6022      	str	r2, [r4, #0]
    22f8:	e037      	b.n	236a <_printf_i+0xce>
    22fa:	2a75      	cmp	r2, #117	; 0x75
    22fc:	d01f      	beq.n	233e <_printf_i+0xa2>
    22fe:	2a78      	cmp	r2, #120	; 0x78
    2300:	d033      	beq.n	236a <_printf_i+0xce>
    2302:	e0a6      	b.n	2452 <_printf_i+0x1b6>
    2304:	1c0e      	adds	r6, r1, #0
    2306:	681a      	ldr	r2, [r3, #0]
    2308:	3642      	adds	r6, #66	; 0x42
    230a:	1d11      	adds	r1, r2, #4
    230c:	6019      	str	r1, [r3, #0]
    230e:	6813      	ldr	r3, [r2, #0]
    2310:	7033      	strb	r3, [r6, #0]
    2312:	e0a1      	b.n	2458 <_printf_i+0x1bc>
    2314:	6821      	ldr	r1, [r4, #0]
    2316:	681a      	ldr	r2, [r3, #0]
    2318:	0608      	lsls	r0, r1, #24
    231a:	d406      	bmi.n	232a <_printf_i+0x8e>
    231c:	0649      	lsls	r1, r1, #25
    231e:	d504      	bpl.n	232a <_printf_i+0x8e>
    2320:	1d11      	adds	r1, r2, #4
    2322:	6019      	str	r1, [r3, #0]
    2324:	2300      	movs	r3, #0
    2326:	5ed5      	ldrsh	r5, [r2, r3]
    2328:	e002      	b.n	2330 <_printf_i+0x94>
    232a:	1d11      	adds	r1, r2, #4
    232c:	6019      	str	r1, [r3, #0]
    232e:	6815      	ldr	r5, [r2, #0]
    2330:	2d00      	cmp	r5, #0
    2332:	da3b      	bge.n	23ac <_printf_i+0x110>
    2334:	232d      	movs	r3, #45	; 0x2d
    2336:	9a04      	ldr	r2, [sp, #16]
    2338:	426d      	negs	r5, r5
    233a:	7013      	strb	r3, [r2, #0]
    233c:	e036      	b.n	23ac <_printf_i+0x110>
    233e:	6821      	ldr	r1, [r4, #0]
    2340:	681a      	ldr	r2, [r3, #0]
    2342:	0608      	lsls	r0, r1, #24
    2344:	d406      	bmi.n	2354 <_printf_i+0xb8>
    2346:	0649      	lsls	r1, r1, #25
    2348:	d504      	bpl.n	2354 <_printf_i+0xb8>
    234a:	6815      	ldr	r5, [r2, #0]
    234c:	1d11      	adds	r1, r2, #4
    234e:	6019      	str	r1, [r3, #0]
    2350:	b2ad      	uxth	r5, r5
    2352:	e002      	b.n	235a <_printf_i+0xbe>
    2354:	1d11      	adds	r1, r2, #4
    2356:	6019      	str	r1, [r3, #0]
    2358:	6815      	ldr	r5, [r2, #0]
    235a:	4b5a      	ldr	r3, [pc, #360]	; (24c4 <_printf_i+0x228>)
    235c:	7e22      	ldrb	r2, [r4, #24]
    235e:	9303      	str	r3, [sp, #12]
    2360:	270a      	movs	r7, #10
    2362:	2a6f      	cmp	r2, #111	; 0x6f
    2364:	d11d      	bne.n	23a2 <_printf_i+0x106>
    2366:	2708      	movs	r7, #8
    2368:	e01b      	b.n	23a2 <_printf_i+0x106>
    236a:	1c22      	adds	r2, r4, #0
    236c:	2178      	movs	r1, #120	; 0x78
    236e:	3245      	adds	r2, #69	; 0x45
    2370:	7011      	strb	r1, [r2, #0]
    2372:	4a55      	ldr	r2, [pc, #340]	; (24c8 <_printf_i+0x22c>)
    2374:	6819      	ldr	r1, [r3, #0]
    2376:	9203      	str	r2, [sp, #12]
    2378:	1d08      	adds	r0, r1, #4
    237a:	6822      	ldr	r2, [r4, #0]
    237c:	6018      	str	r0, [r3, #0]
    237e:	680d      	ldr	r5, [r1, #0]
    2380:	0610      	lsls	r0, r2, #24
    2382:	d402      	bmi.n	238a <_printf_i+0xee>
    2384:	0650      	lsls	r0, r2, #25
    2386:	d500      	bpl.n	238a <_printf_i+0xee>
    2388:	b2ad      	uxth	r5, r5
    238a:	07d3      	lsls	r3, r2, #31
    238c:	d502      	bpl.n	2394 <_printf_i+0xf8>
    238e:	2320      	movs	r3, #32
    2390:	431a      	orrs	r2, r3
    2392:	6022      	str	r2, [r4, #0]
    2394:	2710      	movs	r7, #16
    2396:	2d00      	cmp	r5, #0
    2398:	d103      	bne.n	23a2 <_printf_i+0x106>
    239a:	2320      	movs	r3, #32
    239c:	6822      	ldr	r2, [r4, #0]
    239e:	439a      	bics	r2, r3
    23a0:	6022      	str	r2, [r4, #0]
    23a2:	1c23      	adds	r3, r4, #0
    23a4:	2200      	movs	r2, #0
    23a6:	3343      	adds	r3, #67	; 0x43
    23a8:	701a      	strb	r2, [r3, #0]
    23aa:	e002      	b.n	23b2 <_printf_i+0x116>
    23ac:	270a      	movs	r7, #10
    23ae:	4b45      	ldr	r3, [pc, #276]	; (24c4 <_printf_i+0x228>)
    23b0:	9303      	str	r3, [sp, #12]
    23b2:	6863      	ldr	r3, [r4, #4]
    23b4:	60a3      	str	r3, [r4, #8]
    23b6:	2b00      	cmp	r3, #0
    23b8:	db03      	blt.n	23c2 <_printf_i+0x126>
    23ba:	2204      	movs	r2, #4
    23bc:	6821      	ldr	r1, [r4, #0]
    23be:	4391      	bics	r1, r2
    23c0:	6021      	str	r1, [r4, #0]
    23c2:	2d00      	cmp	r5, #0
    23c4:	d102      	bne.n	23cc <_printf_i+0x130>
    23c6:	9e04      	ldr	r6, [sp, #16]
    23c8:	2b00      	cmp	r3, #0
    23ca:	d00e      	beq.n	23ea <_printf_i+0x14e>
    23cc:	9e04      	ldr	r6, [sp, #16]
    23ce:	1c28      	adds	r0, r5, #0
    23d0:	1c39      	adds	r1, r7, #0
    23d2:	f7ff fa73 	bl	18bc <__aeabi_uidivmod>
    23d6:	9b03      	ldr	r3, [sp, #12]
    23d8:	3e01      	subs	r6, #1
    23da:	5c5b      	ldrb	r3, [r3, r1]
    23dc:	1c28      	adds	r0, r5, #0
    23de:	7033      	strb	r3, [r6, #0]
    23e0:	1c39      	adds	r1, r7, #0
    23e2:	f7ff f9e5 	bl	17b0 <__aeabi_uidiv>
    23e6:	1e05      	subs	r5, r0, #0
    23e8:	d1f1      	bne.n	23ce <_printf_i+0x132>
    23ea:	2f08      	cmp	r7, #8
    23ec:	d109      	bne.n	2402 <_printf_i+0x166>
    23ee:	6823      	ldr	r3, [r4, #0]
    23f0:	07db      	lsls	r3, r3, #31
    23f2:	d506      	bpl.n	2402 <_printf_i+0x166>
    23f4:	6863      	ldr	r3, [r4, #4]
    23f6:	6922      	ldr	r2, [r4, #16]
    23f8:	4293      	cmp	r3, r2
    23fa:	dc02      	bgt.n	2402 <_printf_i+0x166>
    23fc:	2330      	movs	r3, #48	; 0x30
    23fe:	3e01      	subs	r6, #1
    2400:	7033      	strb	r3, [r6, #0]
    2402:	9b04      	ldr	r3, [sp, #16]
    2404:	1b9b      	subs	r3, r3, r6
    2406:	6123      	str	r3, [r4, #16]
    2408:	e02b      	b.n	2462 <_printf_i+0x1c6>
    240a:	6809      	ldr	r1, [r1, #0]
    240c:	681a      	ldr	r2, [r3, #0]
    240e:	0608      	lsls	r0, r1, #24
    2410:	d407      	bmi.n	2422 <_printf_i+0x186>
    2412:	0649      	lsls	r1, r1, #25
    2414:	d505      	bpl.n	2422 <_printf_i+0x186>
    2416:	1d11      	adds	r1, r2, #4
    2418:	6019      	str	r1, [r3, #0]
    241a:	6813      	ldr	r3, [r2, #0]
    241c:	8aa2      	ldrh	r2, [r4, #20]
    241e:	801a      	strh	r2, [r3, #0]
    2420:	e004      	b.n	242c <_printf_i+0x190>
    2422:	1d11      	adds	r1, r2, #4
    2424:	6019      	str	r1, [r3, #0]
    2426:	6813      	ldr	r3, [r2, #0]
    2428:	6962      	ldr	r2, [r4, #20]
    242a:	601a      	str	r2, [r3, #0]
    242c:	2300      	movs	r3, #0
    242e:	9e04      	ldr	r6, [sp, #16]
    2430:	6123      	str	r3, [r4, #16]
    2432:	e016      	b.n	2462 <_printf_i+0x1c6>
    2434:	681a      	ldr	r2, [r3, #0]
    2436:	1d11      	adds	r1, r2, #4
    2438:	6019      	str	r1, [r3, #0]
    243a:	6816      	ldr	r6, [r2, #0]
    243c:	2100      	movs	r1, #0
    243e:	1c30      	adds	r0, r6, #0
    2440:	6862      	ldr	r2, [r4, #4]
    2442:	f000 f9ff 	bl	2844 <memchr>
    2446:	2800      	cmp	r0, #0
    2448:	d001      	beq.n	244e <_printf_i+0x1b2>
    244a:	1b80      	subs	r0, r0, r6
    244c:	6060      	str	r0, [r4, #4]
    244e:	6863      	ldr	r3, [r4, #4]
    2450:	e003      	b.n	245a <_printf_i+0x1be>
    2452:	1c26      	adds	r6, r4, #0
    2454:	3642      	adds	r6, #66	; 0x42
    2456:	7032      	strb	r2, [r6, #0]
    2458:	2301      	movs	r3, #1
    245a:	6123      	str	r3, [r4, #16]
    245c:	2300      	movs	r3, #0
    245e:	9a04      	ldr	r2, [sp, #16]
    2460:	7013      	strb	r3, [r2, #0]
    2462:	9b07      	ldr	r3, [sp, #28]
    2464:	9805      	ldr	r0, [sp, #20]
    2466:	9300      	str	r3, [sp, #0]
    2468:	1c21      	adds	r1, r4, #0
    246a:	9b06      	ldr	r3, [sp, #24]
    246c:	aa09      	add	r2, sp, #36	; 0x24
    246e:	f7ff fea7 	bl	21c0 <_printf_common>
    2472:	1c43      	adds	r3, r0, #1
    2474:	d102      	bne.n	247c <_printf_i+0x1e0>
    2476:	2001      	movs	r0, #1
    2478:	4240      	negs	r0, r0
    247a:	e021      	b.n	24c0 <_printf_i+0x224>
    247c:	6923      	ldr	r3, [r4, #16]
    247e:	9805      	ldr	r0, [sp, #20]
    2480:	9906      	ldr	r1, [sp, #24]
    2482:	1c32      	adds	r2, r6, #0
    2484:	9d07      	ldr	r5, [sp, #28]
    2486:	47a8      	blx	r5
    2488:	1c43      	adds	r3, r0, #1
    248a:	d0f4      	beq.n	2476 <_printf_i+0x1da>
    248c:	6823      	ldr	r3, [r4, #0]
    248e:	079b      	lsls	r3, r3, #30
    2490:	d405      	bmi.n	249e <_printf_i+0x202>
    2492:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2494:	68e0      	ldr	r0, [r4, #12]
    2496:	4298      	cmp	r0, r3
    2498:	da12      	bge.n	24c0 <_printf_i+0x224>
    249a:	1c18      	adds	r0, r3, #0
    249c:	e010      	b.n	24c0 <_printf_i+0x224>
    249e:	2500      	movs	r5, #0
    24a0:	68e3      	ldr	r3, [r4, #12]
    24a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    24a4:	1a9b      	subs	r3, r3, r2
    24a6:	429d      	cmp	r5, r3
    24a8:	daf3      	bge.n	2492 <_printf_i+0x1f6>
    24aa:	1c22      	adds	r2, r4, #0
    24ac:	2301      	movs	r3, #1
    24ae:	9805      	ldr	r0, [sp, #20]
    24b0:	9906      	ldr	r1, [sp, #24]
    24b2:	3219      	adds	r2, #25
    24b4:	9e07      	ldr	r6, [sp, #28]
    24b6:	47b0      	blx	r6
    24b8:	1c43      	adds	r3, r0, #1
    24ba:	d0dc      	beq.n	2476 <_printf_i+0x1da>
    24bc:	3501      	adds	r5, #1
    24be:	e7ef      	b.n	24a0 <_printf_i+0x204>
    24c0:	b00b      	add	sp, #44	; 0x2c
    24c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24c4:	00002999 	.word	0x00002999
    24c8:	000029aa 	.word	0x000029aa

000024cc <_sbrk_r>:
    24cc:	b538      	push	{r3, r4, r5, lr}
    24ce:	2300      	movs	r3, #0
    24d0:	4c06      	ldr	r4, [pc, #24]	; (24ec <_sbrk_r+0x20>)
    24d2:	1c05      	adds	r5, r0, #0
    24d4:	1c08      	adds	r0, r1, #0
    24d6:	6023      	str	r3, [r4, #0]
    24d8:	f7fe ff6e 	bl	13b8 <_sbrk>
    24dc:	1c43      	adds	r3, r0, #1
    24de:	d103      	bne.n	24e8 <_sbrk_r+0x1c>
    24e0:	6823      	ldr	r3, [r4, #0]
    24e2:	2b00      	cmp	r3, #0
    24e4:	d000      	beq.n	24e8 <_sbrk_r+0x1c>
    24e6:	602b      	str	r3, [r5, #0]
    24e8:	bd38      	pop	{r3, r4, r5, pc}
    24ea:	46c0      	nop			; (mov r8, r8)
    24ec:	200001e0 	.word	0x200001e0

000024f0 <__sread>:
    24f0:	b538      	push	{r3, r4, r5, lr}
    24f2:	1c0c      	adds	r4, r1, #0
    24f4:	250e      	movs	r5, #14
    24f6:	5f49      	ldrsh	r1, [r1, r5]
    24f8:	f000 f9b0 	bl	285c <_read_r>
    24fc:	2800      	cmp	r0, #0
    24fe:	db03      	blt.n	2508 <__sread+0x18>
    2500:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2502:	181b      	adds	r3, r3, r0
    2504:	6563      	str	r3, [r4, #84]	; 0x54
    2506:	e003      	b.n	2510 <__sread+0x20>
    2508:	89a2      	ldrh	r2, [r4, #12]
    250a:	4b02      	ldr	r3, [pc, #8]	; (2514 <__sread+0x24>)
    250c:	4013      	ands	r3, r2
    250e:	81a3      	strh	r3, [r4, #12]
    2510:	bd38      	pop	{r3, r4, r5, pc}
    2512:	46c0      	nop			; (mov r8, r8)
    2514:	ffffefff 	.word	0xffffefff

00002518 <__swrite>:
    2518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    251a:	1c1e      	adds	r6, r3, #0
    251c:	898b      	ldrh	r3, [r1, #12]
    251e:	1c05      	adds	r5, r0, #0
    2520:	1c0c      	adds	r4, r1, #0
    2522:	1c17      	adds	r7, r2, #0
    2524:	05db      	lsls	r3, r3, #23
    2526:	d505      	bpl.n	2534 <__swrite+0x1c>
    2528:	230e      	movs	r3, #14
    252a:	5ec9      	ldrsh	r1, [r1, r3]
    252c:	2200      	movs	r2, #0
    252e:	2302      	movs	r3, #2
    2530:	f000 f91c 	bl	276c <_lseek_r>
    2534:	89a2      	ldrh	r2, [r4, #12]
    2536:	4b05      	ldr	r3, [pc, #20]	; (254c <__swrite+0x34>)
    2538:	1c28      	adds	r0, r5, #0
    253a:	4013      	ands	r3, r2
    253c:	81a3      	strh	r3, [r4, #12]
    253e:	1c3a      	adds	r2, r7, #0
    2540:	230e      	movs	r3, #14
    2542:	5ee1      	ldrsh	r1, [r4, r3]
    2544:	1c33      	adds	r3, r6, #0
    2546:	f000 f877 	bl	2638 <_write_r>
    254a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    254c:	ffffefff 	.word	0xffffefff

00002550 <__sseek>:
    2550:	b538      	push	{r3, r4, r5, lr}
    2552:	1c0c      	adds	r4, r1, #0
    2554:	250e      	movs	r5, #14
    2556:	5f49      	ldrsh	r1, [r1, r5]
    2558:	f000 f908 	bl	276c <_lseek_r>
    255c:	89a3      	ldrh	r3, [r4, #12]
    255e:	1c42      	adds	r2, r0, #1
    2560:	d103      	bne.n	256a <__sseek+0x1a>
    2562:	4a05      	ldr	r2, [pc, #20]	; (2578 <__sseek+0x28>)
    2564:	4013      	ands	r3, r2
    2566:	81a3      	strh	r3, [r4, #12]
    2568:	e004      	b.n	2574 <__sseek+0x24>
    256a:	2280      	movs	r2, #128	; 0x80
    256c:	0152      	lsls	r2, r2, #5
    256e:	4313      	orrs	r3, r2
    2570:	81a3      	strh	r3, [r4, #12]
    2572:	6560      	str	r0, [r4, #84]	; 0x54
    2574:	bd38      	pop	{r3, r4, r5, pc}
    2576:	46c0      	nop			; (mov r8, r8)
    2578:	ffffefff 	.word	0xffffefff

0000257c <__sclose>:
    257c:	b508      	push	{r3, lr}
    257e:	230e      	movs	r3, #14
    2580:	5ec9      	ldrsh	r1, [r1, r3]
    2582:	f000 f8e1 	bl	2748 <_close_r>
    2586:	bd08      	pop	{r3, pc}

00002588 <__swbuf_r>:
    2588:	b570      	push	{r4, r5, r6, lr}
    258a:	1c05      	adds	r5, r0, #0
    258c:	1c0e      	adds	r6, r1, #0
    258e:	1c14      	adds	r4, r2, #0
    2590:	2800      	cmp	r0, #0
    2592:	d004      	beq.n	259e <__swbuf_r+0x16>
    2594:	6983      	ldr	r3, [r0, #24]
    2596:	2b00      	cmp	r3, #0
    2598:	d101      	bne.n	259e <__swbuf_r+0x16>
    259a:	f7ff fb9f 	bl	1cdc <__sinit>
    259e:	4b23      	ldr	r3, [pc, #140]	; (262c <__swbuf_r+0xa4>)
    25a0:	429c      	cmp	r4, r3
    25a2:	d101      	bne.n	25a8 <__swbuf_r+0x20>
    25a4:	686c      	ldr	r4, [r5, #4]
    25a6:	e008      	b.n	25ba <__swbuf_r+0x32>
    25a8:	4b21      	ldr	r3, [pc, #132]	; (2630 <__swbuf_r+0xa8>)
    25aa:	429c      	cmp	r4, r3
    25ac:	d101      	bne.n	25b2 <__swbuf_r+0x2a>
    25ae:	68ac      	ldr	r4, [r5, #8]
    25b0:	e003      	b.n	25ba <__swbuf_r+0x32>
    25b2:	4b20      	ldr	r3, [pc, #128]	; (2634 <__swbuf_r+0xac>)
    25b4:	429c      	cmp	r4, r3
    25b6:	d100      	bne.n	25ba <__swbuf_r+0x32>
    25b8:	68ec      	ldr	r4, [r5, #12]
    25ba:	69a3      	ldr	r3, [r4, #24]
    25bc:	60a3      	str	r3, [r4, #8]
    25be:	89a3      	ldrh	r3, [r4, #12]
    25c0:	071b      	lsls	r3, r3, #28
    25c2:	d50a      	bpl.n	25da <__swbuf_r+0x52>
    25c4:	6923      	ldr	r3, [r4, #16]
    25c6:	2b00      	cmp	r3, #0
    25c8:	d007      	beq.n	25da <__swbuf_r+0x52>
    25ca:	6823      	ldr	r3, [r4, #0]
    25cc:	6922      	ldr	r2, [r4, #16]
    25ce:	b2f6      	uxtb	r6, r6
    25d0:	1a98      	subs	r0, r3, r2
    25d2:	6963      	ldr	r3, [r4, #20]
    25d4:	4298      	cmp	r0, r3
    25d6:	db0f      	blt.n	25f8 <__swbuf_r+0x70>
    25d8:	e008      	b.n	25ec <__swbuf_r+0x64>
    25da:	1c28      	adds	r0, r5, #0
    25dc:	1c21      	adds	r1, r4, #0
    25de:	f000 f83f 	bl	2660 <__swsetup_r>
    25e2:	2800      	cmp	r0, #0
    25e4:	d0f1      	beq.n	25ca <__swbuf_r+0x42>
    25e6:	2001      	movs	r0, #1
    25e8:	4240      	negs	r0, r0
    25ea:	e01d      	b.n	2628 <__swbuf_r+0xa0>
    25ec:	1c28      	adds	r0, r5, #0
    25ee:	1c21      	adds	r1, r4, #0
    25f0:	f7ff fb06 	bl	1c00 <_fflush_r>
    25f4:	2800      	cmp	r0, #0
    25f6:	d1f6      	bne.n	25e6 <__swbuf_r+0x5e>
    25f8:	68a3      	ldr	r3, [r4, #8]
    25fa:	3001      	adds	r0, #1
    25fc:	3b01      	subs	r3, #1
    25fe:	60a3      	str	r3, [r4, #8]
    2600:	6823      	ldr	r3, [r4, #0]
    2602:	1c5a      	adds	r2, r3, #1
    2604:	6022      	str	r2, [r4, #0]
    2606:	701e      	strb	r6, [r3, #0]
    2608:	6963      	ldr	r3, [r4, #20]
    260a:	4298      	cmp	r0, r3
    260c:	d005      	beq.n	261a <__swbuf_r+0x92>
    260e:	89a3      	ldrh	r3, [r4, #12]
    2610:	1c30      	adds	r0, r6, #0
    2612:	07db      	lsls	r3, r3, #31
    2614:	d508      	bpl.n	2628 <__swbuf_r+0xa0>
    2616:	2e0a      	cmp	r6, #10
    2618:	d106      	bne.n	2628 <__swbuf_r+0xa0>
    261a:	1c28      	adds	r0, r5, #0
    261c:	1c21      	adds	r1, r4, #0
    261e:	f7ff faef 	bl	1c00 <_fflush_r>
    2622:	2800      	cmp	r0, #0
    2624:	d1df      	bne.n	25e6 <__swbuf_r+0x5e>
    2626:	1c30      	adds	r0, r6, #0
    2628:	bd70      	pop	{r4, r5, r6, pc}
    262a:	46c0      	nop			; (mov r8, r8)
    262c:	00002928 	.word	0x00002928
    2630:	00002948 	.word	0x00002948
    2634:	00002968 	.word	0x00002968

00002638 <_write_r>:
    2638:	b538      	push	{r3, r4, r5, lr}
    263a:	1c05      	adds	r5, r0, #0
    263c:	2000      	movs	r0, #0
    263e:	4c07      	ldr	r4, [pc, #28]	; (265c <_write_r+0x24>)
    2640:	6020      	str	r0, [r4, #0]
    2642:	1c08      	adds	r0, r1, #0
    2644:	1c11      	adds	r1, r2, #0
    2646:	1c1a      	adds	r2, r3, #0
    2648:	f7fe fe8e 	bl	1368 <_write>
    264c:	1c43      	adds	r3, r0, #1
    264e:	d103      	bne.n	2658 <_write_r+0x20>
    2650:	6823      	ldr	r3, [r4, #0]
    2652:	2b00      	cmp	r3, #0
    2654:	d000      	beq.n	2658 <_write_r+0x20>
    2656:	602b      	str	r3, [r5, #0]
    2658:	bd38      	pop	{r3, r4, r5, pc}
    265a:	46c0      	nop			; (mov r8, r8)
    265c:	200001e0 	.word	0x200001e0

00002660 <__swsetup_r>:
    2660:	4b35      	ldr	r3, [pc, #212]	; (2738 <__swsetup_r+0xd8>)
    2662:	b570      	push	{r4, r5, r6, lr}
    2664:	681d      	ldr	r5, [r3, #0]
    2666:	1c06      	adds	r6, r0, #0
    2668:	1c0c      	adds	r4, r1, #0
    266a:	2d00      	cmp	r5, #0
    266c:	d005      	beq.n	267a <__swsetup_r+0x1a>
    266e:	69ab      	ldr	r3, [r5, #24]
    2670:	2b00      	cmp	r3, #0
    2672:	d102      	bne.n	267a <__swsetup_r+0x1a>
    2674:	1c28      	adds	r0, r5, #0
    2676:	f7ff fb31 	bl	1cdc <__sinit>
    267a:	4b30      	ldr	r3, [pc, #192]	; (273c <__swsetup_r+0xdc>)
    267c:	429c      	cmp	r4, r3
    267e:	d101      	bne.n	2684 <__swsetup_r+0x24>
    2680:	686c      	ldr	r4, [r5, #4]
    2682:	e008      	b.n	2696 <__swsetup_r+0x36>
    2684:	4b2e      	ldr	r3, [pc, #184]	; (2740 <__swsetup_r+0xe0>)
    2686:	429c      	cmp	r4, r3
    2688:	d101      	bne.n	268e <__swsetup_r+0x2e>
    268a:	68ac      	ldr	r4, [r5, #8]
    268c:	e003      	b.n	2696 <__swsetup_r+0x36>
    268e:	4b2d      	ldr	r3, [pc, #180]	; (2744 <__swsetup_r+0xe4>)
    2690:	429c      	cmp	r4, r3
    2692:	d100      	bne.n	2696 <__swsetup_r+0x36>
    2694:	68ec      	ldr	r4, [r5, #12]
    2696:	89a3      	ldrh	r3, [r4, #12]
    2698:	b29a      	uxth	r2, r3
    269a:	0711      	lsls	r1, r2, #28
    269c:	d423      	bmi.n	26e6 <__swsetup_r+0x86>
    269e:	06d1      	lsls	r1, r2, #27
    26a0:	d407      	bmi.n	26b2 <__swsetup_r+0x52>
    26a2:	2209      	movs	r2, #9
    26a4:	2001      	movs	r0, #1
    26a6:	6032      	str	r2, [r6, #0]
    26a8:	3237      	adds	r2, #55	; 0x37
    26aa:	4313      	orrs	r3, r2
    26ac:	81a3      	strh	r3, [r4, #12]
    26ae:	4240      	negs	r0, r0
    26b0:	e040      	b.n	2734 <__swsetup_r+0xd4>
    26b2:	0753      	lsls	r3, r2, #29
    26b4:	d513      	bpl.n	26de <__swsetup_r+0x7e>
    26b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    26b8:	2900      	cmp	r1, #0
    26ba:	d008      	beq.n	26ce <__swsetup_r+0x6e>
    26bc:	1c23      	adds	r3, r4, #0
    26be:	3344      	adds	r3, #68	; 0x44
    26c0:	4299      	cmp	r1, r3
    26c2:	d002      	beq.n	26ca <__swsetup_r+0x6a>
    26c4:	1c30      	adds	r0, r6, #0
    26c6:	f7ff fba5 	bl	1e14 <_free_r>
    26ca:	2300      	movs	r3, #0
    26cc:	6363      	str	r3, [r4, #52]	; 0x34
    26ce:	2224      	movs	r2, #36	; 0x24
    26d0:	89a3      	ldrh	r3, [r4, #12]
    26d2:	4393      	bics	r3, r2
    26d4:	81a3      	strh	r3, [r4, #12]
    26d6:	2300      	movs	r3, #0
    26d8:	6063      	str	r3, [r4, #4]
    26da:	6923      	ldr	r3, [r4, #16]
    26dc:	6023      	str	r3, [r4, #0]
    26de:	2208      	movs	r2, #8
    26e0:	89a3      	ldrh	r3, [r4, #12]
    26e2:	4313      	orrs	r3, r2
    26e4:	81a3      	strh	r3, [r4, #12]
    26e6:	6923      	ldr	r3, [r4, #16]
    26e8:	2b00      	cmp	r3, #0
    26ea:	d10b      	bne.n	2704 <__swsetup_r+0xa4>
    26ec:	23a0      	movs	r3, #160	; 0xa0
    26ee:	89a2      	ldrh	r2, [r4, #12]
    26f0:	009b      	lsls	r3, r3, #2
    26f2:	4013      	ands	r3, r2
    26f4:	2280      	movs	r2, #128	; 0x80
    26f6:	0092      	lsls	r2, r2, #2
    26f8:	4293      	cmp	r3, r2
    26fa:	d003      	beq.n	2704 <__swsetup_r+0xa4>
    26fc:	1c30      	adds	r0, r6, #0
    26fe:	1c21      	adds	r1, r4, #0
    2700:	f000 f848 	bl	2794 <__smakebuf_r>
    2704:	2301      	movs	r3, #1
    2706:	89a2      	ldrh	r2, [r4, #12]
    2708:	4013      	ands	r3, r2
    270a:	d005      	beq.n	2718 <__swsetup_r+0xb8>
    270c:	2300      	movs	r3, #0
    270e:	60a3      	str	r3, [r4, #8]
    2710:	6963      	ldr	r3, [r4, #20]
    2712:	425b      	negs	r3, r3
    2714:	61a3      	str	r3, [r4, #24]
    2716:	e003      	b.n	2720 <__swsetup_r+0xc0>
    2718:	0791      	lsls	r1, r2, #30
    271a:	d400      	bmi.n	271e <__swsetup_r+0xbe>
    271c:	6963      	ldr	r3, [r4, #20]
    271e:	60a3      	str	r3, [r4, #8]
    2720:	2000      	movs	r0, #0
    2722:	6923      	ldr	r3, [r4, #16]
    2724:	4283      	cmp	r3, r0
    2726:	d105      	bne.n	2734 <__swsetup_r+0xd4>
    2728:	0613      	lsls	r3, r2, #24
    272a:	d503      	bpl.n	2734 <__swsetup_r+0xd4>
    272c:	2340      	movs	r3, #64	; 0x40
    272e:	431a      	orrs	r2, r3
    2730:	81a2      	strh	r2, [r4, #12]
    2732:	3801      	subs	r0, #1
    2734:	bd70      	pop	{r4, r5, r6, pc}
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	20000064 	.word	0x20000064
    273c:	00002928 	.word	0x00002928
    2740:	00002948 	.word	0x00002948
    2744:	00002968 	.word	0x00002968

00002748 <_close_r>:
    2748:	b538      	push	{r3, r4, r5, lr}
    274a:	2300      	movs	r3, #0
    274c:	4c06      	ldr	r4, [pc, #24]	; (2768 <_close_r+0x20>)
    274e:	1c05      	adds	r5, r0, #0
    2750:	1c08      	adds	r0, r1, #0
    2752:	6023      	str	r3, [r4, #0]
    2754:	f7fe fe42 	bl	13dc <_close>
    2758:	1c43      	adds	r3, r0, #1
    275a:	d103      	bne.n	2764 <_close_r+0x1c>
    275c:	6823      	ldr	r3, [r4, #0]
    275e:	2b00      	cmp	r3, #0
    2760:	d000      	beq.n	2764 <_close_r+0x1c>
    2762:	602b      	str	r3, [r5, #0]
    2764:	bd38      	pop	{r3, r4, r5, pc}
    2766:	46c0      	nop			; (mov r8, r8)
    2768:	200001e0 	.word	0x200001e0

0000276c <_lseek_r>:
    276c:	b538      	push	{r3, r4, r5, lr}
    276e:	1c05      	adds	r5, r0, #0
    2770:	2000      	movs	r0, #0
    2772:	4c07      	ldr	r4, [pc, #28]	; (2790 <_lseek_r+0x24>)
    2774:	6020      	str	r0, [r4, #0]
    2776:	1c08      	adds	r0, r1, #0
    2778:	1c11      	adds	r1, r2, #0
    277a:	1c1a      	adds	r2, r3, #0
    277c:	f7fe fe3a 	bl	13f4 <_lseek>
    2780:	1c43      	adds	r3, r0, #1
    2782:	d103      	bne.n	278c <_lseek_r+0x20>
    2784:	6823      	ldr	r3, [r4, #0]
    2786:	2b00      	cmp	r3, #0
    2788:	d000      	beq.n	278c <_lseek_r+0x20>
    278a:	602b      	str	r3, [r5, #0]
    278c:	bd38      	pop	{r3, r4, r5, pc}
    278e:	46c0      	nop			; (mov r8, r8)
    2790:	200001e0 	.word	0x200001e0

00002794 <__smakebuf_r>:
    2794:	b5f0      	push	{r4, r5, r6, r7, lr}
    2796:	898b      	ldrh	r3, [r1, #12]
    2798:	b091      	sub	sp, #68	; 0x44
    279a:	079b      	lsls	r3, r3, #30
    279c:	d506      	bpl.n	27ac <__smakebuf_r+0x18>
    279e:	1c0b      	adds	r3, r1, #0
    27a0:	3347      	adds	r3, #71	; 0x47
    27a2:	600b      	str	r3, [r1, #0]
    27a4:	610b      	str	r3, [r1, #16]
    27a6:	2301      	movs	r3, #1
    27a8:	614b      	str	r3, [r1, #20]
    27aa:	e045      	b.n	2838 <__smakebuf_r+0xa4>
    27ac:	1c0c      	adds	r4, r1, #0
    27ae:	230e      	movs	r3, #14
    27b0:	5ec9      	ldrsh	r1, [r1, r3]
    27b2:	1c06      	adds	r6, r0, #0
    27b4:	2900      	cmp	r1, #0
    27b6:	da04      	bge.n	27c2 <__smakebuf_r+0x2e>
    27b8:	2380      	movs	r3, #128	; 0x80
    27ba:	89a5      	ldrh	r5, [r4, #12]
    27bc:	401d      	ands	r5, r3
    27be:	d110      	bne.n	27e2 <__smakebuf_r+0x4e>
    27c0:	e00c      	b.n	27dc <__smakebuf_r+0x48>
    27c2:	aa01      	add	r2, sp, #4
    27c4:	f000 f85e 	bl	2884 <_fstat_r>
    27c8:	2800      	cmp	r0, #0
    27ca:	dbf5      	blt.n	27b8 <__smakebuf_r+0x24>
    27cc:	23f0      	movs	r3, #240	; 0xf0
    27ce:	9d02      	ldr	r5, [sp, #8]
    27d0:	021b      	lsls	r3, r3, #8
    27d2:	401d      	ands	r5, r3
    27d4:	4b19      	ldr	r3, [pc, #100]	; (283c <__smakebuf_r+0xa8>)
    27d6:	18ed      	adds	r5, r5, r3
    27d8:	426b      	negs	r3, r5
    27da:	415d      	adcs	r5, r3
    27dc:	2780      	movs	r7, #128	; 0x80
    27de:	00ff      	lsls	r7, r7, #3
    27e0:	e001      	b.n	27e6 <__smakebuf_r+0x52>
    27e2:	2500      	movs	r5, #0
    27e4:	2740      	movs	r7, #64	; 0x40
    27e6:	1c30      	adds	r0, r6, #0
    27e8:	1c39      	adds	r1, r7, #0
    27ea:	f7ff fb59 	bl	1ea0 <_malloc_r>
    27ee:	2800      	cmp	r0, #0
    27f0:	d10c      	bne.n	280c <__smakebuf_r+0x78>
    27f2:	89a3      	ldrh	r3, [r4, #12]
    27f4:	059a      	lsls	r2, r3, #22
    27f6:	d41f      	bmi.n	2838 <__smakebuf_r+0xa4>
    27f8:	2202      	movs	r2, #2
    27fa:	4313      	orrs	r3, r2
    27fc:	81a3      	strh	r3, [r4, #12]
    27fe:	1c23      	adds	r3, r4, #0
    2800:	3347      	adds	r3, #71	; 0x47
    2802:	6023      	str	r3, [r4, #0]
    2804:	6123      	str	r3, [r4, #16]
    2806:	2301      	movs	r3, #1
    2808:	6163      	str	r3, [r4, #20]
    280a:	e015      	b.n	2838 <__smakebuf_r+0xa4>
    280c:	2280      	movs	r2, #128	; 0x80
    280e:	4b0c      	ldr	r3, [pc, #48]	; (2840 <__smakebuf_r+0xac>)
    2810:	62b3      	str	r3, [r6, #40]	; 0x28
    2812:	89a3      	ldrh	r3, [r4, #12]
    2814:	6020      	str	r0, [r4, #0]
    2816:	4313      	orrs	r3, r2
    2818:	81a3      	strh	r3, [r4, #12]
    281a:	6120      	str	r0, [r4, #16]
    281c:	6167      	str	r7, [r4, #20]
    281e:	2d00      	cmp	r5, #0
    2820:	d00a      	beq.n	2838 <__smakebuf_r+0xa4>
    2822:	230e      	movs	r3, #14
    2824:	5ee1      	ldrsh	r1, [r4, r3]
    2826:	1c30      	adds	r0, r6, #0
    2828:	f000 f83e 	bl	28a8 <_isatty_r>
    282c:	2800      	cmp	r0, #0
    282e:	d003      	beq.n	2838 <__smakebuf_r+0xa4>
    2830:	2201      	movs	r2, #1
    2832:	89a3      	ldrh	r3, [r4, #12]
    2834:	4313      	orrs	r3, r2
    2836:	81a3      	strh	r3, [r4, #12]
    2838:	b011      	add	sp, #68	; 0x44
    283a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    283c:	ffffe000 	.word	0xffffe000
    2840:	00001c59 	.word	0x00001c59

00002844 <memchr>:
    2844:	b2c9      	uxtb	r1, r1
    2846:	1882      	adds	r2, r0, r2
    2848:	4290      	cmp	r0, r2
    284a:	d004      	beq.n	2856 <memchr+0x12>
    284c:	7803      	ldrb	r3, [r0, #0]
    284e:	428b      	cmp	r3, r1
    2850:	d002      	beq.n	2858 <memchr+0x14>
    2852:	3001      	adds	r0, #1
    2854:	e7f8      	b.n	2848 <memchr+0x4>
    2856:	2000      	movs	r0, #0
    2858:	4770      	bx	lr
	...

0000285c <_read_r>:
    285c:	b538      	push	{r3, r4, r5, lr}
    285e:	1c05      	adds	r5, r0, #0
    2860:	2000      	movs	r0, #0
    2862:	4c07      	ldr	r4, [pc, #28]	; (2880 <_read_r+0x24>)
    2864:	6020      	str	r0, [r4, #0]
    2866:	1c08      	adds	r0, r1, #0
    2868:	1c11      	adds	r1, r2, #0
    286a:	1c1a      	adds	r2, r3, #0
    286c:	f7fe fd5a 	bl	1324 <_read>
    2870:	1c43      	adds	r3, r0, #1
    2872:	d103      	bne.n	287c <_read_r+0x20>
    2874:	6823      	ldr	r3, [r4, #0]
    2876:	2b00      	cmp	r3, #0
    2878:	d000      	beq.n	287c <_read_r+0x20>
    287a:	602b      	str	r3, [r5, #0]
    287c:	bd38      	pop	{r3, r4, r5, pc}
    287e:	46c0      	nop			; (mov r8, r8)
    2880:	200001e0 	.word	0x200001e0

00002884 <_fstat_r>:
    2884:	b538      	push	{r3, r4, r5, lr}
    2886:	2300      	movs	r3, #0
    2888:	4c06      	ldr	r4, [pc, #24]	; (28a4 <_fstat_r+0x20>)
    288a:	1c05      	adds	r5, r0, #0
    288c:	1c08      	adds	r0, r1, #0
    288e:	1c11      	adds	r1, r2, #0
    2890:	6023      	str	r3, [r4, #0]
    2892:	f7fe fda7 	bl	13e4 <_fstat>
    2896:	1c43      	adds	r3, r0, #1
    2898:	d103      	bne.n	28a2 <_fstat_r+0x1e>
    289a:	6823      	ldr	r3, [r4, #0]
    289c:	2b00      	cmp	r3, #0
    289e:	d000      	beq.n	28a2 <_fstat_r+0x1e>
    28a0:	602b      	str	r3, [r5, #0]
    28a2:	bd38      	pop	{r3, r4, r5, pc}
    28a4:	200001e0 	.word	0x200001e0

000028a8 <_isatty_r>:
    28a8:	b538      	push	{r3, r4, r5, lr}
    28aa:	2300      	movs	r3, #0
    28ac:	4c06      	ldr	r4, [pc, #24]	; (28c8 <_isatty_r+0x20>)
    28ae:	1c05      	adds	r5, r0, #0
    28b0:	1c08      	adds	r0, r1, #0
    28b2:	6023      	str	r3, [r4, #0]
    28b4:	f7fe fd9c 	bl	13f0 <_isatty>
    28b8:	1c43      	adds	r3, r0, #1
    28ba:	d103      	bne.n	28c4 <_isatty_r+0x1c>
    28bc:	6823      	ldr	r3, [r4, #0]
    28be:	2b00      	cmp	r3, #0
    28c0:	d000      	beq.n	28c4 <_isatty_r+0x1c>
    28c2:	602b      	str	r3, [r5, #0]
    28c4:	bd38      	pop	{r3, r4, r5, pc}
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	200001e0 	.word	0x200001e0
    28cc:	42000400 	.word	0x42000400
    28d0:	42000800 	.word	0x42000800
    28d4:	42000c00 	.word	0x42000c00
    28d8:	42001000 	.word	0x42001000
    28dc:	42001400 	.word	0x42001400
    28e0:	42001800 	.word	0x42001800
    28e4:	0c0b0a09 	.word	0x0c0b0a09
    28e8:	00000e0d 	.word	0x00000e0d
    28ec:	00000d46 	.word	0x00000d46
    28f0:	00000d42 	.word	0x00000d42
    28f4:	00000d42 	.word	0x00000d42
    28f8:	00000da4 	.word	0x00000da4
    28fc:	00000d5c 	.word	0x00000d5c
    2900:	00000d4c 	.word	0x00000d4c
    2904:	00000d62 	.word	0x00000d62
    2908:	00000d92 	.word	0x00000d92
    290c:	7761520a 	.word	0x7761520a
    2910:	7461645f 	.word	0x7461645f
    2914:	73692061 	.word	0x73692061
    2918:	0a642520 	.word	0x0a642520
    291c:	00000000 	.word	0x00000000
    2920:	00000043 	.word	0x00000043

00002924 <_global_impure_ptr>:
    2924:	20000004                                ... 

00002928 <__sf_fake_stdin>:
	...

00002948 <__sf_fake_stdout>:
	...

00002968 <__sf_fake_stderr>:
	...
    2988:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2998:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    29a8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    29b8:	00006665                                ef..

000029bc <_init>:
    29bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29be:	46c0      	nop			; (mov r8, r8)
    29c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    29c2:	bc08      	pop	{r3}
    29c4:	469e      	mov	lr, r3
    29c6:	4770      	bx	lr

000029c8 <__init_array_start>:
    29c8:	000000d1 	.word	0x000000d1

000029cc <_fini>:
    29cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29ce:	46c0      	nop			; (mov r8, r8)
    29d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    29d2:	bc08      	pop	{r3}
    29d4:	469e      	mov	lr, r3
    29d6:	4770      	bx	lr

000029d8 <__fini_array_start>:
    29d8:	000000a9 	.word	0x000000a9
